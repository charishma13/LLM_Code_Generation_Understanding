Run_ID,Iteration,Timestamp,model_name,reasoning_factor,context_type,Feedback,Human_Message,AI_Message,Updated_Coulomb_input
1,1,2025-03-24_18:07:57,o1,high,short,"Result from the code generated:
Your code hasn't yet passed all of the NIST benchmark tests. Here's the current progress:

Lennard-Jones Pair Dispersion Energy Comparison:
Test 1 (200 molecules): Computed: 9.3763E+04, NIST: 1.4403E+04, Match: False
Lennard-Jones long-range corrections Energy Comparison:
Test 1 (200 molecules): Computed: -9.7626E+02, NIST: -1.0273E+03, Match: False
Real Energy Comparison:
Test 1 (200 molecules): Computed: -3.1845E+05, NIST: -2.9713E+05, Match: False
Fourier Energy Comparison:
Test 1 (200 molecules): Computed: 2.7436E+04, NIST: 2.8897E+04, Match: False
Self Energy Comparison:
Test 1 (200 molecules): Computed: -3.7929E+06, NIST: -5.7910E+06, Match: False
Intra Energy Comparison:
Test 1 (200 molecules): Computed: 3.6075E+06, NIST: 5.7177E+06, Match: False

Count of correct pairwise answers: 0
Count of incorrect pairwise answers: 1
Count of correct LRC answers: 0
Count of incorrect LRC answers: 1
Count of correct Real Energy answers: 0
Count of incorrect Real Energy answers: 1
Count of correct Fourier Energy answers: 0
Count of incorrect Fourier Energy answers: 1
Count of correct Self Energy answers: 0
Count of incorrect Self Energy answers: 1
Count of correct Intra Energy answers: 0
Count of incorrect Intra Energy answers: 1

Total correct answers: 0
Total incorrect answers: 6

Out of the tests, 0 answers have been correct, with 6 remaining. 
Keep going – you're getting closer! Continue refining the code step by step until it passes all the tests.

Complete each function sequentially, incorporating feedback to optimize efficiency and align with NIST benchmarks. Aim to match the benchmark values as closely as possible with each attempt, ensuring visible numerical improvements. Refer to the context and revise accordingly.","Please review the raw code and implement the missing functions needed to compute Coulombic contributions using the traditional Ewald Summation Method for given triclinic or monoclinic configurations data.

import numpy as np
import pandas as pd
from scipy.special import erfc,erf
import math 

# defining all variables
atom_properties = {
    'O': {'type': 'O', 'sigma': 3.165558, 'epsilon': 78.197431, 'charge': -0.8476, 'num_particles': 1},
    'H': {'type': 'H', 'sigma': 0.000000, 'epsilon': 0.000000, 'charge': 0.4238, 'num_particles': 2},
}

# Trying for small configurations first
file_paths = [
    #    '../data/spce_sample_config_periodic4.txt',
    #    '../data/spce_sample_config_periodic2.txt',
    #    '../data/spce_sample_config_periodic3.txt',
        '../data/spce-sample-non-cuboid-configurations/spce_triclinic_sample_periodic3.txt'
    ]

NIST_TRICLINIC_SPC_E_Water = {'Configuration': [1, 2, 3, 4],
 'M (number of SPC/E molecules)': [400, 300, 200, 100],
 'Cell Type': ['Triclinic', 'Monoclinic', 'Triclinic', 'Monoclinic'],
 'Cell Side Lengths [a, b, c] (Å)': ['[30 Å, 30 Å, 30 Å]',
  '[27 Å, 30 Å, 36 Å]',
  '[30 Å, 30 Å, 30 Å]',
  '[36 Å, 36 Å, 36 Å]'],
 'Cell Angles [α, β, γ] (degrees)': ['[100°, 95°, 75°]',
  '[90°, 75°, 90°]',
  '[85°, 75°, 80°]',
  '[90°, 60°, 90°]'],
 'Number of Wave Vectors': [831, 1068, 838, 1028],
 'Edisp/kB (K)': [111992.0, 43286.0, 14403.3, 25025.1],
 'ELRC/kB (K)': [-4109.19, -2105.61, -1027.3, -163.091],
 'Ereal/kB (K)': [-727219.0, -476902.0, -297129.0, -171462.0],
 'Efourier/kB (K)': [44677.0, 44409.4, 28897.4, 22337.2],
 'Eself/kB (K)': [-11582000.0, -8686470.0, -5790980.0, -2895490.0],
 'Eintra/kB (K)': [11435400.0, 8576520.0, 5717680.0, 2858840.0],
 'Etotal/kB (K)': [-721254.0, -501259.0, -328153.0, -160912.0]}

# Data processing

def extracting_positions(input_file):
        # Extract the positions from the .xyz file
    with open(input_file, ""r"") as file:
        lines = file.readlines()

    data_lines = lines[2:]

    data_list = []
    for line in data_lines:
        stripped_line = line.strip()
        parts = stripped_line.split()
        if len(parts) >= 5:  
            try:
                x, y, z = map(float, parts[1:4])
                atom_type = parts[4]
                data_list.append([x, y, z, atom_type])
            except ValueError:
                continue  

    # Create a DataFrame with all configurations
    columns = [""X"", ""Y"", ""Z"", ""Atom Type""]
    configuration = pd.DataFrame(data_list, columns=columns)

    configuration.index = range(1, len(configuration) + 1)

    configuration[""Molecule""] = ((configuration.index - 1) // 3) + 1
    
    return configuration

# create the target dataframes
def creating_dataframes(file_paths, atom_properties, NIST_SPC_E_Water):
    # Create the NIST_SPC_E_Water dataframe
    NIST_SPC_E_Water = pd.DataFrame(NIST_SPC_E_Water)
    NIST_SPC_E_Water['Sum of energies'] = (
        NIST_SPC_E_Water['Edisp/kB (K)'] + NIST_SPC_E_Water['ELRC/kB (K)'] +
        NIST_SPC_E_Water['Ereal/kB (K)'] + NIST_SPC_E_Water['Efourier/kB (K)'] +
        NIST_SPC_E_Water['Eself/kB (K)'] + NIST_SPC_E_Water['Eintra/kB (K)']
    )

    # Creating the force_field dataframe
    force_field = pd.DataFrame(atom_properties).from_dict(atom_properties, orient='index')

    # Create the system dataframe containing some variables
    system = pd.DataFrame(file_paths, columns=[""file_paths""])

    # Use '(\d+)' and expand=False to get a single Series, fill missing values before converting
    system['configuration #'] = (
        system['file_paths']
        .str.extract(r'(\d+)', expand=False)
        .fillna('0')
        .astype(int)
    )

    system[[""number of particles"", ""box length""]] = system[""configuration #""].apply(
        lambda x: pd.Series({
            ""number of particles"": float(
                NIST_SPC_E_Water.loc[
                    NIST_SPC_E_Water[""Configuration""] == x,
                    ""M (number of SPC/E molecules)""
                ].values[0]
            ) if x in NIST_SPC_E_Water[""Configuration""].values else 0.0,
            ""box length"": float(
                NIST_SPC_E_Water.loc[
                    NIST_SPC_E_Water[""Configuration""] == x,
                    ""Lx=Ly=Lz (Å)""
                ].values[0]
            ) if x in NIST_SPC_E_Water[""Configuration""].values else 20.0
        })
    )

    system['cutoff'] = 10

    # Fix alpha so that alpha = 5.6 / L
    system['alpha'] = system.apply(
        lambda row: 5.6 / row['box length'] if row['box length'] != 0 else 0.28,
        axis=1
    )

    system['kmax'] = 5
    system['ε0'] = float(8.854187817E-12)
    system['kB'] = float(1.3806488E-23)

    return system, force_field, NIST_SPC_E_Water

# pairwise dispersion energy functions

# Minimum Image Distance function and Pair Dispersion Energy calculation (Code 3)
def minimum_image_distance(r_ij, cell_length):
    # Apply the minimum image convention to distances.
    return r_ij - cell_length * np.round(r_ij / cell_length)

# pairwise dispersion energy operation
def pair_dispersion_energy(system_data, configuration, force_field):
    """"""
    Compute the total pair dispersion energy for a system of particles.
    
    Parameters:
    - system_row: A row of the system DataFrame containing simulation properties.
    - configuration: DataFrame with atom positions and types.
    - force_field: DataFrame with force field parameters for atom types.

    Returns:
    - total_dispersion_energy: float, the total pair dispersion energy.
    """"""
    positions = configuration[['X', 'Y', 'Z']].values
    atom_types = configuration['Atom Type'].values
    cutoff = system_data['cutoff']
    cell_length = system_data['box length']
    num_atoms = len(positions)

    total_dispersion_energy = 0.0

    for i in range(num_atoms):
        for j in range(i + 1, num_atoms):
            r_ij = positions[i] - positions[j]
            r_ij = minimum_image_distance(r_ij, cell_length)
            distance = np.linalg.norm(r_ij)

            if 0 < distance < cutoff:
                type_i, type_j = atom_types[i], atom_types[j]

                if type_i not in force_field.index or type_j not in force_field.index:
                    continue

                epsilon_i = force_field.loc[type_i, 'epsilon']
                epsilon_j = force_field.loc[type_j, 'epsilon']
                sigma_i = force_field.loc[type_i, 'sigma']
                sigma_j = force_field.loc[type_j, 'sigma']

                epsilon_ij = np.sqrt(epsilon_i * epsilon_j)
                sigma_ij = (sigma_i + sigma_j) / 2.0
                s_over_r = sigma_ij / distance

                # Lennard-Jones potential
                potential_energy = 4 * epsilon_ij * (s_over_r**12 - s_over_r**6)
                total_dispersion_energy += potential_energy
                
    return total_dispersion_energy

# Compute LRC energy
def compute_lrc_energy(system_row, force_field):
    """"""
    Compute the Long-Range Correction (LRC) to the Lennard-Jones potential energy for a single system.
    """"""
    U_lrc_total = 0

    # Iterate over atom types in the force field
    for atom_type, atom_data in force_field.iterrows():
        num_particles = system_row['number of particles'] * atom_data['num_particles']
        
        # Calculate the system's volume
        volume = system_row['box length'] ** 3
        rho = num_particles / volume

        # Compute the LRC energy for each particle
        total_lrc_energy = 0.0

        # Get epsilon and sigma for each particle
        sigma = atom_data['sigma']
        epsilon = atom_data['epsilon']

        # Apply cutoff and compute LRC energy for each particle
        sigma_by_cutoff_3 = (sigma / system_row['cutoff']) ** 3
        sigma_by_cutoff_9 = sigma_by_cutoff_3 ** 3

        # LRC energy per particle
        U_lrc_per_particle = (8 / 3) * np.pi * rho * epsilon * sigma**3 * (sigma_by_cutoff_9 / 3 - sigma_by_cutoff_3)
        
        # Multiply by number of particles
        U_lrc_per_particle *= num_particles
        U_lrc_total += U_lrc_per_particle

    return U_lrc_total

def compute_real_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19  # C
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23  # (1/(4 pi eps0)) / kB

    alpha = system_data[""alpha""]  # 1/Å
    cutoff = system_data[""cutoff""]  # Å
    L = system_data[""box length""]  # Å

    def min_image(dx, box_length):
        return dx - round(dx / box_length) * box_length

    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    mol_ids = configuration[""Molecule""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])

    n_atoms = len(positions)
    real_energy = 0.0

    for j in range(n_atoms - 1):
        for l in range(j + 1, n_atoms):
            # Skip intramolecular pairs
            if mol_ids[j] == mol_ids[l]:
                continue

            dx = min_image(positions[l, 0] - positions[j, 0], L)
            dy = min_image(positions[l, 1] - positions[j, 1], L)
            dz = min_image(positions[l, 2] - positions[j, 2], L)
            r = math.sqrt(dx * dx + dy * dy + dz * dz)
            if r < cutoff and r > 1e-14:
                q_j = charges[j] * e_charge
                q_l = charges[l] * e_charge
                r_m = r * 1e-10
                factor_erfc = erfc(alpha * r)
                real_energy += coulomb_factor * (q_j * q_l / r_m) * factor_erfc

    return real_energy

def compute_fourier_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23  # 1/(4 pi eps0) in K·m / C^2

    alpha = system_data[""alpha""]
    kmax = system_data[""kmax""]
    L = system_data[""box length""]
    V_m = (L * 1e-10) ** 3

    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])
    charges_c = charges * e_charge

    positions_m = positions * 1e-10
    # 1/(4 pi eps0)*1/(2V) => coulomb_factor*(1/(2 V_m))
    prefactor = coulomb_factor / (2.0 * V_m)

    alpha_m = alpha * 1e10
    fourier_energy = 0.0

    max_sq = kmax * kmax + 2

    for kx in range(-kmax, kmax + 1):
        for ky in range(-kmax, kmax + 1):
            for kz in range(-kmax, kmax + 1):
                if (kx == 0 and ky == 0 and kz == 0):
                    continue

                k_int_sq = kx * kx + ky * ky + kz * kz
                if k_int_sq >= max_sq:
                    continue

                kx_m = (2.0 * math.pi / (L * 1e-10)) * kx
                ky_m = (2.0 * math.pi / (L * 1e-10)) * ky
                kz_m = (2.0 * math.pi / (L * 1e-10)) * kz
                k_sq = kx_m * kx_m + ky_m * ky_m + kz_m * kz_m
                if k_sq < 1e-14:
                    continue

                real_part = 0.0
                imag_part = 0.0
                for j, (xj, yj, zj) in enumerate(positions_m):
                    kr = kx_m*xj + ky_m*yj + kz_m*zj
                    real_part += charges_c[j]*math.cos(kr)
                    imag_part += charges_c[j]*math.sin(kr)

                sk_sq = real_part*real_part + imag_part*imag_part
                exponent = math.exp(- (k_sq)/(4.0*(alpha_m**2)))

                # 4 pi / k^2
                term = prefactor * (4.0 * math.pi / k_sq) * exponent * sk_sq

                fourier_energy += term

    return fourier_energy


def compute_self_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t,""charge""] for t in atom_types])
    charges_c = charges * e_charge

    alpha_m = alpha*1e10

    sum_q2 = np.sum(charges_c**2)

    self_energy = - coulomb_factor * (alpha_m / math.sqrt(math.pi)) * sum_q2
    return self_energy


def compute_intra_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t,""charge""] for t in atom_types])
    mol_ids = configuration[""Molecule""].values

    alpha_dimless = alpha

    intra_energy = 0.0
    unique_mols = np.unique(mol_ids)

    for m_id in unique_mols:
        idxs = np.where(mol_ids == m_id)[0]
        n_mol_atoms = len(idxs)
        for i in range(n_mol_atoms - 1):
            for j in range(i+1, n_mol_atoms):
                idx_i = idxs[i]
                idx_j = idxs[j]
                dx = positions[idx_j,0] - positions[idx_i,0]
                dy = positions[idx_j,1] - positions[idx_i,1]
                dz = positions[idx_j,2] - positions[idx_i,2]
                r = math.sqrt(dx*dx + dy*dy + dz*dz)
                if r > 1e-14:
                    q_i = charges[idx_i]*e_charge
                    q_j = charges[idx_j]*e_charge
                    r_m = r*1e-10
                    erf_val = erf(alpha_dimless*r)
                    val = coulomb_factor*(q_i*q_j / r_m)*erf_val
                    intra_energy -= val

    return intra_energy


# DataFrame Descriptions:

# 1. NIST_TRICLINIC_SPC_E_Water DataFrame:
#    - Contains thermodynamic properties of SPC/E water configurations in both triclinic and monoclinic cells.
#    - Columns:
#        - 'Configuration' (int): Configuration ID (1-4).
#        - 'M (number of SPC/E molecules)' (int): Number of SPC/E molecules in the system.
#        - 'Cell Type' (str): Type of the cell (e.g., Triclinic, Monoclinic).
#        - 'Cell Side Lengths [a, b, c] (Å)' (list of strings): Cell side lengths in Ångströms.
#        - 'Cell Angles [α, β, γ] (degrees)' (list of strings): Cell angles in degrees.
#        - 'Number of Wave Vectors' (int): The number of wave vectors for each configuration.
#        - 'Edisp/kB (K)' (float): Dispersion energy in Kelvin.
#        - 'ELRC/kB (K)' (float): Long-range correction energy in Kelvin.
#        - 'Ereal/kB (K)' (float): Real energy in Kelvin.
#        - 'Efourier/kB (K)' (float): Fourier transform energy in Kelvin.
#        - 'Eself/kB (K)' (float): Self-interaction energy in Kelvin.
#        - 'Eintra/kB (K)' (float): Intra-molecular energy in Kelvin.
#        - 'Etotal/kB (K)' (float): Total energy in Kelvin.

# 2. force_field DataFrame:
#    - Contains force field parameters for SPC/E water, specifically for oxygen ('O') and hydrogen ('H').
#    - Columns:
#        - 'type' (str): Atom type ('O' or 'H').
#        - 'sigma' (float): Lennard-Jones parameter (Å).
#        - 'epsilon' (float): Lennard-Jones well depth (K).
#        - 'charge' (float): Partial charge (e).
#        - 'num_particles' (int): Number of particles per molecule.

# 3. system DataFrame:
#    - Contains metadata about each system configuration.
#    - Columns:
#        - 'file_paths' (str): File names containing atomic configurations.
#        - 'configuration #' (int): Extracted configuration number (1-4).
#        - 'number of particles' (float): Number of molecules (from 'NIST_SPC_E_Water').
#        - 'box length' (float): Box dimensions (from 'NIST_SPC_E_Water').
#        - 'cutoff' (int): Fixed cutoff distance for interactions (10 Å).
#        - 'alpha' (float): Ewald summation parameter (5.6 / min(a, b, c)).
#        - 'kmax' (int): Maximum wave vector index (5); also, only include k for which k² < kmax² + 2, i.e., k² < 27.
#        - 'ε0' (float): Permittivity of Vacuum (8.854187817E-12 C²/(J m)).
#        - 'kB' (float): Boltzmann Constant (1.3806488E-23 J/K).

# 4. configuration DataFrame (from 'extracting_positions'):
#    - Created per file, containing atomic positions.
#    - Columns:
#        - 'X' (float): Atom coordinates in Ångströms.
#        - 'Y' (float): Atom coordinates in Ångströms.
#        - 'Z' (float): Atom coordinates in Ångströms.
#        - 'Atom Type' (str): Type of atom ('O' or 'H').
#        - 'Molecule' (int): Molecule index assigned based on position.


system, force_field, NIST_TRICLINIC_SPC_E_Water = creating_dataframes(file_paths, atom_properties,NIST_TRICLINIC_SPC_E_Water)

# Computing energies storing in results
results = pd.DataFrame()

results['Number of Particles'] = system['number of particles'].astype(int)

# Calculate LRC energy for all system configurations
results['lrc_Energies'] = system.apply(
    lambda row: compute_lrc_energy(row, force_field), axis=1
)

# Calculate pairwise energy for all system configurations
results['dispersion_energies'] = system['file_paths'].apply(
    lambda file_path: pair_dispersion_energy(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path), 
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['real_energies'] = system['file_paths'].apply(
    lambda file_path: compute_real_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['fourier_energies'] = system['file_paths'].apply(
    lambda file_path: compute_fourier_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['self_energies'] = system['file_paths'].apply(
    lambda file_path: compute_self_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['intra_energies'] = system['file_paths'].apply(
    lambda file_path: compute_intra_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

def compare_LJ_coulomb_energy(df1, df2, tolerance=1e-4):
    # Merge df1 and df2 based on the number of particles
    df_merged = df1.merge(df2, left_on='Number of Particles', right_on='M (number of SPC/E molecules)', how='left')

    # Initialize counters
    matched_real = matched_fourier = matched_self = matched_intra = 0
    matched_dispersion = matched_lrc = 0
    not_matched_real = not_matched_fourier = not_matched_self = not_matched_intra = 0
    not_matched_dispersion = not_matched_lrc = 0

    # Initialize output lists
    real_energy_output, fourier_energy_output = [], []
    self_energy_output, intra_energy_output = [], []
    lrc_energy_output, dispersion_energy_output = [], []

    # Iterate over merged DataFrame
    for idx, row in df_merged.iterrows():
        # Extract computed values from df1
        real_energy = row['real_energies']
        fourier_energy = row['fourier_energies']
        self_energy = row['self_energies']
        intra_energy = row['intra_energies']
        num_molecules = row['Number of Particles']
        # LJ Components
        lrc_energy = row['lrc_Energies']
        dispersion_energy = row['dispersion_energies']

        # Extract reference values from df2
        if pd.isna(row['Ereal/kB (K)']):
            continue  # Skip if no match is found in df2

        nist_real_energy = float(row['Ereal/kB (K)'])
        nist_fourier_energy = float(row['Efourier/kB (K)'])
        nist_self_energy = float(row['Eself/kB (K)'])
        nist_intra_energy = float(row['Eintra/kB (K)'])
        nist_lrc_energy = float(row['ELRC/kB (K)'])
        nist_dispersion_energy = float(row['Edisp/kB (K)'])

        # Perform numeric comparisons with a tolerance
        match_real = np.isclose(real_energy, nist_real_energy, atol=tolerance)
        match_fourier = np.isclose(fourier_energy, nist_fourier_energy, atol=tolerance)
        match_self = np.isclose(self_energy, nist_self_energy, atol=tolerance)
        match_intra = np.isclose(intra_energy, nist_intra_energy, atol=tolerance)

        # Perform numeric comparisons with a tolerance
        match_dispersion = np.isclose(dispersion_energy, nist_dispersion_energy, atol=tolerance)
        match_lrc = np.isclose(lrc_energy, nist_lrc_energy, atol=tolerance)

        matched_real += int(match_real)
        not_matched_real += int(not match_real)

        matched_fourier += int(match_fourier)
        not_matched_fourier += int(not match_fourier)

        matched_self += int(match_self)
        not_matched_self += int(not match_self)

        matched_intra += int(match_intra)
        not_matched_intra += int(not match_intra)

        matched_dispersion += int(match_dispersion)
        not_matched_dispersion += int(not match_dispersion)

        matched_lrc += int(match_lrc)
        not_matched_lrc += int(not match_lrc)

        # Store formatted outputs
        dispersion_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {dispersion_energy:.4E}, NIST: {nist_dispersion_energy:.4E}, Match: {match_dispersion}"")
        lrc_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {lrc_energy:.4E}, NIST: {nist_lrc_energy:.4E}, Match: {match_lrc}"")
        real_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {real_energy:.4E}, NIST: {nist_real_energy:.4E}, Match: {match_real}"")
        fourier_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {fourier_energy:.4E}, NIST: {nist_fourier_energy:.4E}, Match: {match_fourier}"")
        self_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {self_energy:.4E}, NIST: {nist_self_energy:.4E}, Match: {match_self}"")
        intra_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {intra_energy:.4E}, NIST: {nist_intra_energy:.4E}, Match: {match_intra}"")

    # Print final results
    print()
    print(""Lennard-Jones Pair Dispersion Energy Comparison:"")
    print(*dispersion_energy_output)
    print(""Lennard-Jones long-range corrections Energy Comparison:"")
    print(*lrc_energy_output)
    print(""Real Energy Comparison:"")
    print(*real_energy_output)
    print(""Fourier Energy Comparison:"")
    print(*fourier_energy_output)
    print(""Self Energy Comparison:"")
    print(*self_energy_output)
    print(""Intra Energy Comparison:"")
    print(*intra_energy_output)
    print()
    print(f""Count of correct pairwise answers: {matched_dispersion}"")
    print(f""Count of incorrect pairwise answers: {not_matched_dispersion}"")
    print(f""Count of correct LRC answers: {matched_lrc}"")
    print(f""Count of incorrect LRC answers: {not_matched_lrc}"")
    print(f""Count of correct Real Energy answers: {matched_real}"")
    print(f""Count of incorrect Real Energy answers: {not_matched_real}"")
    print(f""Count of correct Fourier Energy answers: {matched_fourier}"")
    print(f""Count of incorrect Fourier Energy answers: {not_matched_fourier}"")
    print(f""Count of correct Self Energy answers: {matched_self}"")
    print(f""Count of incorrect Self Energy answers: {not_matched_self}"")
    print(f""Count of correct Intra Energy answers: {matched_intra}"")
    print(f""Count of incorrect Intra Energy answers: {not_matched_intra}"")
    print()

    total_correct = matched_real + matched_fourier + matched_self + matched_intra + matched_dispersion + matched_lrc
    total_incorrect = not_matched_real + not_matched_fourier + not_matched_self + not_matched_intra + not_matched_dispersion + not_matched_lrc

    print(f""Total correct answers: {total_correct}"")
    print(f""Total incorrect answers: {total_incorrect}"")


# calling compare_coulomb_energy function
compare_LJ_coulomb_energy(results, NIST_TRICLINIC_SPC_E_Water)

Please review the provided code and implement the missing functions needed to compute Coulombic contributions using the traditional Ewald Summation Method for triclinic or monoclinic configurations data.

Produce a JSON output in the following format:
  ""Reasoning"": """",
  ""Code"": """"

Ensure that:
1. The JSON output is **properly formatted** with **double quotes** around keys.
2. The **Reasoning** section provides a concise and clear explanation of the approach taken.
3. The **Code** section contains well-structured, indented, and syntactically correct Python (or the required language).
4. The JSON output does **not** contain extraneous symbols such as triple backticks (` ``` `) or markdown indicators.
5. The output should be **fully valid JSON** and parseable using `json.loads()`.

Context:
Illustration of input file format:

            3.000000000000e+01       3.000000000000e+01       3.000000000000e+01
            8.500000000000e+01       7.500000000000e+01       8.000000000000e+01
         200
    1      -1.073606597760e+01       1.432194046140e+01      -6.226901963110e+00    O
    2      -1.661030970030e+01      -1.461065205480e+01      -5.798020258290e+00    H
    3      -1.118063417070e+01       1.380841402440e+01      -6.960829561930e+00    H
    4      -1.377161709910e+01      -8.711236583990e+00      -1.350200277380e+01    O
    5      -1.347193958490e+01      -8.247621904110e+00      -1.433582218840e+01    H
   
Refer to the Coulomb Ewald summation formula below.

Formula(latex form):

\Large \begin{eqnarray} E_{coulomb}\left(\mathbf{r}^N\right) & = &
\sum\limits_{j}  \sum\limits_{l>j}
\dfrac{q_j q_l}{ 4 \pi \epsilon_0} \dfrac{\text{erfc}\left(\alpha \cdot  \left| \mathbf{r}_{jl} \right| \right)}{\left| \mathbf{r}_{jl} \right|} \Theta\left( r_{cut} - \left|\mathbf{r}_{jl}\right| \right) \\
&& +\dfrac{1}{2 \pi V} \sum\limits_{\mathbf{k} \neq \mathbf{0}} \dfrac{1}{k^2} \exp \left[-\left( \dfrac{\pi k}{\alpha} \right)^2 \right] \dfrac{1}{4 \pi \epsilon_0} \cdot \left|\sum\limits_{j=1}^N q_j \exp \left(2\pi i \mathbf{k} \cdot \mathbf{r}_j \right) \right|^2 \\
&& - \dfrac{\alpha}{\sqrt{\pi}} \sum\limits_j \dfrac{q_j^2}{4 \pi \epsilon_0} \\
&& - \sum\limits_{j=1}^M  \sum\limits_{\kappa}  \sum\limits_{\lambda>\kappa} \dfrac{q_{j_\kappa} q_{j_\lambda}}{ 4 \pi \epsilon_0} \dfrac{\text{erf}\left(\alpha \cdot  \left| \mathbf{r}_{j_\kappa j_\lambda} \right| \right)}{\left| \mathbf{r}_{j_\kappa j_\lambda} \right|}
\end{eqnarray}

Explanation:

We note that this form of the Ewald Summation

1. requires total charge neutrality for the configuration and

2. neglects the surface dipole term (equivalent to using the ""tin-foil"" or conducting surface boundary condition)

Description:

The terms on the right-hand side of the equality to be computed are:

1) The real-space term Ereal,

2) The Fourier-space term, Efourier,

3) The self-correction term Eself,

4) The intramolecular term Eintra.

5) The Real Energy

6) The dispersion Energy

Notes:

Primary task: 

Write your code to modify the functions outlined above and incorporate any necessary additional functions.

You may access the required columns from the given dataframes as parameters to the function to calculate the energies.

Print Statements: Ensure that the print statements in the compare_LJ_coulomb_energy function remain exactly as they are, even as you make modifications to the other functions.

Function Modifications: The output should always include Python code for modifying the respective functions.

Flexibility in Code Changing: You are free to change other parts of the code, but the compare_LJ_coulomb_energy function must remain unchanged, as it manages the iteration loop.

Strict Requirements:

Function Names: Do not modify the function names or parameters.

Preserve compare_LJ_coulomb_energy Function: The compare_LJ_coulomb_energy function should remain unchanged, as it controls the iteration loop.

Iteration Notes: 

Iterative Process: If multiple functions are provided to solve the task, work through them one by one in each iteration.

Automated Iteration: The iteration loop will continue until the desired outcome is achieved.

Feedback Integration: When feedback is provided, ensure you proceed with the next steps based on the iteration results and the correct answers generated.



","{
  ""Reasoning"": ""To handle triclinic or monoclinic cells, we need to (1) parse the box lengths (a, b, c) and angles (α, β, γ) from the input file, (2) construct the 3×3 box matrix and its inverse for converting to/from fractional coordinates, and (3) replace the standard minimum-image convention (suitable only for cubic cells) with a triclinic minimum-image function. Similarly, for the reciprocal-space summation, we must generate k-vectors appropriately from the reciprocal of this triclinic box. Below is the modified code including helper functions to read the box geometry and apply triclinic transformations in real and reciprocal space Ewald sums while preserving the existing function names and the compare_LJ_coulomb_energy routine."",
  ""Code"": ""import numpy as np\nimport pandas as pd\nfrom scipy.special import erfc, erf\nimport math\n\n# -------------------------------------------------------------------------------------------\n# New helper functions for triclinic / monoclinic transformations\n# -------------------------------------------------------------------------------------------\n\ndef build_box_matrix(a, b, c, alpha_deg, beta_deg, gamma_deg):\n    \""\""\""Construct the 3x3 box matrix for a triclinic cell, given side lengths and angles in degrees.\""\""\""\n    alpha = np.deg2rad(alpha_deg)\n    beta = np.deg2rad(beta_deg)\n    gamma = np.deg2rad(gamma_deg)\n\n    # Refer to standard formulas for triclinic box vectors.\n    # For example:\n    # v1 = (a, 0, 0)\n    # v2 = (b*cos(gamma), b*sin(gamma), 0)\n    # v3 uses alpha,beta,gamma in a general form.\n\n    v1 = np.array([a, 0.0, 0.0])\n    v2 = np.array([b * math.cos(gamma), b * math.sin(gamma), 0.0])\n\n    # For v3, project c in the plane with the angles.\n    # c_x = c*cos(beta)\n    # c_y = c * (cos(alpha) - cos(beta)*cos(gamma)) / sin(gamma)\n    # c_z = sqrt(c^2 - c_x^2 - c_y^2)\n    c_x = c * math.cos(beta)\n    c_y = c * (math.cos(alpha) - math.cos(beta) * math.cos(gamma)) / math.sin(gamma)\n    # Make sure any floating rounding doesn’t cause negative sqrt.\n    c_z_sq = c**2 - c_x**2 - c_y**2\n    if c_z_sq < 0.0:\n        c_z_sq = 0.0\n    c_z = math.sqrt(c_z_sq)\n\n    v3 = np.array([c_x, c_y, c_z])\n\n    box_matrix = np.vstack((v1, v2, v3))\n    return box_matrix\n\n\ndef triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):\n    \""\""\""Apply the minimum image convention for a triclinic cell.\n    r_vec is a 3D Cartesian displacement.\n    box_matrix and inv_box_matrix are 3x3 arrays.\n    Return the 'shortest' displacement vector under PBC.\""\""\""\n    # Convert r_vec to fractional coordinates:\n    frac = inv_box_matrix @ r_vec\n    # Round fractional coords to nearest integer so we shift by the smallest integer box multiple.\n    frac -= np.rint(frac)\n    # Convert back to Cartesian:\n    r_min = box_matrix @ frac\n    return r_min\n\n\ndef build_reciprocal_vectors(box_matrix):\n    \""\""\""Compute reciprocal box vectors (2π times the inverse transpose).\""\""\""\n    # The standard reciprocal matrix is 2π * (box_matrix^-1)^T.\n    inv_trans = np.linalg.inv(box_matrix).T\n    reciprocal = 2.0 * math.pi * inv_trans\n    return reciprocal\n\n# -------------------------------------------------------------------------------------------\n# Existing provided code with modifications for triclinic data\n# -------------------------------------------------------------------------------------------\n\natom_properties = {\n    'O': {'type': 'O', 'sigma': 3.165558, 'epsilon': 78.197431, 'charge': -0.8476, 'num_particles': 1},\n    'H': {'type': 'H', 'sigma': 0.0, 'epsilon': 0.0, 'charge': 0.4238, 'num_particles': 2},\n}\n\nfile_paths = [\n    # '../data/spce_sample_config_periodic4.txt',\n    # '../data/spce_sample_config_periodic2.txt',\n    # '../data/spce_sample_config_periodic3.txt',\n    '../data/spce-sample-non-cuboid-configurations/spce_triclinic_sample_periodic3.txt'\n]\n\nNIST_TRICLINIC_SPC_E_Water = {\n    'Configuration': [1, 2, 3, 4],\n    'M (number of SPC/E molecules)': [400, 300, 200, 100],\n    'Cell Type': ['Triclinic', 'Monoclinic', 'Triclinic', 'Monoclinic'],\n    'Cell Side Lengths [a, b, c] (Å)': ['[30 Å, 30 Å, 30 Å]', '[27 Å, 30 Å, 36 Å]', '[30 Å, 30 Å, 30 Å]', '[36 Å, 36 Å, 36 Å]'],\n    'Cell Angles [α, β, γ] (degrees)': ['[100°, 95°, 75°]', '[90°, 75°, 90°]', '[85°, 75°, 80°]', '[90°, 60°, 90°]'],\n    'Number of Wave Vectors': [831, 1068, 838, 1028],\n    'Edisp/kB (K)': [111992.0, 43286.0, 14403.3, 25025.1],\n    'ELRC/kB (K)': [-4109.19, -2105.61, -1027.3, -163.091],\n    'Ereal/kB (K)': [-727219.0, -476902.0, -297129.0, -171462.0],\n    'Efourier/kB (K)': [44677.0, 44409.4, 28897.4, 22337.2],\n    'Eself/kB (K)': [-11582000.0, -8686470.0, -5790980.0, -2895490.0],\n    'Eintra/kB (K)': [11435400.0, 8576520.0, 5717680.0, 2858840.0],\n    'Etotal/kB (K)': [-721254.0, -501259.0, -328153.0, -160912.0]\n}\n\n# -------------------------------------------------------------------------------------------\n# Function to parse positions and box info from file\n# -------------------------------------------------------------------------------------------\n\ndef extracting_positions(input_file):\n    \""\""\""Extract the positions from the .xyz-like file and also parse triclinic box parameters.\""\""\""\n    with open(input_file, \""r\"") as file:\n        lines = file.readlines()\n\n    # Parse box side lengths and angles from the first two lines.\n    # For example, line[0]: '3.000000000000e+01 3.000000000000e+01 3.000000000000e+01' -> a, b, c\n    a_b_c = lines[0].split()\n    alpha_beta_gamma = lines[1].split()\n\n    a = float(a_b_c[0])\n    b = float(a_b_c[1])\n    c = float(a_b_c[2])\n\n    alpha_deg = float(alpha_beta_gamma[0])\n    beta_deg = float(alpha_beta_gamma[1])\n    gamma_deg = float(alpha_beta_gamma[2])\n\n    # The 3rd line might be the total count (not always used for all checks, but we parse it).\n    # We'll skip it, or parse for possible usage.\n    data_lines = lines[3:]  # positions start from line 3.\n\n    data_list = []\n    for line in data_lines:\n        stripped_line = line.strip()\n        parts = stripped_line.split()\n        if len(parts) >= 5:\n            try:\n                x, y, z = map(float, parts[1:4])\n                atom_type = parts[4]\n                data_list.append([x, y, z, atom_type])\n            except ValueError:\n                continue\n\n    # Create a DataFrame with all configurations\n    columns = [\""X\"", \""Y\"", \""Z\"", \""Atom Type\""]\n    configuration = pd.DataFrame(data_list, columns=columns)\n    configuration.index = range(1, len(configuration) + 1)\n    configuration[\""Molecule\""] = ((configuration.index - 1) // 3) + 1\n\n    # Build the box matrix and store it as attributes in the DataFrame.\n    box_matrix = build_box_matrix(a, b, c, alpha_deg, beta_deg, gamma_deg)\n    inv_box_matrix = np.linalg.inv(box_matrix)\n    configuration.attrs['box_matrix'] = box_matrix\n    configuration.attrs['inv_box_matrix'] = inv_box_matrix\n    configuration.attrs['cell_type'] = None  # We can assign later if needed.\n\n    # Also store the raw lengths and angles for reference.\n    configuration.attrs['a'] = a\n    configuration.attrs['b'] = b\n    configuration.attrs['c'] = c\n    configuration.attrs['alpha_deg'] = alpha_deg\n    configuration.attrs['beta_deg'] = beta_deg\n    configuration.attrs['gamma_deg'] = gamma_deg\n\n    return configuration\n\n# -------------------------------------------------------------------------------------------\n# create the target dataframes\n# -------------------------------------------------------------------------------------------\ndef creating_dataframes(file_paths, atom_properties, NIST_SPC_E_Water):\n    # Create the NIST_SPC_E_Water dataframe\n    NIST_SPC_E_Water = pd.DataFrame(NIST_SPC_E_Water)\n    NIST_SPC_E_Water['Sum of energies'] = (\n        NIST_SPC_E_Water['Edisp/kB (K)'] + NIST_SPC_E_Water['ELRC/kB (K)'] +\n        NIST_SPC_E_Water['Ereal/kB (K)'] + NIST_SPC_E_Water['Efourier/kB (K)'] +\n        NIST_SPC_E_Water['Eself/kB (K)'] + NIST_SPC_E_Water['Eintra/kB (K)']\n    )\n\n    # Creating the force_field dataframe\n    force_field = pd.DataFrame(atom_properties).from_dict(atom_properties, orient='index')\n\n    # Create the system dataframe containing some variables\n    system = pd.DataFrame(file_paths, columns=[\""file_paths\""])\n\n    # Extract the configuration numbers from the file path\n    system['configuration #'] = (\n        system['file_paths']\n        .str.extract(r'(\\d+)', expand=False)\n        .fillna('0')\n        .astype(int)\n    )\n\n    # Here we just fill out some default metadata for demonstration\n    # We'll store box length as 30.0 if not found, etc.\n    # (In a real scenario, we would merge with NIST_SPC_E_Water data or parse from file directly.)\n\n    # For minimal demonstration, do not break anything below:\n    system[[\""number of particles\"", \""box length\""]] = system[\""configuration #\""].apply(\n        lambda x: pd.Series({\n            \""number of particles\"": float(\n                NIST_SPC_E_Water.loc[\n                    NIST_SPC_E_Water[\""Configuration\""] == x,\n                    \""M (number of SPC/E molecules)\""\n                ].values[0]\n            ) if x in NIST_SPC_E_Water[\""Configuration\""].values else 0.0,\n            \""box length\"": 30.0  # default\n        })\n    )\n\n    system['cutoff'] = 10\n\n    # Fix alpha so that alpha = 5.6 / L for simplicity (cubic approx)\n    system['alpha'] = system.apply(\n        lambda row: 5.6 / row['box length'] if row['box length'] != 0 else 0.28,\n        axis=1\n    )\n\n    system['kmax'] = 5\n    system['ε0'] = float(8.854187817E-12)\n    system['kB'] = float(1.3806488E-23)\n\n    return system, force_field, NIST_SPC_E_Water\n\n# -------------------------------------------------------------------------------------------\n# pairwise dispersion energy functions\n# -------------------------------------------------------------------------------------------\ndef minimum_image_distance(r_ij, cell_length):\n    # Old cubic version\n    return r_ij - cell_length * np.round(r_ij / cell_length)\n\n\ndef pair_dispersion_energy(system_data, configuration, force_field):\n    positions = configuration[['X', 'Y', 'Z']].values\n    atom_types = configuration['Atom Type'].values\n    cutoff = system_data['cutoff']\n    cell_length = system_data['box length']\n    num_atoms = len(positions)\n\n    # Attempt to ascertain box_matrix from configuration.attrs\n    box_matrix = configuration.attrs.get('box_matrix', None)\n    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)\n\n    total_dispersion_energy = 0.0\n\n    for i in range(num_atoms):\n        for j in range(i + 1, num_atoms):\n            r_ij = positions[i] - positions[j]\n            # Use triclinic min image if available:\n            if box_matrix is not None and inv_box_matrix is not None:\n                r_ij = triclinic_minimum_image_distance(r_ij, box_matrix, inv_box_matrix)\n            else:\n                r_ij = minimum_image_distance(r_ij, cell_length)\n\n            distance = np.linalg.norm(r_ij)\n\n            if 0 < distance < cutoff:\n                type_i, type_j = atom_types[i], atom_types[j]\n\n                if type_i not in force_field.index or type_j not in force_field.index:\n                    continue\n\n                epsilon_i = force_field.loc[type_i, 'epsilon']\n                epsilon_j = force_field.loc[type_j, 'epsilon']\n                sigma_i = force_field.loc[type_i, 'sigma']\n                sigma_j = force_field.loc[type_j, 'sigma']\n\n                epsilon_ij = np.sqrt(epsilon_i * epsilon_j)\n                sigma_ij = (sigma_i + sigma_j) / 2.0\n                s_over_r = sigma_ij / distance\n\n                # Lennard-Jones potential\n                potential_energy = 4 * epsilon_ij * (s_over_r**12 - s_over_r**6)\n                total_dispersion_energy += potential_energy\n\n    return total_dispersion_energy\n\n\ndef compute_lrc_energy(system_row, force_field):\n    U_lrc_total = 0\n\n    for atom_type, atom_data in force_field.iterrows():\n        num_particles = system_row['number of particles'] * atom_data['num_particles']\n        volume = system_row['box length'] ** 3  # approximate for cubic\n        rho = num_particles / volume\n\n        sigma = atom_data['sigma']\n        epsilon = atom_data['epsilon']\n        cutoff = system_row['cutoff']\n\n        sigma_by_cutoff_3 = (sigma / cutoff) ** 3\n        sigma_by_cutoff_9 = sigma_by_cutoff_3 ** 3\n\n        # LRC energy per particle\n        U_lrc_per_particle = (8 / 3) * np.pi * rho * epsilon * sigma**3 * (sigma_by_cutoff_9 / 3 - sigma_by_cutoff_3)\n\n        U_lrc_per_particle *= num_particles\n        U_lrc_total += U_lrc_per_particle\n\n    return U_lrc_total\n\n# -------------------------------------------------------------------------------------------\n# Modified compute_real_energies to handle triclinic\n# -------------------------------------------------------------------------------------------\ndef compute_real_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19  # C\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23  # (1/(4 pi eps0)) / kB\n\n    alpha = system_data[\""alpha\""]  # 1/Å\n    cutoff = system_data[\""cutoff\""]  # Å\n    L = system_data[\""box length\""]  # Å\n\n    # Attempt to retrieve triclinic box if present\n    box_matrix = configuration.attrs.get('box_matrix', None)\n    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)\n\n    def min_image(dx, box_length):\n        return dx - round(dx / box_length) * box_length\n\n    positions = configuration[[\""X\"", \""Y\"", \""Z\""]].values\n    atom_types = configuration[\""Atom Type\""].values\n    mol_ids = configuration[\""Molecule\""].values\n    charges = np.array([force_field.loc[t, \""charge\""] for t in atom_types])\n\n    n_atoms = len(positions)\n    real_energy = 0.0\n\n    for j in range(n_atoms - 1):\n        for l in range(j + 1, n_atoms):\n            if mol_ids[j] == mol_ids[l]:\n                continue\n\n            dr = positions[l] - positions[j]\n            if box_matrix is not None and inv_box_matrix is not None:\n                dr = triclinic_minimum_image_distance(dr, box_matrix, inv_box_matrix)\n            else:\n                dr[0] = min_image(dr[0], L)\n                dr[1] = min_image(dr[1], L)\n                dr[2] = min_image(dr[2], L)\n\n            r = math.sqrt(dr[0]*dr[0] + dr[1]*dr[1] + dr[2]*dr[2])\n            if r < cutoff and r > 1e-14:\n                q_j = charges[j] * e_charge\n                q_l = charges[l] * e_charge\n                r_m = r * 1e-10\n                factor_erfc = erfc(alpha * r)\n                real_energy += coulomb_factor * (q_j * q_l / r_m) * factor_erfc\n\n    return real_energy\n\n# -------------------------------------------------------------------------------------------\n# Modified compute_fourier_energies to handle triclinic\n# -------------------------------------------------------------------------------------------\ndef compute_fourier_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23  # 1/(4 pi eps0) in K·m / C^2\n\n    alpha = system_data[\""alpha\""]\n    kmax = system_data[\""kmax\""]\n\n    # Attempt to retrieve triclinic box matrix:\n    box_matrix = configuration.attrs.get('box_matrix', None)\n    if box_matrix is not None:\n        # Volume in cubic meters\n        V_m = abs(np.linalg.det(box_matrix)) * (1e-10)**3\n        reciprocal = build_reciprocal_vectors(box_matrix)\n    else:\n        # fallback cubic approach\n        L = system_data[\""box length\""]\n        V_m = (L * 1e-10)**3\n        # reciprocal is 2π/L times identity\n        reciprocal = (2.0 * math.pi / (L * 1e-10)) * np.eye(3)\n\n    positions = configuration[[\""X\"", \""Y\"", \""Z\""]].values\n    atom_types = configuration[\""Atom Type\""].values\n    charges = np.array([force_field.loc[t, \""charge\""] for t in atom_types])\n    charges_c = charges * e_charge\n    positions_m = positions * 1e-10\n\n    prefactor = coulomb_factor / (2.0 * V_m)\n    alpha_m = alpha * 1e10\n\n    fourier_energy = 0.0\n\n    # We will iterate all integer k in range(-kmax, kmax), form k-vector as k = n1*b1 + n2*b2 + n3*b3.\n    # Then exclude k=0.\n\n    for nx in range(-kmax, kmax+1):\n        for ny in range(-kmax, kmax+1):\n            for nz in range(-kmax, kmax+1):\n                if nx == 0 and ny == 0 and nz == 0:\n                    continue\n                # Build k-vector:\n                k_vec = nx*reciprocal[:,0] + ny*reciprocal[:,1] + nz*reciprocal[:,2]\n                k_sq = np.dot(k_vec, k_vec)\n                if k_sq < 1e-14:\n                    continue\n\n                # Use the typical Ewald restriction: k^2 < kmax^2 + 2 etc. (optional)\n                # We'll skip for brevity or do quick check:\n                if k_sq > (kmax**2 + 2) * ((2.0*math.pi/(30.0*1e-10))**2):\n                    continue\n\n                real_part = 0.0\n                imag_part = 0.0\n                for j, (xj, yj, zj) in enumerate(positions_m):\n                    kr = k_vec[0]*xj + k_vec[1]*yj + k_vec[2]*zj\n                    real_part += charges_c[j]*math.cos(kr)\n                    imag_part += charges_c[j]*math.sin(kr)\n\n                sk_sq = real_part*real_part + imag_part*imag_part\n                exponent = math.exp(-k_sq/(4.0*alpha_m**2))\n\n                term = prefactor * (4.0 * math.pi / k_sq) * exponent * sk_sq\n                fourier_energy += term\n\n    return fourier_energy\n\n# -------------------------------------------------------------------------------------------\n# Self-term remains the same\n# -------------------------------------------------------------------------------------------\ndef compute_self_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data[\""alpha\""]\n    atom_types = configuration[\""Atom Type\""].values\n    charges = np.array([force_field.loc[t,\""charge\""] for t in atom_types])\n    charges_c = charges * e_charge\n\n    alpha_m = alpha*1e10\n\n    sum_q2 = np.sum(charges_c**2)\n\n    self_energy = - coulomb_factor * (alpha_m / math.sqrt(math.pi)) * sum_q2\n    return self_energy\n\n# -------------------------------------------------------------------------------------------\n# Intramolecular term remains the same logically; we can keep as is\n# -------------------------------------------------------------------------------------------\ndef compute_intra_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data[\""alpha\""]\n    positions = configuration[[\""X\"", \""Y\"", \""Z\""]].values\n    atom_types = configuration[\""Atom Type\""].values\n    charges = np.array([force_field.loc[t,\""charge\""] for t in atom_types])\n    mol_ids = configuration[\""Molecule\""].values\n\n    alpha_dimless = alpha\n\n    intra_energy = 0.0\n    unique_mols = np.unique(mol_ids)\n\n    for m_id in unique_mols:\n        idxs = np.where(mol_ids == m_id)[0]\n        n_mol_atoms = len(idxs)\n        for i in range(n_mol_atoms - 1):\n            for j in range(i+1, n_mol_atoms):\n                idx_i = idxs[i]\n                idx_j = idxs[j]\n                dx = positions[idx_j,0] - positions[idx_i,0]\n                dy = positions[idx_j,1] - positions[idx_i,1]\n                dz = positions[idx_j,2] - positions[idx_i,2]\n                r = math.sqrt(dx*dx + dy*dy + dz*dz)\n                if r > 1e-14:\n                    q_i = charges[idx_i]*e_charge\n                    q_j = charges[idx_j]*e_charge\n                    r_m = r*1e-10\n                    erf_val = erf(alpha_dimless*r)\n                    val = coulomb_factor*(q_i*q_j / r_m)*erf_val\n                    intra_energy -= val\n\n    return intra_energy\n\n# -------------------------------------------------------------------------------------------\n# DataFrame Descriptions and final comparison function (unchanged)\n# -------------------------------------------------------------------------------------------\n\nsystem, force_field, NIST_TRICLINIC_SPC_E_Water = creating_dataframes(file_paths, atom_properties, NIST_TRICLINIC_SPC_E_Water)\n\n# Computing energies storing in results\nresults = pd.DataFrame()\n\nresults['Number of Particles'] = system['number of particles'].astype(int)\n\n# Calculate LRC energy for all system configurations\nresults['lrc_Energies'] = system.apply(\n    lambda row: compute_lrc_energy(row, force_field), axis=1\n)\n\n# Calculate pairwise LJ dispersion energy for all system configurations\nresults['dispersion_energies'] = system['file_paths'].apply(\n    lambda file_path: pair_dispersion_energy(\n        system[system['file_paths'] == file_path].iloc[0],\n        extracting_positions(file_path),\n        force_field\n    )\n)\n\n# Calculate real-space Ewald energies\nresults['real_energies'] = system['file_paths'].apply(\n    lambda file_path: compute_real_energies(\n        system[system['file_paths'] == file_path].iloc[0],\n        extracting_positions(file_path),\n        force_field\n    )\n)\n\n# Calculate Fourier-space Ewald energies\nresults['fourier_energies'] = system['file_paths'].apply(\n    lambda file_path: compute_fourier_energies(\n        system[system['file_paths'] == file_path].iloc[0],\n        extracting_positions(file_path),\n        force_field\n    )\n)\n\n# Calculate self-energies\nresults['self_energies'] = system['file_paths'].apply(\n    lambda file_path: compute_self_energies(\n        system[system['file_paths'] == file_path].iloc[0],\n        extracting_positions(file_path),\n        force_field\n    )\n)\n\n# Calculate intramolecular energies\nresults['intra_energies'] = system['file_paths'].apply(\n    lambda file_path: compute_intra_energies(\n        system[system['file_paths'] == file_path].iloc[0],\n        extracting_positions(file_path),\n        force_field\n    )\n)\n\n# -------------------------------------------------------------------------------------------\n# Comparison function (must remain unchanged)\n# -------------------------------------------------------------------------------------------\ndef compare_LJ_coulomb_energy(df1, df2, tolerance=1e-4):\n    df_merged = df1.merge(df2, left_on='Number of Particles', right_on='M (number of SPC/E molecules)', how='left')\n\n    matched_real = matched_fourier = matched_self = matched_intra = 0\n    matched_dispersion = matched_lrc = 0\n    not_matched_real = not_matched_fourier = not_matched_self = not_matched_intra = 0\n    not_matched_dispersion = not_matched_lrc = 0\n\n    real_energy_output, fourier_energy_output = [], []\n    self_energy_output, intra_energy_output = [], []\n    lrc_energy_output, dispersion_energy_output = [], []\n\n    for idx, row in df_merged.iterrows():\n        real_energy = row['real_energies']\n        fourier_energy = row['fourier_energies']\n        self_energy = row['self_energies']\n        intra_energy = row['intra_energies']\n        num_molecules = row['Number of Particles']\n        lrc_energy = row['lrc_Energies']\n        dispersion_energy = row['dispersion_energies']\n\n        if pd.isna(row['Ereal/kB (K)']):\n            continue\n\n        nist_real_energy = float(row['Ereal/kB (K)'])\n        nist_fourier_energy = float(row['Efourier/kB (K)'])\n        nist_self_energy = float(row['Eself/kB (K)'])\n        nist_intra_energy = float(row['Eintra/kB (K)'])\n        nist_lrc_energy = float(row['ELRC/kB (K)'])\n        nist_dispersion_energy = float(row['Edisp/kB (K)'])\n\n        match_real = np.isclose(real_energy, nist_real_energy, atol=tolerance)\n        match_fourier = np.isclose(fourier_energy, nist_fourier_energy, atol=tolerance)\n        match_self = np.isclose(self_energy, nist_self_energy, atol=tolerance)\n        match_intra = np.isclose(intra_energy, nist_intra_energy, atol=tolerance)\n        match_dispersion = np.isclose(dispersion_energy, nist_dispersion_energy, atol=tolerance)\n        match_lrc = np.isclose(lrc_energy, nist_lrc_energy, atol=tolerance)\n\n        matched_real += int(match_real)\n        not_matched_real += int(not match_real)\n        matched_fourier += int(match_fourier)\n        not_matched_fourier += int(not match_fourier)\n        matched_self += int(match_self)\n        not_matched_self += int(not match_self)\n        matched_intra += int(match_intra)\n        not_matched_intra += int(not match_intra)\n        matched_dispersion += int(match_dispersion)\n        not_matched_dispersion += int(not match_dispersion)\n        matched_lrc += int(match_lrc)\n        not_matched_lrc += int(not match_lrc)\n\n        dispersion_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {dispersion_energy:.4E}, NIST: {nist_dispersion_energy:.4E}, Match: {match_dispersion}\"")\n        lrc_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {lrc_energy:.4E}, NIST: {nist_lrc_energy:.4E}, Match: {match_lrc}\"")\n        real_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {real_energy:.4E}, NIST: {nist_real_energy:.4E}, Match: {match_real}\"")\n        fourier_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {fourier_energy:.4E}, NIST: {nist_fourier_energy:.4E}, Match: {match_fourier}\"")\n        self_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {self_energy:.4E}, NIST: {nist_self_energy:.4E}, Match: {match_self}\"")\n        intra_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {intra_energy:.4E}, NIST: {nist_intra_energy:.4E}, Match: {match_intra}\"")\n\n    print()\n    print(\""Lennard-Jones Pair Dispersion Energy Comparison:\"")\n    print(*dispersion_energy_output)\n    print(\""Lennard-Jones long-range corrections Energy Comparison:\"")\n    print(*lrc_energy_output)\n    print(\""Real Energy Comparison:\"")\n    print(*real_energy_output)\n    print(\""Fourier Energy Comparison:\"")\n    print(*fourier_energy_output)\n    print(\""Self Energy Comparison:\"")\n    print(*self_energy_output)\n    print(\""Intra Energy Comparison:\"")\n    print(*intra_energy_output)\n    print()\n    print(f\""Count of correct pairwise answers: {matched_dispersion}\"")\n    print(f\""Count of incorrect pairwise answers: {not_matched_dispersion}\"")\n    print(f\""Count of correct LRC answers: {matched_lrc}\"")\n    print(f\""Count of incorrect LRC answers: {not_matched_lrc}\"")\n    print(f\""Count of correct Real Energy answers: {matched_real}\"")\n    print(f\""Count of incorrect Real Energy answers: {not_matched_real}\"")\n    print(f\""Count of correct Fourier Energy answers: {matched_fourier}\"")\n    print(f\""Count of incorrect Fourier Energy answers: {not_matched_fourier}\"")\n    print(f\""Count of correct Self Energy answers: {matched_self}\"")\n    print(f\""Count of incorrect Self Energy answers: {not_matched_self}\"")\n    print(f\""Count of correct Intra Energy answers: {matched_intra}\"")\n    print(f\""Count of incorrect Intra Energy answers: {not_matched_intra}\"")\n    print()\n    total_correct = matched_real + matched_fourier + matched_self + matched_intra + matched_dispersion + matched_lrc\n    total_incorrect = not_matched_real + not_matched_fourier + not_matched_self + not_matched_intra + not_matched_dispersion + not_matched_lrc\n\n    print(f\""Total correct answers: {total_correct}\"")\n    print(f\""Total incorrect answers: {total_incorrect}\"")\n\n# calling compare_coulomb_energy function\ncompare_LJ_coulomb_energy(results, NIST_TRICLINIC_SPC_E_Water)\n""
}","import numpy as np
import pandas as pd
from scipy.special import erfc,erf
import math 

# defining all variables
atom_properties = {
    'O': {'type': 'O', 'sigma': 3.165558, 'epsilon': 78.197431, 'charge': -0.8476, 'num_particles': 1},
    'H': {'type': 'H', 'sigma': 0.000000, 'epsilon': 0.000000, 'charge': 0.4238, 'num_particles': 2},
}

# Trying for small configurations first
file_paths = [
    #    '../data/spce_sample_config_periodic4.txt',
    #    '../data/spce_sample_config_periodic2.txt',
    #    '../data/spce_sample_config_periodic3.txt',
        '../data/spce-sample-non-cuboid-configurations/spce_triclinic_sample_periodic3.txt'
    ]

NIST_TRICLINIC_SPC_E_Water = {'Configuration': [1, 2, 3, 4],
 'M (number of SPC/E molecules)': [400, 300, 200, 100],
 'Cell Type': ['Triclinic', 'Monoclinic', 'Triclinic', 'Monoclinic'],
 'Cell Side Lengths [a, b, c] (Å)': ['[30 Å, 30 Å, 30 Å]',
  '[27 Å, 30 Å, 36 Å]',
  '[30 Å, 30 Å, 30 Å]',
  '[36 Å, 36 Å, 36 Å]'],
 'Cell Angles [α, β, γ] (degrees)': ['[100°, 95°, 75°]',
  '[90°, 75°, 90°]',
  '[85°, 75°, 80°]',
  '[90°, 60°, 90°]'],
 'Number of Wave Vectors': [831, 1068, 838, 1028],
 'Edisp/kB (K)': [111992.0, 43286.0, 14403.3, 25025.1],
 'ELRC/kB (K)': [-4109.19, -2105.61, -1027.3, -163.091],
 'Ereal/kB (K)': [-727219.0, -476902.0, -297129.0, -171462.0],
 'Efourier/kB (K)': [44677.0, 44409.4, 28897.4, 22337.2],
 'Eself/kB (K)': [-11582000.0, -8686470.0, -5790980.0, -2895490.0],
 'Eintra/kB (K)': [11435400.0, 8576520.0, 5717680.0, 2858840.0],
 'Etotal/kB (K)': [-721254.0, -501259.0, -328153.0, -160912.0]}

# Data processing


def extracting_positions(input_file):
        # Extract the positions from the .xyz file
    with open(input_file, ""r"") as file:
        lines = file.readlines()

    data_lines = lines[2:]

    data_list = []
    for line in data_lines:
        stripped_line = line.strip()
        parts = stripped_line.split()
        if len(parts) >= 5:  
            try:
                x, y, z = map(float, parts[1:4])
                atom_type = parts[4]
                data_list.append([x, y, z, atom_type])
            except ValueError:
                continue  

    # Create a DataFrame with all configurations
    columns = [""X"", ""Y"", ""Z"", ""Atom Type""]
    configuration = pd.DataFrame(data_list, columns=columns)

    configuration.index = range(1, len(configuration) + 1)

    configuration[""Molecule""] = ((configuration.index - 1) // 3) + 1
    
    return configuration

# create the target dataframes
def creating_dataframes(file_paths, atom_properties, NIST_SPC_E_Water):
    # Create the NIST_SPC_E_Water dataframe
    NIST_SPC_E_Water = pd.DataFrame(NIST_SPC_E_Water)
    NIST_SPC_E_Water['Sum of energies'] = (
        NIST_SPC_E_Water['Edisp/kB (K)'] + NIST_SPC_E_Water['ELRC/kB (K)'] +
        NIST_SPC_E_Water['Ereal/kB (K)'] + NIST_SPC_E_Water['Efourier/kB (K)'] +
        NIST_SPC_E_Water['Eself/kB (K)'] + NIST_SPC_E_Water['Eintra/kB (K)']
    )

    # Creating the force_field dataframe
    force_field = pd.DataFrame(atom_properties).from_dict(atom_properties, orient='index')

    # Create the system dataframe containing some variables
    system = pd.DataFrame(file_paths, columns=[""file_paths""])

    # Extract the configuration numbers from the file path
    system['configuration #'] = (
        system['file_paths']
        .str.extract(r'(\d+)', expand=False)
        .fillna('0')
        .astype(int)
    )

    # Here we just fill out some default metadata for demonstration
    # We'll store box length as 30.0 if not found, etc.
    # (In a real scenario, we would merge with NIST_SPC_E_Water data or parse from file directly.)

    # For minimal demonstration, do not break anything below:
    system[[""number of particles"", ""box length""]] = system[""configuration #""].apply(
        lambda x: pd.Series({
            ""number of particles"": float(
                NIST_SPC_E_Water.loc[
                    NIST_SPC_E_Water[""Configuration""] == x,
                    ""M (number of SPC/E molecules)""
                ].values[0]
            ) if x in NIST_SPC_E_Water[""Configuration""].values else 0.0,
            ""box length"": 30.0  # default
        })
    )

    system['cutoff'] = 10

    # Fix alpha so that alpha = 5.6 / L for simplicity (cubic approx)
    system['alpha'] = system.apply(
        lambda row: 5.6 / row['box length'] if row['box length'] != 0 else 0.28,
        axis=1
    )

    system['kmax'] = 5
    system['ε0'] = float(8.854187817E-12)
    system['kB'] = float(1.3806488E-23)

    return system, force_field, NIST_SPC_E_Water

# pairwise dispersion energy functions

# Minimum Image Distance function and Pair Dispersion Energy calculation (Code 3)
def minimum_image_distance(r_ij, cell_length):
    # Old cubic version
    return r_ij - cell_length * np.round(r_ij / cell_length)

# pairwise dispersion energy operation
def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    """"""Apply the minimum image convention for a triclinic cell.
    r_vec is a 3D Cartesian displacement.
    box_matrix and inv_box_matrix are 3x3 arrays.
    Return the 'shortest' displacement vector under PBC.""""""
    # Convert r_vec to fractional coordinates:
    frac = inv_box_matrix @ r_vec
    # Round fractional coords to nearest integer so we shift by the smallest integer box multiple.
    frac -= np.rint(frac)
    # Convert back to Cartesian:
    r_min = box_matrix @ frac
    return r_min

def pair_dispersion_energy(system_data, configuration, force_field):
    positions = configuration[['X', 'Y', 'Z']].values
    atom_types = configuration['Atom Type'].values
    cutoff = system_data['cutoff']
    cell_length = system_data['box length']
    num_atoms = len(positions)

    # Attempt to ascertain box_matrix from configuration.attrs
    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    total_dispersion_energy = 0.0

    for i in range(num_atoms):
        for j in range(i + 1, num_atoms):
            r_ij = positions[i] - positions[j]
            # Use triclinic min image if available:
            if box_matrix is not None and inv_box_matrix is not None:
                r_ij = triclinic_minimum_image_distance(r_ij, box_matrix, inv_box_matrix)
            else:
                r_ij = minimum_image_distance(r_ij, cell_length)

            distance = np.linalg.norm(r_ij)

            if 0 < distance < cutoff:
                type_i, type_j = atom_types[i], atom_types[j]

                if type_i not in force_field.index or type_j not in force_field.index:
                    continue

                epsilon_i = force_field.loc[type_i, 'epsilon']
                epsilon_j = force_field.loc[type_j, 'epsilon']
                sigma_i = force_field.loc[type_i, 'sigma']
                sigma_j = force_field.loc[type_j, 'sigma']

                epsilon_ij = np.sqrt(epsilon_i * epsilon_j)
                sigma_ij = (sigma_i + sigma_j) / 2.0
                s_over_r = sigma_ij / distance

                # Lennard-Jones potential
                potential_energy = 4 * epsilon_ij * (s_over_r**12 - s_over_r**6)
                total_dispersion_energy += potential_energy

    return total_dispersion_energy

# Compute LRC energy
def compute_lrc_energy(system_row, force_field):
    U_lrc_total = 0

    for atom_type, atom_data in force_field.iterrows():
        num_particles = system_row['number of particles'] * atom_data['num_particles']
        volume = system_row['box length'] ** 3  # approximate for cubic
        rho = num_particles / volume

        sigma = atom_data['sigma']
        epsilon = atom_data['epsilon']
        cutoff = system_row['cutoff']

        sigma_by_cutoff_3 = (sigma / cutoff) ** 3
        sigma_by_cutoff_9 = sigma_by_cutoff_3 ** 3

        # LRC energy per particle
        U_lrc_per_particle = (8 / 3) * np.pi * rho * epsilon * sigma**3 * (sigma_by_cutoff_9 / 3 - sigma_by_cutoff_3)

        U_lrc_per_particle *= num_particles
        U_lrc_total += U_lrc_per_particle

    return U_lrc_total

def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    """"""Apply the minimum image convention for a triclinic cell.
    r_vec is a 3D Cartesian displacement.
    box_matrix and inv_box_matrix are 3x3 arrays.
    Return the 'shortest' displacement vector under PBC.""""""
    # Convert r_vec to fractional coordinates:
    frac = inv_box_matrix @ r_vec
    # Round fractional coords to nearest integer so we shift by the smallest integer box multiple.
    frac -= np.rint(frac)
    # Convert back to Cartesian:
    r_min = box_matrix @ frac
    return r_min

def compute_real_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19  # C
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23  # (1/(4 pi eps0)) / kB

    alpha = system_data[""alpha""]  # 1/Å
    cutoff = system_data[""cutoff""]  # Å
    L = system_data[""box length""]  # Å

    # Attempt to retrieve triclinic box if present
    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    def min_image(dx, box_length):
        return dx - round(dx / box_length) * box_length

    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    mol_ids = configuration[""Molecule""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])

    n_atoms = len(positions)
    real_energy = 0.0

    for j in range(n_atoms - 1):
        for l in range(j + 1, n_atoms):
            if mol_ids[j] == mol_ids[l]:
                continue

            dr = positions[l] - positions[j]
            if box_matrix is not None and inv_box_matrix is not None:
                dr = triclinic_minimum_image_distance(dr, box_matrix, inv_box_matrix)
            else:
                dr[0] = min_image(dr[0], L)
                dr[1] = min_image(dr[1], L)
                dr[2] = min_image(dr[2], L)

            r = math.sqrt(dr[0]*dr[0] + dr[1]*dr[1] + dr[2]*dr[2])
            if r < cutoff and r > 1e-14:
                q_j = charges[j] * e_charge
                q_l = charges[l] * e_charge
                r_m = r * 1e-10
                factor_erfc = erfc(alpha * r)
                real_energy += coulomb_factor * (q_j * q_l / r_m) * factor_erfc

    return real_energy

def build_reciprocal_vectors(box_matrix):
    """"""Compute reciprocal box vectors (2π times the inverse transpose).""""""
    # The standard reciprocal matrix is 2π * (box_matrix^-1)^T.
    inv_trans = np.linalg.inv(box_matrix).T
    reciprocal = 2.0 * math.pi * inv_trans
    return reciprocal

def compute_fourier_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23  # 1/(4 pi eps0) in K·m / C^2

    alpha = system_data[""alpha""]
    kmax = system_data[""kmax""]

    # Attempt to retrieve triclinic box matrix:
    box_matrix = configuration.attrs.get('box_matrix', None)
    if box_matrix is not None:
        # Volume in cubic meters
        V_m = abs(np.linalg.det(box_matrix)) * (1e-10)**3
        reciprocal = build_reciprocal_vectors(box_matrix)
    else:
        # fallback cubic approach
        L = system_data[""box length""]
        V_m = (L * 1e-10)**3
        # reciprocal is 2π/L times identity
        reciprocal = (2.0 * math.pi / (L * 1e-10)) * np.eye(3)

    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])
    charges_c = charges * e_charge
    positions_m = positions * 1e-10

    prefactor = coulomb_factor / (2.0 * V_m)
    alpha_m = alpha * 1e10

    fourier_energy = 0.0

    # We will iterate all integer k in range(-kmax, kmax), form k-vector as k = n1*b1 + n2*b2 + n3*b3.
    # Then exclude k=0.

    for nx in range(-kmax, kmax+1):
        for ny in range(-kmax, kmax+1):
            for nz in range(-kmax, kmax+1):
                if nx == 0 and ny == 0 and nz == 0:
                    continue
                # Build k-vector:
                k_vec = nx*reciprocal[:,0] + ny*reciprocal[:,1] + nz*reciprocal[:,2]
                k_sq = np.dot(k_vec, k_vec)
                if k_sq < 1e-14:
                    continue

                # Use the typical Ewald restriction: k^2 < kmax^2 + 2 etc. (optional)
                # We'll skip for brevity or do quick check:
                if k_sq > (kmax**2 + 2) * ((2.0*math.pi/(30.0*1e-10))**2):
                    continue

                real_part = 0.0
                imag_part = 0.0
                for j, (xj, yj, zj) in enumerate(positions_m):
                    kr = k_vec[0]*xj + k_vec[1]*yj + k_vec[2]*zj
                    real_part += charges_c[j]*math.cos(kr)
                    imag_part += charges_c[j]*math.sin(kr)

                sk_sq = real_part*real_part + imag_part*imag_part
                exponent = math.exp(-k_sq/(4.0*alpha_m**2))

                term = prefactor * (4.0 * math.pi / k_sq) * exponent * sk_sq
                fourier_energy += term

    return fourier_energy


def compute_self_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t,""charge""] for t in atom_types])
    charges_c = charges * e_charge

    alpha_m = alpha*1e10

    sum_q2 = np.sum(charges_c**2)

    self_energy = - coulomb_factor * (alpha_m / math.sqrt(math.pi)) * sum_q2
    return self_energy


def compute_intra_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t,""charge""] for t in atom_types])
    mol_ids = configuration[""Molecule""].values

    alpha_dimless = alpha

    intra_energy = 0.0
    unique_mols = np.unique(mol_ids)

    for m_id in unique_mols:
        idxs = np.where(mol_ids == m_id)[0]
        n_mol_atoms = len(idxs)
        for i in range(n_mol_atoms - 1):
            for j in range(i+1, n_mol_atoms):
                idx_i = idxs[i]
                idx_j = idxs[j]
                dx = positions[idx_j,0] - positions[idx_i,0]
                dy = positions[idx_j,1] - positions[idx_i,1]
                dz = positions[idx_j,2] - positions[idx_i,2]
                r = math.sqrt(dx*dx + dy*dy + dz*dz)
                if r > 1e-14:
                    q_i = charges[idx_i]*e_charge
                    q_j = charges[idx_j]*e_charge
                    r_m = r*1e-10
                    erf_val = erf(alpha_dimless*r)
                    val = coulomb_factor*(q_i*q_j / r_m)*erf_val
                    intra_energy -= val

    return intra_energy


# DataFrame Descriptions:

# 1. NIST_TRICLINIC_SPC_E_Water DataFrame:
#    - Contains thermodynamic properties of SPC/E water configurations in both triclinic and monoclinic cells.
#    - Columns:
#        - 'Configuration' (int): Configuration ID (1-4).
#        - 'M (number of SPC/E molecules)' (int): Number of SPC/E molecules in the system.
#        - 'Cell Type' (str): Type of the cell (e.g., Triclinic, Monoclinic).
#        - 'Cell Side Lengths [a, b, c] (Å)' (list of strings): Cell side lengths in Ångströms.
#        - 'Cell Angles [α, β, γ] (degrees)' (list of strings): Cell angles in degrees.
#        - 'Number of Wave Vectors' (int): The number of wave vectors for each configuration.
#        - 'Edisp/kB (K)' (float): Dispersion energy in Kelvin.
#        - 'ELRC/kB (K)' (float): Long-range correction energy in Kelvin.
#        - 'Ereal/kB (K)' (float): Real energy in Kelvin.
#        - 'Efourier/kB (K)' (float): Fourier transform energy in Kelvin.
#        - 'Eself/kB (K)' (float): Self-interaction energy in Kelvin.
#        - 'Eintra/kB (K)' (float): Intra-molecular energy in Kelvin.
#        - 'Etotal/kB (K)' (float): Total energy in Kelvin.

# 2. force_field DataFrame:
#    - Contains force field parameters for SPC/E water, specifically for oxygen ('O') and hydrogen ('H').
#    - Columns:
#        - 'type' (str): Atom type ('O' or 'H').
#        - 'sigma' (float): Lennard-Jones parameter (Å).
#        - 'epsilon' (float): Lennard-Jones well depth (K).
#        - 'charge' (float): Partial charge (e).
#        - 'num_particles' (int): Number of particles per molecule.

# 3. system DataFrame:
#    - Contains metadata about each system configuration.
#    - Columns:
#        - 'file_paths' (str): File names containing atomic configurations.
#        - 'configuration #' (int): Extracted configuration number (1-4).
#        - 'number of particles' (float): Number of molecules (from 'NIST_SPC_E_Water').
#        - 'box length' (float): Box dimensions (from 'NIST_SPC_E_Water').
#        - 'cutoff' (int): Fixed cutoff distance for interactions (10 Å).
#        - 'alpha' (float): Ewald summation parameter (5.6 / min(a, b, c)).
#        - 'kmax' (int): Maximum wave vector index (5); also, only include k for which k² < kmax² + 2, i.e., k² < 27.
#        - 'ε0' (float): Permittivity of Vacuum (8.854187817E-12 C²/(J m)).
#        - 'kB' (float): Boltzmann Constant (1.3806488E-23 J/K).

# 4. configuration DataFrame (from 'extracting_positions'):
#    - Created per file, containing atomic positions.
#    - Columns:
#        - 'X' (float): Atom coordinates in Ångströms.
#        - 'Y' (float): Atom coordinates in Ångströms.
#        - 'Z' (float): Atom coordinates in Ångströms.
#        - 'Atom Type' (str): Type of atom ('O' or 'H').
#        - 'Molecule' (int): Molecule index assigned based on position.


system, force_field, NIST_TRICLINIC_SPC_E_Water = creating_dataframes(file_paths, atom_properties,NIST_TRICLINIC_SPC_E_Water)

# Computing energies storing in results
results = pd.DataFrame()

results['Number of Particles'] = system['number of particles'].astype(int)

# Calculate LRC energy for all system configurations
results['lrc_Energies'] = system.apply(
    lambda row: compute_lrc_energy(row, force_field), axis=1
)

# Calculate pairwise energy for all system configurations
results['dispersion_energies'] = system['file_paths'].apply(
    lambda file_path: pair_dispersion_energy(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path), 
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['real_energies'] = system['file_paths'].apply(
    lambda file_path: compute_real_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['fourier_energies'] = system['file_paths'].apply(
    lambda file_path: compute_fourier_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['self_energies'] = system['file_paths'].apply(
    lambda file_path: compute_self_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['intra_energies'] = system['file_paths'].apply(
    lambda file_path: compute_intra_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

def compare_LJ_coulomb_energy(df1, df2, tolerance=1e-4):
    df_merged = df1.merge(df2, left_on='Number of Particles', right_on='M (number of SPC/E molecules)', how='left')

    matched_real = matched_fourier = matched_self = matched_intra = 0
    matched_dispersion = matched_lrc = 0
    not_matched_real = not_matched_fourier = not_matched_self = not_matched_intra = 0
    not_matched_dispersion = not_matched_lrc = 0

    real_energy_output, fourier_energy_output = [], []
    self_energy_output, intra_energy_output = [], []
    lrc_energy_output, dispersion_energy_output = [], []

    for idx, row in df_merged.iterrows():
        real_energy = row['real_energies']
        fourier_energy = row['fourier_energies']
        self_energy = row['self_energies']
        intra_energy = row['intra_energies']
        num_molecules = row['Number of Particles']
        lrc_energy = row['lrc_Energies']
        dispersion_energy = row['dispersion_energies']

        if pd.isna(row['Ereal/kB (K)']):
            continue

        nist_real_energy = float(row['Ereal/kB (K)'])
        nist_fourier_energy = float(row['Efourier/kB (K)'])
        nist_self_energy = float(row['Eself/kB (K)'])
        nist_intra_energy = float(row['Eintra/kB (K)'])
        nist_lrc_energy = float(row['ELRC/kB (K)'])
        nist_dispersion_energy = float(row['Edisp/kB (K)'])

        match_real = np.isclose(real_energy, nist_real_energy, atol=tolerance)
        match_fourier = np.isclose(fourier_energy, nist_fourier_energy, atol=tolerance)
        match_self = np.isclose(self_energy, nist_self_energy, atol=tolerance)
        match_intra = np.isclose(intra_energy, nist_intra_energy, atol=tolerance)
        match_dispersion = np.isclose(dispersion_energy, nist_dispersion_energy, atol=tolerance)
        match_lrc = np.isclose(lrc_energy, nist_lrc_energy, atol=tolerance)

        matched_real += int(match_real)
        not_matched_real += int(not match_real)
        matched_fourier += int(match_fourier)
        not_matched_fourier += int(not match_fourier)
        matched_self += int(match_self)
        not_matched_self += int(not match_self)
        matched_intra += int(match_intra)
        not_matched_intra += int(not match_intra)
        matched_dispersion += int(match_dispersion)
        not_matched_dispersion += int(not match_dispersion)
        matched_lrc += int(match_lrc)
        not_matched_lrc += int(not match_lrc)

        dispersion_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {dispersion_energy:.4E}, NIST: {nist_dispersion_energy:.4E}, Match: {match_dispersion}"")
        lrc_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {lrc_energy:.4E}, NIST: {nist_lrc_energy:.4E}, Match: {match_lrc}"")
        real_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {real_energy:.4E}, NIST: {nist_real_energy:.4E}, Match: {match_real}"")
        fourier_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {fourier_energy:.4E}, NIST: {nist_fourier_energy:.4E}, Match: {match_fourier}"")
        self_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {self_energy:.4E}, NIST: {nist_self_energy:.4E}, Match: {match_self}"")
        intra_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {intra_energy:.4E}, NIST: {nist_intra_energy:.4E}, Match: {match_intra}"")

    print()
    print(""Lennard-Jones Pair Dispersion Energy Comparison:"")
    print(*dispersion_energy_output)
    print(""Lennard-Jones long-range corrections Energy Comparison:"")
    print(*lrc_energy_output)
    print(""Real Energy Comparison:"")
    print(*real_energy_output)
    print(""Fourier Energy Comparison:"")
    print(*fourier_energy_output)
    print(""Self Energy Comparison:"")
    print(*self_energy_output)
    print(""Intra Energy Comparison:"")
    print(*intra_energy_output)
    print()
    print(f""Count of correct pairwise answers: {matched_dispersion}"")
    print(f""Count of incorrect pairwise answers: {not_matched_dispersion}"")
    print(f""Count of correct LRC answers: {matched_lrc}"")
    print(f""Count of incorrect LRC answers: {not_matched_lrc}"")
    print(f""Count of correct Real Energy answers: {matched_real}"")
    print(f""Count of incorrect Real Energy answers: {not_matched_real}"")
    print(f""Count of correct Fourier Energy answers: {matched_fourier}"")
    print(f""Count of incorrect Fourier Energy answers: {not_matched_fourier}"")
    print(f""Count of correct Self Energy answers: {matched_self}"")
    print(f""Count of incorrect Self Energy answers: {not_matched_self}"")
    print(f""Count of correct Intra Energy answers: {matched_intra}"")
    print(f""Count of incorrect Intra Energy answers: {not_matched_intra}"")
    print()
    total_correct = matched_real + matched_fourier + matched_self + matched_intra + matched_dispersion + matched_lrc
    total_incorrect = not_matched_real + not_matched_fourier + not_matched_self + not_matched_intra + not_matched_dispersion + not_matched_lrc

    print(f""Total correct answers: {total_correct}"")
    print(f""Total incorrect answers: {total_incorrect}"")


# calling compare_coulomb_energy function
compare_LJ_coulomb_energy(results, NIST_TRICLINIC_SPC_E_Water)"
1,2,2025-03-24_18:07:57,o1,high,short,"Result from the code generated:
Your code hasn't yet passed all of the NIST benchmark tests. Here's the current progress:

Lennard-Jones Pair Dispersion Energy Comparison:
Test 1 (200 molecules): Computed: 9.3763E+04, NIST: 1.4403E+04, Match: False
Lennard-Jones long-range corrections Energy Comparison:
Test 1 (200 molecules): Computed: -9.7626E+02, NIST: -1.0273E+03, Match: False
Real Energy Comparison:
Test 1 (200 molecules): Computed: -3.1845E+05, NIST: -2.9713E+05, Match: False
Fourier Energy Comparison:
Test 1 (200 molecules): Computed: 2.7448E+04, NIST: 2.8897E+04, Match: False
Self Energy Comparison:
Test 1 (200 molecules): Computed: -3.7929E+06, NIST: -5.7910E+06, Match: False
Intra Energy Comparison:
Test 1 (200 molecules): Computed: 3.6075E+06, NIST: 5.7177E+06, Match: False

Count of correct pairwise answers: 0
Count of incorrect pairwise answers: 1
Count of correct LRC answers: 0
Count of incorrect LRC answers: 1
Count of correct Real Energy answers: 0
Count of incorrect Real Energy answers: 1
Count of correct Fourier Energy answers: 0
Count of incorrect Fourier Energy answers: 1
Count of correct Self Energy answers: 0
Count of incorrect Self Energy answers: 1
Count of correct Intra Energy answers: 0
Count of incorrect Intra Energy answers: 1

Total correct answers: 0
Total incorrect answers: 6

Out of the tests, 0 answers have been correct, with 6 remaining. 
Keep going – you're getting closer! Continue refining the code step by step until it passes all the tests.

Complete each function sequentially, incorporating feedback to optimize efficiency and align with NIST benchmarks. Aim to match the benchmark values as closely as possible with each attempt, ensuring visible numerical improvements. Refer to the context and revise accordingly.","Please find the code generated in iteration 2. You have 1 iterations left to complete the code for Coulombic contributions using the traditional Ewald Summation Method for given triclinic or monoclinic configurations data.

import numpy as np
import pandas as pd
from scipy.special import erfc,erf
import math 

# defining all variables
atom_properties = {
    'O': {'type': 'O', 'sigma': 3.165558, 'epsilon': 78.197431, 'charge': -0.8476, 'num_particles': 1},
    'H': {'type': 'H', 'sigma': 0.000000, 'epsilon': 0.000000, 'charge': 0.4238, 'num_particles': 2},
}

# Trying for small configurations first
file_paths = [
    #    '../data/spce_sample_config_periodic4.txt',
    #    '../data/spce_sample_config_periodic2.txt',
    #    '../data/spce_sample_config_periodic3.txt',
        '../data/spce-sample-non-cuboid-configurations/spce_triclinic_sample_periodic3.txt'
    ]

NIST_TRICLINIC_SPC_E_Water = {'Configuration': [1, 2, 3, 4],
 'M (number of SPC/E molecules)': [400, 300, 200, 100],
 'Cell Type': ['Triclinic', 'Monoclinic', 'Triclinic', 'Monoclinic'],
 'Cell Side Lengths [a, b, c] (Å)': ['[30 Å, 30 Å, 30 Å]',
  '[27 Å, 30 Å, 36 Å]',
  '[30 Å, 30 Å, 30 Å]',
  '[36 Å, 36 Å, 36 Å]'],
 'Cell Angles [α, β, γ] (degrees)': ['[100°, 95°, 75°]',
  '[90°, 75°, 90°]',
  '[85°, 75°, 80°]',
  '[90°, 60°, 90°]'],
 'Number of Wave Vectors': [831, 1068, 838, 1028],
 'Edisp/kB (K)': [111992.0, 43286.0, 14403.3, 25025.1],
 'ELRC/kB (K)': [-4109.19, -2105.61, -1027.3, -163.091],
 'Ereal/kB (K)': [-727219.0, -476902.0, -297129.0, -171462.0],
 'Efourier/kB (K)': [44677.0, 44409.4, 28897.4, 22337.2],
 'Eself/kB (K)': [-11582000.0, -8686470.0, -5790980.0, -2895490.0],
 'Eintra/kB (K)': [11435400.0, 8576520.0, 5717680.0, 2858840.0],
 'Etotal/kB (K)': [-721254.0, -501259.0, -328153.0, -160912.0]}

# Data processing


def extracting_positions(input_file):
        # Extract the positions from the .xyz file
    with open(input_file, ""r"") as file:
        lines = file.readlines()

    data_lines = lines[2:]

    data_list = []
    for line in data_lines:
        stripped_line = line.strip()
        parts = stripped_line.split()
        if len(parts) >= 5:  
            try:
                x, y, z = map(float, parts[1:4])
                atom_type = parts[4]
                data_list.append([x, y, z, atom_type])
            except ValueError:
                continue  

    # Create a DataFrame with all configurations
    columns = [""X"", ""Y"", ""Z"", ""Atom Type""]
    configuration = pd.DataFrame(data_list, columns=columns)

    configuration.index = range(1, len(configuration) + 1)

    configuration[""Molecule""] = ((configuration.index - 1) // 3) + 1
    
    return configuration

# create the target dataframes
def creating_dataframes(file_paths, atom_properties, NIST_SPC_E_Water):
    # Create the NIST_SPC_E_Water dataframe
    NIST_SPC_E_Water = pd.DataFrame(NIST_SPC_E_Water)
    NIST_SPC_E_Water['Sum of energies'] = (
        NIST_SPC_E_Water['Edisp/kB (K)'] + NIST_SPC_E_Water['ELRC/kB (K)'] +
        NIST_SPC_E_Water['Ereal/kB (K)'] + NIST_SPC_E_Water['Efourier/kB (K)'] +
        NIST_SPC_E_Water['Eself/kB (K)'] + NIST_SPC_E_Water['Eintra/kB (K)']
    )

    # Creating the force_field dataframe
    force_field = pd.DataFrame(atom_properties).from_dict(atom_properties, orient='index')

    # Create the system dataframe containing some variables
    system = pd.DataFrame(file_paths, columns=[""file_paths""])

    # Extract the configuration numbers from the file path
    system['configuration #'] = (
        system['file_paths']
        .str.extract(r'(\d+)', expand=False)
        .fillna('0')
        .astype(int)
    )

    # Here we just fill out some default metadata for demonstration
    # We'll store box length as 30.0 if not found, etc.
    # (In a real scenario, we would merge with NIST_SPC_E_Water data or parse from file directly.)

    # For minimal demonstration, do not break anything below:
    system[[""number of particles"", ""box length""]] = system[""configuration #""].apply(
        lambda x: pd.Series({
            ""number of particles"": float(
                NIST_SPC_E_Water.loc[
                    NIST_SPC_E_Water[""Configuration""] == x,
                    ""M (number of SPC/E molecules)""
                ].values[0]
            ) if x in NIST_SPC_E_Water[""Configuration""].values else 0.0,
            ""box length"": 30.0  # default
        })
    )

    system['cutoff'] = 10

    # Fix alpha so that alpha = 5.6 / L for simplicity (cubic approx)
    system['alpha'] = system.apply(
        lambda row: 5.6 / row['box length'] if row['box length'] != 0 else 0.28,
        axis=1
    )

    system['kmax'] = 5
    system['ε0'] = float(8.854187817E-12)
    system['kB'] = float(1.3806488E-23)

    return system, force_field, NIST_SPC_E_Water

# pairwise dispersion energy functions

# Minimum Image Distance function and Pair Dispersion Energy calculation (Code 3)
def minimum_image_distance(r_ij, cell_length):
    # Old cubic version
    return r_ij - cell_length * np.round(r_ij / cell_length)

# pairwise dispersion energy operation
def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    """"""Apply the minimum image convention for a triclinic cell.
    r_vec is a 3D Cartesian displacement.
    box_matrix and inv_box_matrix are 3x3 arrays.
    Return the 'shortest' displacement vector under PBC.""""""
    # Convert r_vec to fractional coordinates:
    frac = inv_box_matrix @ r_vec
    # Round fractional coords to nearest integer so we shift by the smallest integer box multiple.
    frac -= np.rint(frac)
    # Convert back to Cartesian:
    r_min = box_matrix @ frac
    return r_min

def pair_dispersion_energy(system_data, configuration, force_field):
    positions = configuration[['X', 'Y', 'Z']].values
    atom_types = configuration['Atom Type'].values
    cutoff = system_data['cutoff']
    cell_length = system_data['box length']
    num_atoms = len(positions)

    # Attempt to ascertain box_matrix from configuration.attrs
    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    total_dispersion_energy = 0.0

    for i in range(num_atoms):
        for j in range(i + 1, num_atoms):
            r_ij = positions[i] - positions[j]
            # Use triclinic min image if available:
            if box_matrix is not None and inv_box_matrix is not None:
                r_ij = triclinic_minimum_image_distance(r_ij, box_matrix, inv_box_matrix)
            else:
                r_ij = minimum_image_distance(r_ij, cell_length)

            distance = np.linalg.norm(r_ij)

            if 0 < distance < cutoff:
                type_i, type_j = atom_types[i], atom_types[j]

                if type_i not in force_field.index or type_j not in force_field.index:
                    continue

                epsilon_i = force_field.loc[type_i, 'epsilon']
                epsilon_j = force_field.loc[type_j, 'epsilon']
                sigma_i = force_field.loc[type_i, 'sigma']
                sigma_j = force_field.loc[type_j, 'sigma']

                epsilon_ij = np.sqrt(epsilon_i * epsilon_j)
                sigma_ij = (sigma_i + sigma_j) / 2.0
                s_over_r = sigma_ij / distance

                # Lennard-Jones potential
                potential_energy = 4 * epsilon_ij * (s_over_r**12 - s_over_r**6)
                total_dispersion_energy += potential_energy

    return total_dispersion_energy

# Compute LRC energy
def compute_lrc_energy(system_row, force_field):
    U_lrc_total = 0

    for atom_type, atom_data in force_field.iterrows():
        num_particles = system_row['number of particles'] * atom_data['num_particles']
        volume = system_row['box length'] ** 3  # approximate for cubic
        rho = num_particles / volume

        sigma = atom_data['sigma']
        epsilon = atom_data['epsilon']
        cutoff = system_row['cutoff']

        sigma_by_cutoff_3 = (sigma / cutoff) ** 3
        sigma_by_cutoff_9 = sigma_by_cutoff_3 ** 3

        # LRC energy per particle
        U_lrc_per_particle = (8 / 3) * np.pi * rho * epsilon * sigma**3 * (sigma_by_cutoff_9 / 3 - sigma_by_cutoff_3)

        U_lrc_per_particle *= num_particles
        U_lrc_total += U_lrc_per_particle

    return U_lrc_total

def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    """"""Apply the minimum image convention for a triclinic cell.
    r_vec is a 3D Cartesian displacement.
    box_matrix and inv_box_matrix are 3x3 arrays.
    Return the 'shortest' displacement vector under PBC.""""""
    # Convert r_vec to fractional coordinates:
    frac = inv_box_matrix @ r_vec
    # Round fractional coords to nearest integer so we shift by the smallest integer box multiple.
    frac -= np.rint(frac)
    # Convert back to Cartesian:
    r_min = box_matrix @ frac
    return r_min

def compute_real_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19  # C
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23  # (1/(4 pi eps0)) / kB

    alpha = system_data[""alpha""]  # 1/Å
    cutoff = system_data[""cutoff""]  # Å
    L = system_data[""box length""]  # Å

    # Attempt to retrieve triclinic box if present
    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    def min_image(dx, box_length):
        return dx - round(dx / box_length) * box_length

    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    mol_ids = configuration[""Molecule""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])

    n_atoms = len(positions)
    real_energy = 0.0

    for j in range(n_atoms - 1):
        for l in range(j + 1, n_atoms):
            if mol_ids[j] == mol_ids[l]:
                continue

            dr = positions[l] - positions[j]
            if box_matrix is not None and inv_box_matrix is not None:
                dr = triclinic_minimum_image_distance(dr, box_matrix, inv_box_matrix)
            else:
                dr[0] = min_image(dr[0], L)
                dr[1] = min_image(dr[1], L)
                dr[2] = min_image(dr[2], L)

            r = math.sqrt(dr[0]*dr[0] + dr[1]*dr[1] + dr[2]*dr[2])
            if r < cutoff and r > 1e-14:
                q_j = charges[j] * e_charge
                q_l = charges[l] * e_charge
                r_m = r * 1e-10
                factor_erfc = erfc(alpha * r)
                real_energy += coulomb_factor * (q_j * q_l / r_m) * factor_erfc

    return real_energy

def build_reciprocal_vectors(box_matrix):
    """"""Compute reciprocal box vectors (2π times the inverse transpose).""""""
    # The standard reciprocal matrix is 2π * (box_matrix^-1)^T.
    inv_trans = np.linalg.inv(box_matrix).T
    reciprocal = 2.0 * math.pi * inv_trans
    return reciprocal

def compute_fourier_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23  # 1/(4 pi eps0) in K·m / C^2

    alpha = system_data[""alpha""]
    kmax = system_data[""kmax""]

    # Attempt to retrieve triclinic box matrix:
    box_matrix = configuration.attrs.get('box_matrix', None)
    if box_matrix is not None:
        # Volume in cubic meters
        V_m = abs(np.linalg.det(box_matrix)) * (1e-10)**3
        reciprocal = build_reciprocal_vectors(box_matrix)
    else:
        # fallback cubic approach
        L = system_data[""box length""]
        V_m = (L * 1e-10)**3
        # reciprocal is 2π/L times identity
        reciprocal = (2.0 * math.pi / (L * 1e-10)) * np.eye(3)

    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])
    charges_c = charges * e_charge
    positions_m = positions * 1e-10

    prefactor = coulomb_factor / (2.0 * V_m)
    alpha_m = alpha * 1e10

    fourier_energy = 0.0

    # We will iterate all integer k in range(-kmax, kmax), form k-vector as k = n1*b1 + n2*b2 + n3*b3.
    # Then exclude k=0.

    for nx in range(-kmax, kmax+1):
        for ny in range(-kmax, kmax+1):
            for nz in range(-kmax, kmax+1):
                if nx == 0 and ny == 0 and nz == 0:
                    continue
                # Build k-vector:
                k_vec = nx*reciprocal[:,0] + ny*reciprocal[:,1] + nz*reciprocal[:,2]
                k_sq = np.dot(k_vec, k_vec)
                if k_sq < 1e-14:
                    continue

                # Use the typical Ewald restriction: k^2 < kmax^2 + 2 etc. (optional)
                # We'll skip for brevity or do quick check:
                if k_sq > (kmax**2 + 2) * ((2.0*math.pi/(30.0*1e-10))**2):
                    continue

                real_part = 0.0
                imag_part = 0.0
                for j, (xj, yj, zj) in enumerate(positions_m):
                    kr = k_vec[0]*xj + k_vec[1]*yj + k_vec[2]*zj
                    real_part += charges_c[j]*math.cos(kr)
                    imag_part += charges_c[j]*math.sin(kr)

                sk_sq = real_part*real_part + imag_part*imag_part
                exponent = math.exp(-k_sq/(4.0*alpha_m**2))

                term = prefactor * (4.0 * math.pi / k_sq) * exponent * sk_sq
                fourier_energy += term

    return fourier_energy


def compute_self_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t,""charge""] for t in atom_types])
    charges_c = charges * e_charge

    alpha_m = alpha*1e10

    sum_q2 = np.sum(charges_c**2)

    self_energy = - coulomb_factor * (alpha_m / math.sqrt(math.pi)) * sum_q2
    return self_energy


def compute_intra_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t,""charge""] for t in atom_types])
    mol_ids = configuration[""Molecule""].values

    alpha_dimless = alpha

    intra_energy = 0.0
    unique_mols = np.unique(mol_ids)

    for m_id in unique_mols:
        idxs = np.where(mol_ids == m_id)[0]
        n_mol_atoms = len(idxs)
        for i in range(n_mol_atoms - 1):
            for j in range(i+1, n_mol_atoms):
                idx_i = idxs[i]
                idx_j = idxs[j]
                dx = positions[idx_j,0] - positions[idx_i,0]
                dy = positions[idx_j,1] - positions[idx_i,1]
                dz = positions[idx_j,2] - positions[idx_i,2]
                r = math.sqrt(dx*dx + dy*dy + dz*dz)
                if r > 1e-14:
                    q_i = charges[idx_i]*e_charge
                    q_j = charges[idx_j]*e_charge
                    r_m = r*1e-10
                    erf_val = erf(alpha_dimless*r)
                    val = coulomb_factor*(q_i*q_j / r_m)*erf_val
                    intra_energy -= val

    return intra_energy


# DataFrame Descriptions:

# 1. NIST_TRICLINIC_SPC_E_Water DataFrame:
#    - Contains thermodynamic properties of SPC/E water configurations in both triclinic and monoclinic cells.
#    - Columns:
#        - 'Configuration' (int): Configuration ID (1-4).
#        - 'M (number of SPC/E molecules)' (int): Number of SPC/E molecules in the system.
#        - 'Cell Type' (str): Type of the cell (e.g., Triclinic, Monoclinic).
#        - 'Cell Side Lengths [a, b, c] (Å)' (list of strings): Cell side lengths in Ångströms.
#        - 'Cell Angles [α, β, γ] (degrees)' (list of strings): Cell angles in degrees.
#        - 'Number of Wave Vectors' (int): The number of wave vectors for each configuration.
#        - 'Edisp/kB (K)' (float): Dispersion energy in Kelvin.
#        - 'ELRC/kB (K)' (float): Long-range correction energy in Kelvin.
#        - 'Ereal/kB (K)' (float): Real energy in Kelvin.
#        - 'Efourier/kB (K)' (float): Fourier transform energy in Kelvin.
#        - 'Eself/kB (K)' (float): Self-interaction energy in Kelvin.
#        - 'Eintra/kB (K)' (float): Intra-molecular energy in Kelvin.
#        - 'Etotal/kB (K)' (float): Total energy in Kelvin.

# 2. force_field DataFrame:
#    - Contains force field parameters for SPC/E water, specifically for oxygen ('O') and hydrogen ('H').
#    - Columns:
#        - 'type' (str): Atom type ('O' or 'H').
#        - 'sigma' (float): Lennard-Jones parameter (Å).
#        - 'epsilon' (float): Lennard-Jones well depth (K).
#        - 'charge' (float): Partial charge (e).
#        - 'num_particles' (int): Number of particles per molecule.

# 3. system DataFrame:
#    - Contains metadata about each system configuration.
#    - Columns:
#        - 'file_paths' (str): File names containing atomic configurations.
#        - 'configuration #' (int): Extracted configuration number (1-4).
#        - 'number of particles' (float): Number of molecules (from 'NIST_SPC_E_Water').
#        - 'box length' (float): Box dimensions (from 'NIST_SPC_E_Water').
#        - 'cutoff' (int): Fixed cutoff distance for interactions (10 Å).
#        - 'alpha' (float): Ewald summation parameter (5.6 / min(a, b, c)).
#        - 'kmax' (int): Maximum wave vector index (5); also, only include k for which k² < kmax² + 2, i.e., k² < 27.
#        - 'ε0' (float): Permittivity of Vacuum (8.854187817E-12 C²/(J m)).
#        - 'kB' (float): Boltzmann Constant (1.3806488E-23 J/K).

# 4. configuration DataFrame (from 'extracting_positions'):
#    - Created per file, containing atomic positions.
#    - Columns:
#        - 'X' (float): Atom coordinates in Ångströms.
#        - 'Y' (float): Atom coordinates in Ångströms.
#        - 'Z' (float): Atom coordinates in Ångströms.
#        - 'Atom Type' (str): Type of atom ('O' or 'H').
#        - 'Molecule' (int): Molecule index assigned based on position.


system, force_field, NIST_TRICLINIC_SPC_E_Water = creating_dataframes(file_paths, atom_properties,NIST_TRICLINIC_SPC_E_Water)

# Computing energies storing in results
results = pd.DataFrame()

results['Number of Particles'] = system['number of particles'].astype(int)

# Calculate LRC energy for all system configurations
results['lrc_Energies'] = system.apply(
    lambda row: compute_lrc_energy(row, force_field), axis=1
)

# Calculate pairwise energy for all system configurations
results['dispersion_energies'] = system['file_paths'].apply(
    lambda file_path: pair_dispersion_energy(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path), 
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['real_energies'] = system['file_paths'].apply(
    lambda file_path: compute_real_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['fourier_energies'] = system['file_paths'].apply(
    lambda file_path: compute_fourier_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['self_energies'] = system['file_paths'].apply(
    lambda file_path: compute_self_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['intra_energies'] = system['file_paths'].apply(
    lambda file_path: compute_intra_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

def compare_LJ_coulomb_energy(df1, df2, tolerance=1e-4):
    df_merged = df1.merge(df2, left_on='Number of Particles', right_on='M (number of SPC/E molecules)', how='left')

    matched_real = matched_fourier = matched_self = matched_intra = 0
    matched_dispersion = matched_lrc = 0
    not_matched_real = not_matched_fourier = not_matched_self = not_matched_intra = 0
    not_matched_dispersion = not_matched_lrc = 0

    real_energy_output, fourier_energy_output = [], []
    self_energy_output, intra_energy_output = [], []
    lrc_energy_output, dispersion_energy_output = [], []

    for idx, row in df_merged.iterrows():
        real_energy = row['real_energies']
        fourier_energy = row['fourier_energies']
        self_energy = row['self_energies']
        intra_energy = row['intra_energies']
        num_molecules = row['Number of Particles']
        lrc_energy = row['lrc_Energies']
        dispersion_energy = row['dispersion_energies']

        if pd.isna(row['Ereal/kB (K)']):
            continue

        nist_real_energy = float(row['Ereal/kB (K)'])
        nist_fourier_energy = float(row['Efourier/kB (K)'])
        nist_self_energy = float(row['Eself/kB (K)'])
        nist_intra_energy = float(row['Eintra/kB (K)'])
        nist_lrc_energy = float(row['ELRC/kB (K)'])
        nist_dispersion_energy = float(row['Edisp/kB (K)'])

        match_real = np.isclose(real_energy, nist_real_energy, atol=tolerance)
        match_fourier = np.isclose(fourier_energy, nist_fourier_energy, atol=tolerance)
        match_self = np.isclose(self_energy, nist_self_energy, atol=tolerance)
        match_intra = np.isclose(intra_energy, nist_intra_energy, atol=tolerance)
        match_dispersion = np.isclose(dispersion_energy, nist_dispersion_energy, atol=tolerance)
        match_lrc = np.isclose(lrc_energy, nist_lrc_energy, atol=tolerance)

        matched_real += int(match_real)
        not_matched_real += int(not match_real)
        matched_fourier += int(match_fourier)
        not_matched_fourier += int(not match_fourier)
        matched_self += int(match_self)
        not_matched_self += int(not match_self)
        matched_intra += int(match_intra)
        not_matched_intra += int(not match_intra)
        matched_dispersion += int(match_dispersion)
        not_matched_dispersion += int(not match_dispersion)
        matched_lrc += int(match_lrc)
        not_matched_lrc += int(not match_lrc)

        dispersion_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {dispersion_energy:.4E}, NIST: {nist_dispersion_energy:.4E}, Match: {match_dispersion}"")
        lrc_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {lrc_energy:.4E}, NIST: {nist_lrc_energy:.4E}, Match: {match_lrc}"")
        real_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {real_energy:.4E}, NIST: {nist_real_energy:.4E}, Match: {match_real}"")
        fourier_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {fourier_energy:.4E}, NIST: {nist_fourier_energy:.4E}, Match: {match_fourier}"")
        self_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {self_energy:.4E}, NIST: {nist_self_energy:.4E}, Match: {match_self}"")
        intra_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {intra_energy:.4E}, NIST: {nist_intra_energy:.4E}, Match: {match_intra}"")

    print()
    print(""Lennard-Jones Pair Dispersion Energy Comparison:"")
    print(*dispersion_energy_output)
    print(""Lennard-Jones long-range corrections Energy Comparison:"")
    print(*lrc_energy_output)
    print(""Real Energy Comparison:"")
    print(*real_energy_output)
    print(""Fourier Energy Comparison:"")
    print(*fourier_energy_output)
    print(""Self Energy Comparison:"")
    print(*self_energy_output)
    print(""Intra Energy Comparison:"")
    print(*intra_energy_output)
    print()
    print(f""Count of correct pairwise answers: {matched_dispersion}"")
    print(f""Count of incorrect pairwise answers: {not_matched_dispersion}"")
    print(f""Count of correct LRC answers: {matched_lrc}"")
    print(f""Count of incorrect LRC answers: {not_matched_lrc}"")
    print(f""Count of correct Real Energy answers: {matched_real}"")
    print(f""Count of incorrect Real Energy answers: {not_matched_real}"")
    print(f""Count of correct Fourier Energy answers: {matched_fourier}"")
    print(f""Count of incorrect Fourier Energy answers: {not_matched_fourier}"")
    print(f""Count of correct Self Energy answers: {matched_self}"")
    print(f""Count of incorrect Self Energy answers: {not_matched_self}"")
    print(f""Count of correct Intra Energy answers: {matched_intra}"")
    print(f""Count of incorrect Intra Energy answers: {not_matched_intra}"")
    print()
    total_correct = matched_real + matched_fourier + matched_self + matched_intra + matched_dispersion + matched_lrc
    total_incorrect = not_matched_real + not_matched_fourier + not_matched_self + not_matched_intra + not_matched_dispersion + not_matched_lrc

    print(f""Total correct answers: {total_correct}"")
    print(f""Total incorrect answers: {total_incorrect}"")


# calling compare_coulomb_energy function
compare_LJ_coulomb_energy(results, NIST_TRICLINIC_SPC_E_Water)

Please review the provided code and implement the missing functions needed to compute Coulombic contributions using the traditional Ewald Summation Method for triclinic or monoclinic configurations data.

Produce a JSON output in the following format:
  ""Reasoning"": """",
  ""Code"": """"

Ensure that:
1. The JSON output is **properly formatted** with **double quotes** around keys.
2. The **Reasoning** section provides a concise and clear explanation of the approach taken.
3. The **Code** section contains well-structured, indented, and syntactically correct Python (or the required language).
4. The JSON output does **not** contain extraneous symbols such as triple backticks (` ``` `) or markdown indicators.
5. The output should be **fully valid JSON** and parseable using `json.loads()`.

Context:
Illustration of input file format:

            3.000000000000e+01       3.000000000000e+01       3.000000000000e+01
            8.500000000000e+01       7.500000000000e+01       8.000000000000e+01
         200
    1      -1.073606597760e+01       1.432194046140e+01      -6.226901963110e+00    O
    2      -1.661030970030e+01      -1.461065205480e+01      -5.798020258290e+00    H
    3      -1.118063417070e+01       1.380841402440e+01      -6.960829561930e+00    H
    4      -1.377161709910e+01      -8.711236583990e+00      -1.350200277380e+01    O
    5      -1.347193958490e+01      -8.247621904110e+00      -1.433582218840e+01    H
   
Refer to the Coulomb Ewald summation formula below.

Formula(latex form):

\Large \begin{eqnarray} E_{coulomb}\left(\mathbf{r}^N\right) & = &
\sum\limits_{j}  \sum\limits_{l>j}
\dfrac{q_j q_l}{ 4 \pi \epsilon_0} \dfrac{\text{erfc}\left(\alpha \cdot  \left| \mathbf{r}_{jl} \right| \right)}{\left| \mathbf{r}_{jl} \right|} \Theta\left( r_{cut} - \left|\mathbf{r}_{jl}\right| \right) \\
&& +\dfrac{1}{2 \pi V} \sum\limits_{\mathbf{k} \neq \mathbf{0}} \dfrac{1}{k^2} \exp \left[-\left( \dfrac{\pi k}{\alpha} \right)^2 \right] \dfrac{1}{4 \pi \epsilon_0} \cdot \left|\sum\limits_{j=1}^N q_j \exp \left(2\pi i \mathbf{k} \cdot \mathbf{r}_j \right) \right|^2 \\
&& - \dfrac{\alpha}{\sqrt{\pi}} \sum\limits_j \dfrac{q_j^2}{4 \pi \epsilon_0} \\
&& - \sum\limits_{j=1}^M  \sum\limits_{\kappa}  \sum\limits_{\lambda>\kappa} \dfrac{q_{j_\kappa} q_{j_\lambda}}{ 4 \pi \epsilon_0} \dfrac{\text{erf}\left(\alpha \cdot  \left| \mathbf{r}_{j_\kappa j_\lambda} \right| \right)}{\left| \mathbf{r}_{j_\kappa j_\lambda} \right|}
\end{eqnarray}

Explanation:

We note that this form of the Ewald Summation

1. requires total charge neutrality for the configuration and

2. neglects the surface dipole term (equivalent to using the ""tin-foil"" or conducting surface boundary condition)

Description:

The terms on the right-hand side of the equality to be computed are:

1) The real-space term Ereal,

2) The Fourier-space term, Efourier,

3) The self-correction term Eself,

4) The intramolecular term Eintra.

5) The Real Energy

6) The dispersion Energy

Notes:

Primary task: 

Write your code to modify the functions outlined above and incorporate any necessary additional functions.

You may access the required columns from the given dataframes as parameters to the function to calculate the energies.

Print Statements: Ensure that the print statements in the compare_LJ_coulomb_energy function remain exactly as they are, even as you make modifications to the other functions.

Function Modifications: The output should always include Python code for modifying the respective functions.

Flexibility in Code Changing: You are free to change other parts of the code, but the compare_LJ_coulomb_energy function must remain unchanged, as it manages the iteration loop.

Strict Requirements:

Function Names: Do not modify the function names or parameters.

Preserve compare_LJ_coulomb_energy Function: The compare_LJ_coulomb_energy function should remain unchanged, as it controls the iteration loop.

Iteration Notes: 

Iterative Process: If multiple functions are provided to solve the task, work through them one by one in each iteration.

Automated Iteration: The iteration loop will continue until the desired outcome is achieved.

Feedback Integration: When feedback is provided, ensure you proceed with the next steps based on the iteration results and the correct answers generated.



Result from the code generated:
Your code hasn't yet passed all of the NIST benchmark tests. Here's the current progress:

Lennard-Jones Pair Dispersion Energy Comparison:
Test 1 (200 molecules): Computed: 9.3763E+04, NIST: 1.4403E+04, Match: False
Lennard-Jones long-range corrections Energy Comparison:
Test 1 (200 molecules): Computed: -9.7626E+02, NIST: -1.0273E+03, Match: False
Real Energy Comparison:
Test 1 (200 molecules): Computed: -3.1845E+05, NIST: -2.9713E+05, Match: False
Fourier Energy Comparison:
Test 1 (200 molecules): Computed: 2.7436E+04, NIST: 2.8897E+04, Match: False
Self Energy Comparison:
Test 1 (200 molecules): Computed: -3.7929E+06, NIST: -5.7910E+06, Match: False
Intra Energy Comparison:
Test 1 (200 molecules): Computed: 3.6075E+06, NIST: 5.7177E+06, Match: False

Count of correct pairwise answers: 0
Count of incorrect pairwise answers: 1
Count of correct LRC answers: 0
Count of incorrect LRC answers: 1
Count of correct Real Energy answers: 0
Count of incorrect Real Energy answers: 1
Count of correct Fourier Energy answers: 0
Count of incorrect Fourier Energy answers: 1
Count of correct Self Energy answers: 0
Count of incorrect Self Energy answers: 1
Count of correct Intra Energy answers: 0
Count of incorrect Intra Energy answers: 1

Total correct answers: 0
Total incorrect answers: 6

Out of the tests, 0 answers have been correct, with 6 remaining. 
Keep going – you're getting closer! Continue refining the code step by step until it passes all the tests.

Complete each function sequentially, incorporating feedback to optimize efficiency and align with NIST benchmarks. Aim to match the benchmark values as closely as possible with each attempt, ensuring visible numerical improvements. Refer to the context and revise accordingly.","{
  ""Reasoning"": ""This final iteration addresses the main source of mismatch with the NIST benchmarks by properly parsing the box dimensions and angles from the input file so that the correct box matrix is constructed. This ensures the correct real-space (triclinic) minimum-image distances and reciprocal lattice vectors. Key modifications: (a) extracting_positions now reads a, b, c, α, β, γ from lines[0] and lines[1], and builds the triclinic box; (b) store these in configuration.attrs so that each Ewald function can automatically apply the correct geometry. The compare_LJ_coulomb_energy function remains unchanged."",
  ""Code"": ""import numpy as np\nimport pandas as pd\nfrom scipy.special import erfc, erf\nimport math\n\n# -------------------------------------------------------------------------------------------\n# Helper function to build triclinic box matrix\n# -------------------------------------------------------------------------------------------\ndef build_box_matrix(a, b, c, alpha_deg, beta_deg, gamma_deg):\n    alpha = np.deg2rad(alpha_deg)\n    beta = np.deg2rad(beta_deg)\n    gamma = np.deg2rad(gamma_deg)\n\n    # v1\n    v1 = np.array([a, 0.0, 0.0])\n    # v2\n    v2 = np.array([\n        b * math.cos(gamma),\n        b * math.sin(gamma),\n        0.0\n    ])\n    # v3\n    c_x = c * math.cos(beta)\n    c_y = c * (math.cos(alpha) - math.cos(beta) * math.cos(gamma)) / math.sin(gamma)\n    c_z_sq = c**2 - c_x**2 - c_y**2\n    if c_z_sq < 0.0:\n        c_z_sq = 0.0  # safety for floating rounding\n    c_z = math.sqrt(c_z_sq)\n\n    v3 = np.array([c_x, c_y, c_z])\n\n    box_matrix = np.vstack((v1, v2, v3))\n    return box_matrix\n\n# -------------------------------------------------------------------------------------------\n# Atom properties and sample file paths\n# -------------------------------------------------------------------------------------------\natom_properties = {\n    'O': {'type': 'O', 'sigma': 3.165558, 'epsilon': 78.197431, 'charge': -0.8476, 'num_particles': 1},\n    'H': {'type': 'H', 'sigma': 0.0, 'epsilon': 0.0, 'charge': 0.4238, 'num_particles': 2},\n}\n\nfile_paths = [\n    '../data/spce-sample-non-cuboid-configurations/spce_triclinic_sample_periodic3.txt'\n]\n\nNIST_TRICLINIC_SPC_E_Water = {\n    'Configuration': [1, 2, 3, 4],\n    'M (number of SPC/E molecules)': [400, 300, 200, 100],\n    'Cell Type': ['Triclinic', 'Monoclinic', 'Triclinic', 'Monoclinic'],\n    'Cell Side Lengths [a, b, c] (Å)': ['[30 Å, 30 Å, 30 Å]', '[27 Å, 30 Å, 36 Å]', '[30 Å, 30 Å, 30 Å]', '[36 Å, 36 Å, 36 Å]'],\n    'Cell Angles [α, β, γ] (degrees)': ['[100°, 95°, 75°]', '[90°, 75°, 90°]', '[85°, 75°, 80°]', '[90°, 60°, 90°]'],\n    'Number of Wave Vectors': [831, 1068, 838, 1028],\n    'Edisp/kB (K)': [111992.0, 43286.0, 14403.3, 25025.1],\n    'ELRC/kB (K)': [-4109.19, -2105.61, -1027.3, -163.091],\n    'Ereal/kB (K)': [-727219.0, -476902.0, -297129.0, -171462.0],\n    'Efourier/kB (K)': [44677.0, 44409.4, 28897.4, 22337.2],\n    'Eself/kB (K)': [-11582000.0, -8686470.0, -5790980.0, -2895490.0],\n    'Eintra/kB (K)': [11435400.0, 8576520.0, 5717680.0, 2858840.0],\n    'Etotal/kB (K)': [-721254.0, -501259.0, -328153.0, -160912.0]\n}\n\n# -------------------------------------------------------------------------------------------\n# Improved extracting_positions function that parses box matrix from the file\n# -------------------------------------------------------------------------------------------\ndef extracting_positions(input_file):\n    \""\""\""Extract positions, parse box side lengths and angles from file, build triclinic matrix.\""\""\""\n    with open(input_file, 'r') as file:\n        lines = file.readlines()\n\n    # 1) First line => a, b, c\n    a_data = lines[0].split()\n    a, b, c = map(float, a_data[:3])\n\n    # 2) Second line => alpha, beta, gamma\n    alpha_data = lines[1].split()\n    alpha_deg, beta_deg, gamma_deg = map(float, alpha_data[:3])\n\n    # 3) Third line => total number of atoms or lines to read\n    #    For large files, we can parse but also rely on the actual lines for positions.\n    #    We'll keep reading from line[3] onward anyway.\n    data_start_idx = 3\n    data_lines = lines[data_start_idx:]\n\n    data_list = []\n    for line in data_lines:\n        stripped_line = line.strip()\n        parts = stripped_line.split()\n        if len(parts) >= 5:\n            try:\n                x, y, z = map(float, parts[1:4])\n                atom_type = parts[4]\n                data_list.append([x, y, z, atom_type])\n            except ValueError:\n                continue\n\n    columns = [\""X\"", \""Y\"", \""Z\"", \""Atom Type\""]\n    configuration = pd.DataFrame(data_list, columns=columns)\n    configuration.index = range(1, len(configuration) + 1)\n    configuration[\""Molecule\""] = ((configuration.index - 1) // 3) + 1\n\n    # Build the triclinic box matrix\n    box_matrix = build_box_matrix(a, b, c, alpha_deg, beta_deg, gamma_deg)\n    inv_box_matrix = np.linalg.inv(box_matrix)\n\n    # Store relevant attributes\n    configuration.attrs['a'] = a\n    configuration.attrs['b'] = b\n    configuration.attrs['c'] = c\n    configuration.attrs['alpha_deg'] = alpha_deg\n    configuration.attrs['beta_deg'] = beta_deg\n    configuration.attrs['gamma_deg'] = gamma_deg\n    configuration.attrs['box_matrix'] = box_matrix\n    configuration.attrs['inv_box_matrix'] = inv_box_matrix\n\n    return configuration\n\n# -------------------------------------------------------------------------------------------\n# Create target dataframes (system, force_field, NIST_SPC_E_Water)\n# -------------------------------------------------------------------------------------------\ndef creating_dataframes(file_paths, atom_properties, NIST_SPC_E_Water):\n    NIST_SPC_E_Water = pd.DataFrame(NIST_SPC_E_Water)\n    NIST_SPC_E_Water['Sum of energies'] = (\n        NIST_SPC_E_Water['Edisp/kB (K)'] + NIST_SPC_E_Water['ELRC/kB (K)'] +\n        NIST_SPC_E_Water['Ereal/kB (K)'] + NIST_SPC_E_Water['Efourier/kB (K)'] +\n        NIST_SPC_E_Water['Eself/kB (K)'] + NIST_SPC_E_Water['Eintra/kB (K)']\n    )\n\n    force_field = pd.DataFrame(atom_properties).from_dict(atom_properties, orient='index')\n\n    system = pd.DataFrame(file_paths, columns=[\""file_paths\""])\n    system['configuration #'] = (\n        system['file_paths']\n        .str.extract(r'(\\d+)', expand=False)\n        .fillna('0')\n        .astype(int)\n    )\n\n    # For demonstration, we'll keep the same approach: number of particles from NIST, box length fallback\n    system[[\""number of particles\"", \""box length\""]] = system[\""configuration #\""].apply(\n        lambda x: pd.Series({\n            \""number of particles\"": float(\n                NIST_SPC_E_Water.loc[\n                    NIST_SPC_E_Water[\""Configuration\""] == x,\n                    \""M (number of SPC/E molecules)\""\n                ].values[0]\n            ) if x in NIST_SPC_E_Water[\""Configuration\""].values else 0.0,\n            \""box length\"": 30.0  # default fallback\n        })\n    )\n\n    # cutoff\n    system['cutoff'] = 10\n    # alpha ~ 5.6 / L (simple approach)\n    system['alpha'] = system.apply(\n        lambda row: 5.6 / row['box length'] if row['box length'] != 0 else 0.28,\n        axis=1\n    )\n\n    system['kmax'] = 5\n    system['ε0'] = float(8.854187817E-12)\n    system['kB'] = float(1.3806488E-23)\n\n    return system, force_field, NIST_SPC_E_Water\n\n# -------------------------------------------------------------------------------------------\n# Minimum image convention for cubic fallback\n# -------------------------------------------------------------------------------------------\ndef minimum_image_distance(r_ij, cell_length):\n    return r_ij - cell_length * np.round(r_ij / cell_length)\n\n# -------------------------------------------------------------------------------------------\n# Triclinic minimum image for real-space distances\n# -------------------------------------------------------------------------------------------\ndef triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):\n    frac = inv_box_matrix @ r_vec\n    frac -= np.rint(frac)\n    r_min = box_matrix @ frac\n    return r_min\n\n# -------------------------------------------------------------------------------------------\n# Pair LJ dispersion energy\n# -------------------------------------------------------------------------------------------\ndef pair_dispersion_energy(system_data, configuration, force_field):\n    positions = configuration[['X', 'Y', 'Z']].values\n    atom_types = configuration['Atom Type'].values\n    cutoff = system_data['cutoff']\n    cell_length = system_data['box length']\n    num_atoms = len(positions)\n\n    box_matrix = configuration.attrs.get('box_matrix', None)\n    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)\n\n    total_dispersion_energy = 0.0\n\n    for i in range(num_atoms):\n        for j in range(i + 1, num_atoms):\n            r_ij = positions[i] - positions[j]\n            if box_matrix is not None and inv_box_matrix is not None:\n                r_ij = triclinic_minimum_image_distance(r_ij, box_matrix, inv_box_matrix)\n            else:\n                r_ij = minimum_image_distance(r_ij, cell_length)\n            distance = np.linalg.norm(r_ij)\n\n            if 0 < distance < cutoff:\n                type_i, type_j = atom_types[i], atom_types[j]\n                if type_i not in force_field.index or type_j not in force_field.index:\n                    continue\n\n                epsilon_i = force_field.loc[type_i, 'epsilon']\n                epsilon_j = force_field.loc[type_j, 'epsilon']\n                sigma_i = force_field.loc[type_i, 'sigma']\n                sigma_j = force_field.loc[type_j, 'sigma']\n\n                epsilon_ij = np.sqrt(epsilon_i * epsilon_j)\n                sigma_ij = (sigma_i + sigma_j) / 2.0\n                s_over_r = sigma_ij / distance\n\n                potential_energy = 4.0 * epsilon_ij * (s_over_r**12 - s_over_r**6)\n                total_dispersion_energy += potential_energy\n\n    return total_dispersion_energy\n\n# -------------------------------------------------------------------------------------------\n# LRC for LJ\n# -------------------------------------------------------------------------------------------\ndef compute_lrc_energy(system_row, force_field):\n    U_lrc_total = 0.0\n    for atom_type, atom_data in force_field.iterrows():\n        num_particles = system_row['number of particles'] * atom_data['num_particles']\n        volume = (system_row['box length'])**3  # approximate cubic volume\n        rho = num_particles / volume\n        sigma = atom_data['sigma']\n        epsilon = atom_data['epsilon']\n        cutoff = system_row['cutoff']\n        if cutoff <= 0.0:\n            continue\n\n        sigma_by_cutoff_3 = (sigma / cutoff)**3\n        sigma_by_cutoff_9 = sigma_by_cutoff_3**3\n\n        U_lrc_per_particle = (8.0 / 3.0) * math.pi * rho * epsilon * (sigma**3) * (sigma_by_cutoff_9 / 3.0 - sigma_by_cutoff_3)\n        U_lrc_per_particle *= num_particles\n        U_lrc_total += U_lrc_per_particle\n\n    return U_lrc_total\n\n# -------------------------------------------------------------------------------------------\n# Real-space Coulombic energy with Ewald damping\n# -------------------------------------------------------------------------------------------\ndef compute_real_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data[\""alpha\""]\n    cutoff = system_data[\""cutoff\""]\n    L = system_data[\""box length\""]\n\n    box_matrix = configuration.attrs.get('box_matrix', None)\n    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)\n\n    positions = configuration[[\""X\"", \""Y\"", \""Z\""]].values\n    atom_types = configuration[\""Atom Type\""].values\n    mol_ids = configuration[\""Molecule\""].values\n    charges = np.array([force_field.loc[t, \""charge\""] for t in atom_types])\n\n    real_energy = 0.0\n    n_atoms = len(positions)\n\n    def cubic_mi(dr, box_len):\n        dr[0] -= round(dr[0]/box_len)*box_len\n        dr[1] -= round(dr[1]/box_len)*box_len\n        dr[2] -= round(dr[2]/box_len)*box_len\n        return dr\n\n    for j in range(n_atoms - 1):\n        for l in range(j + 1, n_atoms):\n            # skip intramolecular pairs in real space? (NIST approach does only intermolecular in real term)\n            if mol_ids[j] == mol_ids[l]:\n                continue\n\n            dr = positions[l] - positions[j]\n            if box_matrix is not None and inv_box_matrix is not None:\n                dr = triclinic_minimum_image_distance(dr, box_matrix, inv_box_matrix)\n            else:\n                dr = cubic_mi(dr, L)\n            r = np.linalg.norm(dr)\n\n            if r < cutoff and r > 1e-14:\n                qj = charges[j] * e_charge\n                ql = charges[l] * e_charge\n                r_m = r * 1e-10\n                val = coulomb_factor * (qj*ql / r_m) * erfc(alpha*r)\n                real_energy += val\n\n    return real_energy\n\n# -------------------------------------------------------------------------------------------\n# Build reciprocal vectors for triclinic and compute Fourier space sum\n# -------------------------------------------------------------------------------------------\ndef build_reciprocal_vectors(box_matrix):\n    inv_trans = np.linalg.inv(box_matrix).T\n    return 2.0 * math.pi * inv_trans\n\ndef compute_fourier_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data[\""alpha\""]\n    kmax = system_data[\""kmax\""]\n\n    box_matrix = configuration.attrs.get('box_matrix', None)\n    if box_matrix is not None:\n        vol = abs(np.linalg.det(box_matrix)) * (1e-10)**3\n        reciprocal = build_reciprocal_vectors(box_matrix)\n    else:\n        L = system_data[\""box length\""]\n        vol = (L*1e-10)**3\n        reciprocal = (2.0*math.pi/(L*1e-10))*np.eye(3)\n\n    positions = configuration[[\""X\"", \""Y\"", \""Z\""]].values * 1e-10\n    charges = np.array([force_field.loc[t, \""charge\""] for t in configuration[\""Atom Type\""]])\n    charges_c = charges * e_charge\n\n    prefactor = coulomb_factor / (2.0*vol)\n    alpha_m = alpha*1e10\n\n    fourier_energy = 0.0\n\n    for nx in range(-kmax, kmax+1):\n        for ny in range(-kmax, kmax+1):\n            for nz in range(-kmax, kmax+1):\n                if (nx == 0 and ny == 0 and nz == 0):\n                    continue\n\n                k_vec = nx*reciprocal[:,0] + ny*reciprocal[:,1] + nz*reciprocal[:,2]\n                k_sq = np.dot(k_vec, k_vec)\n                if k_sq < 1e-14:\n                    continue\n\n                # optional: skip if k^2 too large\n                # if desired, skip if k^2 > (kmax^2 + 2) * (2*pi/(30e-10))^2, etc.\n\n                real_part = 0.0\n                imag_part = 0.0\n\n                for j, (posx, posy, posz) in enumerate(positions):\n                    kr = k_vec[0]*posx + k_vec[1]*posy + k_vec[2]*posz\n                    real_part += charges_c[j]*math.cos(kr)\n                    imag_part += charges_c[j]*math.sin(kr)\n\n                sk_sq = real_part**2 + imag_part**2\n                exponent = math.exp(-k_sq/(4.0*alpha_m**2))\n\n                term = prefactor * (4.0*math.pi / k_sq) * exponent * sk_sq\n                fourier_energy += term\n\n    return fourier_energy\n\n# -------------------------------------------------------------------------------------------\n# Self energies\n# -------------------------------------------------------------------------------------------\ndef compute_self_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data[\""alpha\""]\n    atom_types = configuration[\""Atom Type\""].values\n    charges = np.array([force_field.loc[t,\""charge\""] for t in atom_types])\n    charges_c = charges * e_charge\n\n    alpha_m = alpha * 1e10\n\n    sum_q2 = np.sum(charges_c**2)\n    self_energy = -coulomb_factor * (alpha_m / math.sqrt(math.pi)) * sum_q2\n\n    return self_energy\n\n# -------------------------------------------------------------------------------------------\n# Intramolecular energy (usually subtracted from real-space term)\n# -------------------------------------------------------------------------------------------\ndef compute_intra_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data[\""alpha\""]\n    positions = configuration[[\""X\"", \""Y\"", \""Z\""]].values\n    atom_types = configuration[\""Atom Type\""].values\n    charges = np.array([force_field.loc[t,\""charge\""] for t in atom_types])\n    mol_ids = configuration[\""Molecule\""].values\n\n    alpha_dimless = alpha\n    intra_energy = 0.0\n\n    unique_mols = np.unique(mol_ids)\n    for m_id in unique_mols:\n        idxs = np.where(mol_ids == m_id)[0]\n        n_mol_atoms = len(idxs)\n        for i in range(n_mol_atoms - 1):\n            for j in range(i+1, n_mol_atoms):\n                idx_i = idxs[i]\n                idx_j = idxs[j]\n                dx = positions[idx_j,0] - positions[idx_i,0]\n                dy = positions[idx_j,1] - positions[idx_i,1]\n                dz = positions[idx_j,2] - positions[idx_i,2]\n                r = math.sqrt(dx*dx + dy*dy + dz*dz)\n                if r > 1e-14:\n                    qi = charges[idx_i]*e_charge\n                    qj = charges[idx_j]*e_charge\n                    r_m = r*1e-10\n                    val = coulomb_factor*(qi*qj / r_m)*erf(alpha_dimless*r)\n                    intra_energy -= val\n\n    return intra_energy\n\n# -------------------------------------------------------------------------------------------\n# Build system and force field dataframes, then compute energies\n# -------------------------------------------------------------------------------------------\nsystem, force_field, NIST_TRICLINIC_SPC_E_Water = creating_dataframes(file_paths, atom_properties, NIST_TRICLINIC_SPC_E_Water)\n\nresults = pd.DataFrame()\nresults['Number of Particles'] = system['number of particles'].astype(int)\n\nresults['lrc_Energies'] = system.apply(\n    lambda row: compute_lrc_energy(row, force_field), axis=1\n)\n\nresults['dispersion_energies'] = system['file_paths'].apply(\n    lambda f: pair_dispersion_energy(\n        system[system['file_paths'] == f].iloc[0],\n        extracting_positions(f),\n        force_field\n    )\n)\n\nresults['real_energies'] = system['file_paths'].apply(\n    lambda f: compute_real_energies(\n        system[system['file_paths'] == f].iloc[0],\n        extracting_positions(f),\n        force_field\n    )\n)\n\nresults['fourier_energies'] = system['file_paths'].apply(\n    lambda f: compute_fourier_energies(\n        system[system['file_paths'] == f].iloc[0],\n        extracting_positions(f),\n        force_field\n    )\n)\n\nresults['self_energies'] = system['file_paths'].apply(\n    lambda f: compute_self_energies(\n        system[system['file_paths'] == f].iloc[0],\n        extracting_positions(f),\n        force_field\n    )\n)\n\nresults['intra_energies'] = system['file_paths'].apply(\n    lambda f: compute_intra_energies(\n        system[system['file_paths'] == f].iloc[0],\n        extracting_positions(f),\n        force_field\n    )\n)\n\n# -------------------------------------------------------------------------------------------\n# compare_LJ_coulomb_energy function remains unchanged\n# -------------------------------------------------------------------------------------------\ndef compare_LJ_coulomb_energy(df1, df2, tolerance=1e-4):\n    df_merged = df1.merge(df2, left_on='Number of Particles', right_on='M (number of SPC/E molecules)', how='left')\n\n    matched_real = matched_fourier = matched_self = matched_intra = 0\n    matched_dispersion = matched_lrc = 0\n    not_matched_real = not_matched_fourier = not_matched_self = not_matched_intra = 0\n    not_matched_dispersion = not_matched_lrc = 0\n\n    real_energy_output, fourier_energy_output = [], []\n    self_energy_output, intra_energy_output = [], []\n    lrc_energy_output, dispersion_energy_output = [], []\n\n    for idx, row in df_merged.iterrows():\n        real_energy = row['real_energies']\n        fourier_energy = row['fourier_energies']\n        self_energy = row['self_energies']\n        intra_energy = row['intra_energies']\n        num_molecules = row['Number of Particles']\n        lrc_energy = row['lrc_Energies']\n        dispersion_energy = row['dispersion_energies']\n\n        if pd.isna(row['Ereal/kB (K)']):\n            continue\n\n        nist_real_energy = float(row['Ereal/kB (K)'])\n        nist_fourier_energy = float(row['Efourier/kB (K)'])\n        nist_self_energy = float(row['Eself/kB (K)'])\n        nist_intra_energy = float(row['Eintra/kB (K)'])\n        nist_lrc_energy = float(row['ELRC/kB (K)'])\n        nist_dispersion_energy = float(row['Edisp/kB (K)'])\n\n        match_real = np.isclose(real_energy, nist_real_energy, atol=tolerance)\n        match_fourier = np.isclose(fourier_energy, nist_fourier_energy, atol=tolerance)\n        match_self = np.isclose(self_energy, nist_self_energy, atol=tolerance)\n        match_intra = np.isclose(intra_energy, nist_intra_energy, atol=tolerance)\n        match_dispersion = np.isclose(dispersion_energy, nist_dispersion_energy, atol=tolerance)\n        match_lrc = np.isclose(lrc_energy, nist_lrc_energy, atol=tolerance)\n\n        matched_real += int(match_real)\n        not_matched_real += int(not match_real)\n        matched_fourier += int(match_fourier)\n        not_matched_fourier += int(not match_fourier)\n        matched_self += int(match_self)\n        not_matched_self += int(not match_self)\n        matched_intra += int(match_intra)\n        not_matched_intra += int(not match_intra)\n        matched_dispersion += int(match_dispersion)\n        not_matched_dispersion += int(not match_dispersion)\n        matched_lrc += int(match_lrc)\n        not_matched_lrc += int(not match_lrc)\n\n        dispersion_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {dispersion_energy:.4E}, NIST: {nist_dispersion_energy:.4E}, Match: {match_dispersion}\"")\n        lrc_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {lrc_energy:.4E}, NIST: {nist_lrc_energy:.4E}, Match: {match_lrc}\"")\n        real_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {real_energy:.4E}, NIST: {nist_real_energy:.4E}, Match: {match_real}\"")\n        fourier_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {fourier_energy:.4E}, NIST: {nist_fourier_energy:.4E}, Match: {match_fourier}\"")\n        self_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {self_energy:.4E}, NIST: {nist_self_energy:.4E}, Match: {match_self}\"")\n        intra_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {intra_energy:.4E}, NIST: {nist_intra_energy:.4E}, Match: {match_intra}\"")\n\n    print()        \n    print(\""Lennard-Jones Pair Dispersion Energy Comparison:\"")\n    print(*dispersion_energy_output)\n    print(\""Lennard-Jones long-range corrections Energy Comparison:\"")\n    print(*lrc_energy_output)\n    print(\""Real Energy Comparison:\"")\n    print(*real_energy_output)\n    print(\""Fourier Energy Comparison:\"")\n    print(*fourier_energy_output)\n    print(\""Self Energy Comparison:\"")\n    print(*self_energy_output)\n    print(\""Intra Energy Comparison:\"")\n    print(*intra_energy_output)\n    print()\n    print(f\""Count of correct pairwise answers: {matched_dispersion}\"")\n    print(f\""Count of incorrect pairwise answers: {not_matched_dispersion}\"")\n    print(f\""Count of correct LRC answers: {matched_lrc}\"")\n    print(f\""Count of incorrect LRC answers: {not_matched_lrc}\"")\n    print(f\""Count of correct Real Energy answers: {matched_real}\"")\n    print(f\""Count of incorrect Real Energy answers: {not_matched_real}\"")\n    print(f\""Count of correct Fourier Energy answers: {matched_fourier}\"")\n    print(f\""Count of incorrect Fourier Energy answers: {not_matched_fourier}\"")\n    print(f\""Count of correct Self Energy answers: {matched_self}\"")\n    print(f\""Count of incorrect Self Energy answers: {not_matched_self}\"")\n    print(f\""Count of correct Intra Energy answers: {matched_intra}\"")\n    print(f\""Count of incorrect Intra Energy answers: {not_matched_intra}\"")\n    print()\n    total_correct = matched_real + matched_fourier + matched_self + matched_intra + matched_dispersion + matched_lrc\n    total_incorrect = not_matched_real + not_matched_fourier + not_matched_self + not_matched_intra + not_matched_dispersion + not_matched_lrc\n    print(f\""Total correct answers: {total_correct}\"")\n    print(f\""Total incorrect answers: {total_incorrect}\"")\n\n# -------------------------------------------------------------------------------------------\n# Call compare function\n# -------------------------------------------------------------------------------------------\ncompare_LJ_coulomb_energy(results, NIST_TRICLINIC_SPC_E_Water)\n""
}","import numpy as np
import pandas as pd
from scipy.special import erfc,erf
import math 

# defining all variables
atom_properties = {
    'O': {'type': 'O', 'sigma': 3.165558, 'epsilon': 78.197431, 'charge': -0.8476, 'num_particles': 1},
    'H': {'type': 'H', 'sigma': 0.000000, 'epsilon': 0.000000, 'charge': 0.4238, 'num_particles': 2},
}

# Trying for small configurations first
file_paths = [
    #    '../data/spce_sample_config_periodic4.txt',
    #    '../data/spce_sample_config_periodic2.txt',
    #    '../data/spce_sample_config_periodic3.txt',
        '../data/spce-sample-non-cuboid-configurations/spce_triclinic_sample_periodic3.txt'
    ]

NIST_TRICLINIC_SPC_E_Water = {'Configuration': [1, 2, 3, 4],
 'M (number of SPC/E molecules)': [400, 300, 200, 100],
 'Cell Type': ['Triclinic', 'Monoclinic', 'Triclinic', 'Monoclinic'],
 'Cell Side Lengths [a, b, c] (Å)': ['[30 Å, 30 Å, 30 Å]',
  '[27 Å, 30 Å, 36 Å]',
  '[30 Å, 30 Å, 30 Å]',
  '[36 Å, 36 Å, 36 Å]'],
 'Cell Angles [α, β, γ] (degrees)': ['[100°, 95°, 75°]',
  '[90°, 75°, 90°]',
  '[85°, 75°, 80°]',
  '[90°, 60°, 90°]'],
 'Number of Wave Vectors': [831, 1068, 838, 1028],
 'Edisp/kB (K)': [111992.0, 43286.0, 14403.3, 25025.1],
 'ELRC/kB (K)': [-4109.19, -2105.61, -1027.3, -163.091],
 'Ereal/kB (K)': [-727219.0, -476902.0, -297129.0, -171462.0],
 'Efourier/kB (K)': [44677.0, 44409.4, 28897.4, 22337.2],
 'Eself/kB (K)': [-11582000.0, -8686470.0, -5790980.0, -2895490.0],
 'Eintra/kB (K)': [11435400.0, 8576520.0, 5717680.0, 2858840.0],
 'Etotal/kB (K)': [-721254.0, -501259.0, -328153.0, -160912.0]}

# Data processing



def extracting_positions(input_file):
        # Extract the positions from the .xyz file
    with open(input_file, ""r"") as file:
        lines = file.readlines()

    data_lines = lines[2:]

    data_list = []
    for line in data_lines:
        stripped_line = line.strip()
        parts = stripped_line.split()
        if len(parts) >= 5:  
            try:
                x, y, z = map(float, parts[1:4])
                atom_type = parts[4]
                data_list.append([x, y, z, atom_type])
            except ValueError:
                continue  

    # Create a DataFrame with all configurations
    columns = [""X"", ""Y"", ""Z"", ""Atom Type""]
    configuration = pd.DataFrame(data_list, columns=columns)

    configuration.index = range(1, len(configuration) + 1)

    configuration[""Molecule""] = ((configuration.index - 1) // 3) + 1
    
    return configuration

# create the target dataframes
def creating_dataframes(file_paths, atom_properties, NIST_SPC_E_Water):
    NIST_SPC_E_Water = pd.DataFrame(NIST_SPC_E_Water)
    NIST_SPC_E_Water['Sum of energies'] = (
        NIST_SPC_E_Water['Edisp/kB (K)'] + NIST_SPC_E_Water['ELRC/kB (K)'] +
        NIST_SPC_E_Water['Ereal/kB (K)'] + NIST_SPC_E_Water['Efourier/kB (K)'] +
        NIST_SPC_E_Water['Eself/kB (K)'] + NIST_SPC_E_Water['Eintra/kB (K)']
    )

    force_field = pd.DataFrame(atom_properties).from_dict(atom_properties, orient='index')

    system = pd.DataFrame(file_paths, columns=[""file_paths""])
    system['configuration #'] = (
        system['file_paths']
        .str.extract(r'(\d+)', expand=False)
        .fillna('0')
        .astype(int)
    )

    # For demonstration, we'll keep the same approach: number of particles from NIST, box length fallback
    system[[""number of particles"", ""box length""]] = system[""configuration #""].apply(
        lambda x: pd.Series({
            ""number of particles"": float(
                NIST_SPC_E_Water.loc[
                    NIST_SPC_E_Water[""Configuration""] == x,
                    ""M (number of SPC/E molecules)""
                ].values[0]
            ) if x in NIST_SPC_E_Water[""Configuration""].values else 0.0,
            ""box length"": 30.0  # default fallback
        })
    )

    # cutoff
    system['cutoff'] = 10
    # alpha ~ 5.6 / L (simple approach)
    system['alpha'] = system.apply(
        lambda row: 5.6 / row['box length'] if row['box length'] != 0 else 0.28,
        axis=1
    )

    system['kmax'] = 5
    system['ε0'] = float(8.854187817E-12)
    system['kB'] = float(1.3806488E-23)

    return system, force_field, NIST_SPC_E_Water

# pairwise dispersion energy functions

# Minimum Image Distance function and Pair Dispersion Energy calculation (Code 3)
def minimum_image_distance(r_ij, cell_length):
    return r_ij - cell_length * np.round(r_ij / cell_length)

# pairwise dispersion energy operation
def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    frac = inv_box_matrix @ r_vec
    frac -= np.rint(frac)
    r_min = box_matrix @ frac
    return r_min

def pair_dispersion_energy(system_data, configuration, force_field):
    positions = configuration[['X', 'Y', 'Z']].values
    atom_types = configuration['Atom Type'].values
    cutoff = system_data['cutoff']
    cell_length = system_data['box length']
    num_atoms = len(positions)

    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    total_dispersion_energy = 0.0

    for i in range(num_atoms):
        for j in range(i + 1, num_atoms):
            r_ij = positions[i] - positions[j]
            if box_matrix is not None and inv_box_matrix is not None:
                r_ij = triclinic_minimum_image_distance(r_ij, box_matrix, inv_box_matrix)
            else:
                r_ij = minimum_image_distance(r_ij, cell_length)
            distance = np.linalg.norm(r_ij)

            if 0 < distance < cutoff:
                type_i, type_j = atom_types[i], atom_types[j]
                if type_i not in force_field.index or type_j not in force_field.index:
                    continue

                epsilon_i = force_field.loc[type_i, 'epsilon']
                epsilon_j = force_field.loc[type_j, 'epsilon']
                sigma_i = force_field.loc[type_i, 'sigma']
                sigma_j = force_field.loc[type_j, 'sigma']

                epsilon_ij = np.sqrt(epsilon_i * epsilon_j)
                sigma_ij = (sigma_i + sigma_j) / 2.0
                s_over_r = sigma_ij / distance

                potential_energy = 4.0 * epsilon_ij * (s_over_r**12 - s_over_r**6)
                total_dispersion_energy += potential_energy

    return total_dispersion_energy

# Compute LRC energy
def compute_lrc_energy(system_row, force_field):
    U_lrc_total = 0.0
    for atom_type, atom_data in force_field.iterrows():
        num_particles = system_row['number of particles'] * atom_data['num_particles']
        volume = (system_row['box length'])**3  # approximate cubic volume
        rho = num_particles / volume
        sigma = atom_data['sigma']
        epsilon = atom_data['epsilon']
        cutoff = system_row['cutoff']
        if cutoff <= 0.0:
            continue

        sigma_by_cutoff_3 = (sigma / cutoff)**3
        sigma_by_cutoff_9 = sigma_by_cutoff_3**3

        U_lrc_per_particle = (8.0 / 3.0) * math.pi * rho * epsilon * (sigma**3) * (sigma_by_cutoff_9 / 3.0 - sigma_by_cutoff_3)
        U_lrc_per_particle *= num_particles
        U_lrc_total += U_lrc_per_particle

    return U_lrc_total

def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    frac = inv_box_matrix @ r_vec
    frac -= np.rint(frac)
    r_min = box_matrix @ frac
    return r_min

def compute_real_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    cutoff = system_data[""cutoff""]
    L = system_data[""box length""]

    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    mol_ids = configuration[""Molecule""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])

    real_energy = 0.0
    n_atoms = len(positions)

    def cubic_mi(dr, box_len):
        dr[0] -= round(dr[0]/box_len)*box_len
        dr[1] -= round(dr[1]/box_len)*box_len
        dr[2] -= round(dr[2]/box_len)*box_len
        return dr

    for j in range(n_atoms - 1):
        for l in range(j + 1, n_atoms):
            # skip intramolecular pairs in real space? (NIST approach does only intermolecular in real term)
            if mol_ids[j] == mol_ids[l]:
                continue

            dr = positions[l] - positions[j]
            if box_matrix is not None and inv_box_matrix is not None:
                dr = triclinic_minimum_image_distance(dr, box_matrix, inv_box_matrix)
            else:
                dr = cubic_mi(dr, L)
            r = np.linalg.norm(dr)

            if r < cutoff and r > 1e-14:
                qj = charges[j] * e_charge
                ql = charges[l] * e_charge
                r_m = r * 1e-10
                val = coulomb_factor * (qj*ql / r_m) * erfc(alpha*r)
                real_energy += val

    return real_energy

def build_reciprocal_vectors(box_matrix):
    inv_trans = np.linalg.inv(box_matrix).T
    return 2.0 * math.pi * inv_trans

def compute_fourier_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    kmax = system_data[""kmax""]

    box_matrix = configuration.attrs.get('box_matrix', None)
    if box_matrix is not None:
        vol = abs(np.linalg.det(box_matrix)) * (1e-10)**3
        reciprocal = build_reciprocal_vectors(box_matrix)
    else:
        L = system_data[""box length""]
        vol = (L*1e-10)**3
        reciprocal = (2.0*math.pi/(L*1e-10))*np.eye(3)

    positions = configuration[[""X"", ""Y"", ""Z""]].values * 1e-10
    charges = np.array([force_field.loc[t, ""charge""] for t in configuration[""Atom Type""]])
    charges_c = charges * e_charge

    prefactor = coulomb_factor / (2.0*vol)
    alpha_m = alpha*1e10

    fourier_energy = 0.0

    for nx in range(-kmax, kmax+1):
        for ny in range(-kmax, kmax+1):
            for nz in range(-kmax, kmax+1):
                if (nx == 0 and ny == 0 and nz == 0):
                    continue

                k_vec = nx*reciprocal[:,0] + ny*reciprocal[:,1] + nz*reciprocal[:,2]
                k_sq = np.dot(k_vec, k_vec)
                if k_sq < 1e-14:
                    continue

                # optional: skip if k^2 too large
                # if desired, skip if k^2 > (kmax^2 + 2) * (2*pi/(30e-10))^2, etc.

                real_part = 0.0
                imag_part = 0.0

                for j, (posx, posy, posz) in enumerate(positions):
                    kr = k_vec[0]*posx + k_vec[1]*posy + k_vec[2]*posz
                    real_part += charges_c[j]*math.cos(kr)
                    imag_part += charges_c[j]*math.sin(kr)

                sk_sq = real_part**2 + imag_part**2
                exponent = math.exp(-k_sq/(4.0*alpha_m**2))

                term = prefactor * (4.0*math.pi / k_sq) * exponent * sk_sq
                fourier_energy += term

    return fourier_energy


def compute_self_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t,""charge""] for t in atom_types])
    charges_c = charges * e_charge

    alpha_m = alpha * 1e10

    sum_q2 = np.sum(charges_c**2)
    self_energy = -coulomb_factor * (alpha_m / math.sqrt(math.pi)) * sum_q2

    return self_energy


def compute_intra_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t,""charge""] for t in atom_types])
    mol_ids = configuration[""Molecule""].values

    alpha_dimless = alpha
    intra_energy = 0.0

    unique_mols = np.unique(mol_ids)
    for m_id in unique_mols:
        idxs = np.where(mol_ids == m_id)[0]
        n_mol_atoms = len(idxs)
        for i in range(n_mol_atoms - 1):
            for j in range(i+1, n_mol_atoms):
                idx_i = idxs[i]
                idx_j = idxs[j]
                dx = positions[idx_j,0] - positions[idx_i,0]
                dy = positions[idx_j,1] - positions[idx_i,1]
                dz = positions[idx_j,2] - positions[idx_i,2]
                r = math.sqrt(dx*dx + dy*dy + dz*dz)
                if r > 1e-14:
                    qi = charges[idx_i]*e_charge
                    qj = charges[idx_j]*e_charge
                    r_m = r*1e-10
                    val = coulomb_factor*(qi*qj / r_m)*erf(alpha_dimless*r)
                    intra_energy -= val

    return intra_energy


# DataFrame Descriptions:

# 1. NIST_TRICLINIC_SPC_E_Water DataFrame:
#    - Contains thermodynamic properties of SPC/E water configurations in both triclinic and monoclinic cells.
#    - Columns:
#        - 'Configuration' (int): Configuration ID (1-4).
#        - 'M (number of SPC/E molecules)' (int): Number of SPC/E molecules in the system.
#        - 'Cell Type' (str): Type of the cell (e.g., Triclinic, Monoclinic).
#        - 'Cell Side Lengths [a, b, c] (Å)' (list of strings): Cell side lengths in Ångströms.
#        - 'Cell Angles [α, β, γ] (degrees)' (list of strings): Cell angles in degrees.
#        - 'Number of Wave Vectors' (int): The number of wave vectors for each configuration.
#        - 'Edisp/kB (K)' (float): Dispersion energy in Kelvin.
#        - 'ELRC/kB (K)' (float): Long-range correction energy in Kelvin.
#        - 'Ereal/kB (K)' (float): Real energy in Kelvin.
#        - 'Efourier/kB (K)' (float): Fourier transform energy in Kelvin.
#        - 'Eself/kB (K)' (float): Self-interaction energy in Kelvin.
#        - 'Eintra/kB (K)' (float): Intra-molecular energy in Kelvin.
#        - 'Etotal/kB (K)' (float): Total energy in Kelvin.

# 2. force_field DataFrame:
#    - Contains force field parameters for SPC/E water, specifically for oxygen ('O') and hydrogen ('H').
#    - Columns:
#        - 'type' (str): Atom type ('O' or 'H').
#        - 'sigma' (float): Lennard-Jones parameter (Å).
#        - 'epsilon' (float): Lennard-Jones well depth (K).
#        - 'charge' (float): Partial charge (e).
#        - 'num_particles' (int): Number of particles per molecule.

# 3. system DataFrame:
#    - Contains metadata about each system configuration.
#    - Columns:
#        - 'file_paths' (str): File names containing atomic configurations.
#        - 'configuration #' (int): Extracted configuration number (1-4).
#        - 'number of particles' (float): Number of molecules (from 'NIST_SPC_E_Water').
#        - 'box length' (float): Box dimensions (from 'NIST_SPC_E_Water').
#        - 'cutoff' (int): Fixed cutoff distance for interactions (10 Å).
#        - 'alpha' (float): Ewald summation parameter (5.6 / min(a, b, c)).
#        - 'kmax' (int): Maximum wave vector index (5); also, only include k for which k² < kmax² + 2, i.e., k² < 27.
#        - 'ε0' (float): Permittivity of Vacuum (8.854187817E-12 C²/(J m)).
#        - 'kB' (float): Boltzmann Constant (1.3806488E-23 J/K).

# 4. configuration DataFrame (from 'extracting_positions'):
#    - Created per file, containing atomic positions.
#    - Columns:
#        - 'X' (float): Atom coordinates in Ångströms.
#        - 'Y' (float): Atom coordinates in Ångströms.
#        - 'Z' (float): Atom coordinates in Ångströms.
#        - 'Atom Type' (str): Type of atom ('O' or 'H').
#        - 'Molecule' (int): Molecule index assigned based on position.


system, force_field, NIST_TRICLINIC_SPC_E_Water = creating_dataframes(file_paths, atom_properties,NIST_TRICLINIC_SPC_E_Water)

# Computing energies storing in results
results = pd.DataFrame()

results['Number of Particles'] = system['number of particles'].astype(int)

# Calculate LRC energy for all system configurations
results['lrc_Energies'] = system.apply(
    lambda row: compute_lrc_energy(row, force_field), axis=1
)

# Calculate pairwise energy for all system configurations
results['dispersion_energies'] = system['file_paths'].apply(
    lambda file_path: pair_dispersion_energy(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path), 
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['real_energies'] = system['file_paths'].apply(
    lambda file_path: compute_real_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['fourier_energies'] = system['file_paths'].apply(
    lambda file_path: compute_fourier_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['self_energies'] = system['file_paths'].apply(
    lambda file_path: compute_self_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['intra_energies'] = system['file_paths'].apply(
    lambda file_path: compute_intra_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

def compare_LJ_coulomb_energy(df1, df2, tolerance=1e-4):
    df_merged = df1.merge(df2, left_on='Number of Particles', right_on='M (number of SPC/E molecules)', how='left')

    matched_real = matched_fourier = matched_self = matched_intra = 0
    matched_dispersion = matched_lrc = 0
    not_matched_real = not_matched_fourier = not_matched_self = not_matched_intra = 0
    not_matched_dispersion = not_matched_lrc = 0

    real_energy_output, fourier_energy_output = [], []
    self_energy_output, intra_energy_output = [], []
    lrc_energy_output, dispersion_energy_output = [], []

    for idx, row in df_merged.iterrows():
        real_energy = row['real_energies']
        fourier_energy = row['fourier_energies']
        self_energy = row['self_energies']
        intra_energy = row['intra_energies']
        num_molecules = row['Number of Particles']
        lrc_energy = row['lrc_Energies']
        dispersion_energy = row['dispersion_energies']

        if pd.isna(row['Ereal/kB (K)']):
            continue

        nist_real_energy = float(row['Ereal/kB (K)'])
        nist_fourier_energy = float(row['Efourier/kB (K)'])
        nist_self_energy = float(row['Eself/kB (K)'])
        nist_intra_energy = float(row['Eintra/kB (K)'])
        nist_lrc_energy = float(row['ELRC/kB (K)'])
        nist_dispersion_energy = float(row['Edisp/kB (K)'])

        match_real = np.isclose(real_energy, nist_real_energy, atol=tolerance)
        match_fourier = np.isclose(fourier_energy, nist_fourier_energy, atol=tolerance)
        match_self = np.isclose(self_energy, nist_self_energy, atol=tolerance)
        match_intra = np.isclose(intra_energy, nist_intra_energy, atol=tolerance)
        match_dispersion = np.isclose(dispersion_energy, nist_dispersion_energy, atol=tolerance)
        match_lrc = np.isclose(lrc_energy, nist_lrc_energy, atol=tolerance)

        matched_real += int(match_real)
        not_matched_real += int(not match_real)
        matched_fourier += int(match_fourier)
        not_matched_fourier += int(not match_fourier)
        matched_self += int(match_self)
        not_matched_self += int(not match_self)
        matched_intra += int(match_intra)
        not_matched_intra += int(not match_intra)
        matched_dispersion += int(match_dispersion)
        not_matched_dispersion += int(not match_dispersion)
        matched_lrc += int(match_lrc)
        not_matched_lrc += int(not match_lrc)

        dispersion_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {dispersion_energy:.4E}, NIST: {nist_dispersion_energy:.4E}, Match: {match_dispersion}"")
        lrc_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {lrc_energy:.4E}, NIST: {nist_lrc_energy:.4E}, Match: {match_lrc}"")
        real_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {real_energy:.4E}, NIST: {nist_real_energy:.4E}, Match: {match_real}"")
        fourier_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {fourier_energy:.4E}, NIST: {nist_fourier_energy:.4E}, Match: {match_fourier}"")
        self_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {self_energy:.4E}, NIST: {nist_self_energy:.4E}, Match: {match_self}"")
        intra_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {intra_energy:.4E}, NIST: {nist_intra_energy:.4E}, Match: {match_intra}"")

    print()        
    print(""Lennard-Jones Pair Dispersion Energy Comparison:"")
    print(*dispersion_energy_output)
    print(""Lennard-Jones long-range corrections Energy Comparison:"")
    print(*lrc_energy_output)
    print(""Real Energy Comparison:"")
    print(*real_energy_output)
    print(""Fourier Energy Comparison:"")
    print(*fourier_energy_output)
    print(""Self Energy Comparison:"")
    print(*self_energy_output)
    print(""Intra Energy Comparison:"")
    print(*intra_energy_output)
    print()
    print(f""Count of correct pairwise answers: {matched_dispersion}"")
    print(f""Count of incorrect pairwise answers: {not_matched_dispersion}"")
    print(f""Count of correct LRC answers: {matched_lrc}"")
    print(f""Count of incorrect LRC answers: {not_matched_lrc}"")
    print(f""Count of correct Real Energy answers: {matched_real}"")
    print(f""Count of incorrect Real Energy answers: {not_matched_real}"")
    print(f""Count of correct Fourier Energy answers: {matched_fourier}"")
    print(f""Count of incorrect Fourier Energy answers: {not_matched_fourier}"")
    print(f""Count of correct Self Energy answers: {matched_self}"")
    print(f""Count of incorrect Self Energy answers: {not_matched_self}"")
    print(f""Count of correct Intra Energy answers: {matched_intra}"")
    print(f""Count of incorrect Intra Energy answers: {not_matched_intra}"")
    print()
    total_correct = matched_real + matched_fourier + matched_self + matched_intra + matched_dispersion + matched_lrc
    total_incorrect = not_matched_real + not_matched_fourier + not_matched_self + not_matched_intra + not_matched_dispersion + not_matched_lrc
    print(f""Total correct answers: {total_correct}"")
    print(f""Total incorrect answers: {total_incorrect}"")


# calling compare_coulomb_energy function
compare_LJ_coulomb_energy(results, NIST_TRICLINIC_SPC_E_Water)"
1,3,2025-03-24_18:07:57,o1,high,short,"Result from the code generated:
Your code hasn't yet passed all of the NIST benchmark tests. Here's the current progress:

Lennard-Jones Pair Dispersion Energy Comparison:
Test 1 (200 molecules): Computed: 9.3763E+04, NIST: 1.4403E+04, Match: False
Lennard-Jones long-range corrections Energy Comparison:
Test 1 (200 molecules): Computed: -9.7626E+02, NIST: -1.0273E+03, Match: False
Real Energy Comparison:
Test 1 (200 molecules): Computed: -3.1845E+05, NIST: -2.9713E+05, Match: False
Fourier Energy Comparison:
Test 1 (200 molecules): Computed: 2.7448E+04, NIST: 2.8897E+04, Match: False
Self Energy Comparison:
Test 1 (200 molecules): Computed: -3.7929E+06, NIST: -5.7910E+06, Match: False
Intra Energy Comparison:
Test 1 (200 molecules): Computed: 3.6075E+06, NIST: 5.7177E+06, Match: False

Count of correct pairwise answers: 0
Count of incorrect pairwise answers: 1
Count of correct LRC answers: 0
Count of incorrect LRC answers: 1
Count of correct Real Energy answers: 0
Count of incorrect Real Energy answers: 1
Count of correct Fourier Energy answers: 0
Count of incorrect Fourier Energy answers: 1
Count of correct Self Energy answers: 0
Count of incorrect Self Energy answers: 1
Count of correct Intra Energy answers: 0
Count of incorrect Intra Energy answers: 1

Total correct answers: 0
Total incorrect answers: 6

Out of the tests, 0 answers have been correct, with 6 remaining. 
Keep going – you're getting closer! Continue refining the code step by step until it passes all the tests.

Complete each function sequentially, incorporating feedback to optimize efficiency and align with NIST benchmarks. Aim to match the benchmark values as closely as possible with each attempt, ensuring visible numerical improvements. Refer to the context and revise accordingly.","Please find the code generated in iteration 3. You have 3 iterations left to complete the code for Coulombic contributions using the traditional Ewald Summation Method for given triclinic or monoclinic configurations data.

import numpy as np
import pandas as pd
from scipy.special import erfc,erf
import math 

# defining all variables
atom_properties = {
    'O': {'type': 'O', 'sigma': 3.165558, 'epsilon': 78.197431, 'charge': -0.8476, 'num_particles': 1},
    'H': {'type': 'H', 'sigma': 0.000000, 'epsilon': 0.000000, 'charge': 0.4238, 'num_particles': 2},
}

# Trying for small configurations first
file_paths = [
    #    '../data/spce_sample_config_periodic4.txt',
    #    '../data/spce_sample_config_periodic2.txt',
    #    '../data/spce_sample_config_periodic3.txt',
        '../data/spce-sample-non-cuboid-configurations/spce_triclinic_sample_periodic3.txt'
    ]

NIST_TRICLINIC_SPC_E_Water = {'Configuration': [1, 2, 3, 4],
 'M (number of SPC/E molecules)': [400, 300, 200, 100],
 'Cell Type': ['Triclinic', 'Monoclinic', 'Triclinic', 'Monoclinic'],
 'Cell Side Lengths [a, b, c] (Å)': ['[30 Å, 30 Å, 30 Å]',
  '[27 Å, 30 Å, 36 Å]',
  '[30 Å, 30 Å, 30 Å]',
  '[36 Å, 36 Å, 36 Å]'],
 'Cell Angles [α, β, γ] (degrees)': ['[100°, 95°, 75°]',
  '[90°, 75°, 90°]',
  '[85°, 75°, 80°]',
  '[90°, 60°, 90°]'],
 'Number of Wave Vectors': [831, 1068, 838, 1028],
 'Edisp/kB (K)': [111992.0, 43286.0, 14403.3, 25025.1],
 'ELRC/kB (K)': [-4109.19, -2105.61, -1027.3, -163.091],
 'Ereal/kB (K)': [-727219.0, -476902.0, -297129.0, -171462.0],
 'Efourier/kB (K)': [44677.0, 44409.4, 28897.4, 22337.2],
 'Eself/kB (K)': [-11582000.0, -8686470.0, -5790980.0, -2895490.0],
 'Eintra/kB (K)': [11435400.0, 8576520.0, 5717680.0, 2858840.0],
 'Etotal/kB (K)': [-721254.0, -501259.0, -328153.0, -160912.0]}

# Data processing



def extracting_positions(input_file):
        # Extract the positions from the .xyz file
    with open(input_file, ""r"") as file:
        lines = file.readlines()

    data_lines = lines[2:]

    data_list = []
    for line in data_lines:
        stripped_line = line.strip()
        parts = stripped_line.split()
        if len(parts) >= 5:  
            try:
                x, y, z = map(float, parts[1:4])
                atom_type = parts[4]
                data_list.append([x, y, z, atom_type])
            except ValueError:
                continue  

    # Create a DataFrame with all configurations
    columns = [""X"", ""Y"", ""Z"", ""Atom Type""]
    configuration = pd.DataFrame(data_list, columns=columns)

    configuration.index = range(1, len(configuration) + 1)

    configuration[""Molecule""] = ((configuration.index - 1) // 3) + 1
    
    return configuration

# create the target dataframes
def creating_dataframes(file_paths, atom_properties, NIST_SPC_E_Water):
    NIST_SPC_E_Water = pd.DataFrame(NIST_SPC_E_Water)
    NIST_SPC_E_Water['Sum of energies'] = (
        NIST_SPC_E_Water['Edisp/kB (K)'] + NIST_SPC_E_Water['ELRC/kB (K)'] +
        NIST_SPC_E_Water['Ereal/kB (K)'] + NIST_SPC_E_Water['Efourier/kB (K)'] +
        NIST_SPC_E_Water['Eself/kB (K)'] + NIST_SPC_E_Water['Eintra/kB (K)']
    )

    force_field = pd.DataFrame(atom_properties).from_dict(atom_properties, orient='index')

    system = pd.DataFrame(file_paths, columns=[""file_paths""])
    system['configuration #'] = (
        system['file_paths']
        .str.extract(r'(\d+)', expand=False)
        .fillna('0')
        .astype(int)
    )

    # For demonstration, we'll keep the same approach: number of particles from NIST, box length fallback
    system[[""number of particles"", ""box length""]] = system[""configuration #""].apply(
        lambda x: pd.Series({
            ""number of particles"": float(
                NIST_SPC_E_Water.loc[
                    NIST_SPC_E_Water[""Configuration""] == x,
                    ""M (number of SPC/E molecules)""
                ].values[0]
            ) if x in NIST_SPC_E_Water[""Configuration""].values else 0.0,
            ""box length"": 30.0  # default fallback
        })
    )

    # cutoff
    system['cutoff'] = 10
    # alpha ~ 5.6 / L (simple approach)
    system['alpha'] = system.apply(
        lambda row: 5.6 / row['box length'] if row['box length'] != 0 else 0.28,
        axis=1
    )

    system['kmax'] = 5
    system['ε0'] = float(8.854187817E-12)
    system['kB'] = float(1.3806488E-23)

    return system, force_field, NIST_SPC_E_Water

# pairwise dispersion energy functions

# Minimum Image Distance function and Pair Dispersion Energy calculation (Code 3)
def minimum_image_distance(r_ij, cell_length):
    return r_ij - cell_length * np.round(r_ij / cell_length)

# pairwise dispersion energy operation
def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    frac = inv_box_matrix @ r_vec
    frac -= np.rint(frac)
    r_min = box_matrix @ frac
    return r_min

def pair_dispersion_energy(system_data, configuration, force_field):
    positions = configuration[['X', 'Y', 'Z']].values
    atom_types = configuration['Atom Type'].values
    cutoff = system_data['cutoff']
    cell_length = system_data['box length']
    num_atoms = len(positions)

    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    total_dispersion_energy = 0.0

    for i in range(num_atoms):
        for j in range(i + 1, num_atoms):
            r_ij = positions[i] - positions[j]
            if box_matrix is not None and inv_box_matrix is not None:
                r_ij = triclinic_minimum_image_distance(r_ij, box_matrix, inv_box_matrix)
            else:
                r_ij = minimum_image_distance(r_ij, cell_length)
            distance = np.linalg.norm(r_ij)

            if 0 < distance < cutoff:
                type_i, type_j = atom_types[i], atom_types[j]
                if type_i not in force_field.index or type_j not in force_field.index:
                    continue

                epsilon_i = force_field.loc[type_i, 'epsilon']
                epsilon_j = force_field.loc[type_j, 'epsilon']
                sigma_i = force_field.loc[type_i, 'sigma']
                sigma_j = force_field.loc[type_j, 'sigma']

                epsilon_ij = np.sqrt(epsilon_i * epsilon_j)
                sigma_ij = (sigma_i + sigma_j) / 2.0
                s_over_r = sigma_ij / distance

                potential_energy = 4.0 * epsilon_ij * (s_over_r**12 - s_over_r**6)
                total_dispersion_energy += potential_energy

    return total_dispersion_energy

# Compute LRC energy
def compute_lrc_energy(system_row, force_field):
    U_lrc_total = 0.0
    for atom_type, atom_data in force_field.iterrows():
        num_particles = system_row['number of particles'] * atom_data['num_particles']
        volume = (system_row['box length'])**3  # approximate cubic volume
        rho = num_particles / volume
        sigma = atom_data['sigma']
        epsilon = atom_data['epsilon']
        cutoff = system_row['cutoff']
        if cutoff <= 0.0:
            continue

        sigma_by_cutoff_3 = (sigma / cutoff)**3
        sigma_by_cutoff_9 = sigma_by_cutoff_3**3

        U_lrc_per_particle = (8.0 / 3.0) * math.pi * rho * epsilon * (sigma**3) * (sigma_by_cutoff_9 / 3.0 - sigma_by_cutoff_3)
        U_lrc_per_particle *= num_particles
        U_lrc_total += U_lrc_per_particle

    return U_lrc_total

def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    frac = inv_box_matrix @ r_vec
    frac -= np.rint(frac)
    r_min = box_matrix @ frac
    return r_min

def compute_real_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    cutoff = system_data[""cutoff""]
    L = system_data[""box length""]

    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    mol_ids = configuration[""Molecule""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])

    real_energy = 0.0
    n_atoms = len(positions)

    def cubic_mi(dr, box_len):
        dr[0] -= round(dr[0]/box_len)*box_len
        dr[1] -= round(dr[1]/box_len)*box_len
        dr[2] -= round(dr[2]/box_len)*box_len
        return dr

    for j in range(n_atoms - 1):
        for l in range(j + 1, n_atoms):
            # skip intramolecular pairs in real space? (NIST approach does only intermolecular in real term)
            if mol_ids[j] == mol_ids[l]:
                continue

            dr = positions[l] - positions[j]
            if box_matrix is not None and inv_box_matrix is not None:
                dr = triclinic_minimum_image_distance(dr, box_matrix, inv_box_matrix)
            else:
                dr = cubic_mi(dr, L)
            r = np.linalg.norm(dr)

            if r < cutoff and r > 1e-14:
                qj = charges[j] * e_charge
                ql = charges[l] * e_charge
                r_m = r * 1e-10
                val = coulomb_factor * (qj*ql / r_m) * erfc(alpha*r)
                real_energy += val

    return real_energy

def build_reciprocal_vectors(box_matrix):
    inv_trans = np.linalg.inv(box_matrix).T
    return 2.0 * math.pi * inv_trans

def compute_fourier_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    kmax = system_data[""kmax""]

    box_matrix = configuration.attrs.get('box_matrix', None)
    if box_matrix is not None:
        vol = abs(np.linalg.det(box_matrix)) * (1e-10)**3
        reciprocal = build_reciprocal_vectors(box_matrix)
    else:
        L = system_data[""box length""]
        vol = (L*1e-10)**3
        reciprocal = (2.0*math.pi/(L*1e-10))*np.eye(3)

    positions = configuration[[""X"", ""Y"", ""Z""]].values * 1e-10
    charges = np.array([force_field.loc[t, ""charge""] for t in configuration[""Atom Type""]])
    charges_c = charges * e_charge

    prefactor = coulomb_factor / (2.0*vol)
    alpha_m = alpha*1e10

    fourier_energy = 0.0

    for nx in range(-kmax, kmax+1):
        for ny in range(-kmax, kmax+1):
            for nz in range(-kmax, kmax+1):
                if (nx == 0 and ny == 0 and nz == 0):
                    continue

                k_vec = nx*reciprocal[:,0] + ny*reciprocal[:,1] + nz*reciprocal[:,2]
                k_sq = np.dot(k_vec, k_vec)
                if k_sq < 1e-14:
                    continue

                # optional: skip if k^2 too large
                # if desired, skip if k^2 > (kmax^2 + 2) * (2*pi/(30e-10))^2, etc.

                real_part = 0.0
                imag_part = 0.0

                for j, (posx, posy, posz) in enumerate(positions):
                    kr = k_vec[0]*posx + k_vec[1]*posy + k_vec[2]*posz
                    real_part += charges_c[j]*math.cos(kr)
                    imag_part += charges_c[j]*math.sin(kr)

                sk_sq = real_part**2 + imag_part**2
                exponent = math.exp(-k_sq/(4.0*alpha_m**2))

                term = prefactor * (4.0*math.pi / k_sq) * exponent * sk_sq
                fourier_energy += term

    return fourier_energy


def compute_self_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t,""charge""] for t in atom_types])
    charges_c = charges * e_charge

    alpha_m = alpha * 1e10

    sum_q2 = np.sum(charges_c**2)
    self_energy = -coulomb_factor * (alpha_m / math.sqrt(math.pi)) * sum_q2

    return self_energy


def compute_intra_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t,""charge""] for t in atom_types])
    mol_ids = configuration[""Molecule""].values

    alpha_dimless = alpha
    intra_energy = 0.0

    unique_mols = np.unique(mol_ids)
    for m_id in unique_mols:
        idxs = np.where(mol_ids == m_id)[0]
        n_mol_atoms = len(idxs)
        for i in range(n_mol_atoms - 1):
            for j in range(i+1, n_mol_atoms):
                idx_i = idxs[i]
                idx_j = idxs[j]
                dx = positions[idx_j,0] - positions[idx_i,0]
                dy = positions[idx_j,1] - positions[idx_i,1]
                dz = positions[idx_j,2] - positions[idx_i,2]
                r = math.sqrt(dx*dx + dy*dy + dz*dz)
                if r > 1e-14:
                    qi = charges[idx_i]*e_charge
                    qj = charges[idx_j]*e_charge
                    r_m = r*1e-10
                    val = coulomb_factor*(qi*qj / r_m)*erf(alpha_dimless*r)
                    intra_energy -= val

    return intra_energy


# DataFrame Descriptions:

# 1. NIST_TRICLINIC_SPC_E_Water DataFrame:
#    - Contains thermodynamic properties of SPC/E water configurations in both triclinic and monoclinic cells.
#    - Columns:
#        - 'Configuration' (int): Configuration ID (1-4).
#        - 'M (number of SPC/E molecules)' (int): Number of SPC/E molecules in the system.
#        - 'Cell Type' (str): Type of the cell (e.g., Triclinic, Monoclinic).
#        - 'Cell Side Lengths [a, b, c] (Å)' (list of strings): Cell side lengths in Ångströms.
#        - 'Cell Angles [α, β, γ] (degrees)' (list of strings): Cell angles in degrees.
#        - 'Number of Wave Vectors' (int): The number of wave vectors for each configuration.
#        - 'Edisp/kB (K)' (float): Dispersion energy in Kelvin.
#        - 'ELRC/kB (K)' (float): Long-range correction energy in Kelvin.
#        - 'Ereal/kB (K)' (float): Real energy in Kelvin.
#        - 'Efourier/kB (K)' (float): Fourier transform energy in Kelvin.
#        - 'Eself/kB (K)' (float): Self-interaction energy in Kelvin.
#        - 'Eintra/kB (K)' (float): Intra-molecular energy in Kelvin.
#        - 'Etotal/kB (K)' (float): Total energy in Kelvin.

# 2. force_field DataFrame:
#    - Contains force field parameters for SPC/E water, specifically for oxygen ('O') and hydrogen ('H').
#    - Columns:
#        - 'type' (str): Atom type ('O' or 'H').
#        - 'sigma' (float): Lennard-Jones parameter (Å).
#        - 'epsilon' (float): Lennard-Jones well depth (K).
#        - 'charge' (float): Partial charge (e).
#        - 'num_particles' (int): Number of particles per molecule.

# 3. system DataFrame:
#    - Contains metadata about each system configuration.
#    - Columns:
#        - 'file_paths' (str): File names containing atomic configurations.
#        - 'configuration #' (int): Extracted configuration number (1-4).
#        - 'number of particles' (float): Number of molecules (from 'NIST_SPC_E_Water').
#        - 'box length' (float): Box dimensions (from 'NIST_SPC_E_Water').
#        - 'cutoff' (int): Fixed cutoff distance for interactions (10 Å).
#        - 'alpha' (float): Ewald summation parameter (5.6 / min(a, b, c)).
#        - 'kmax' (int): Maximum wave vector index (5); also, only include k for which k² < kmax² + 2, i.e., k² < 27.
#        - 'ε0' (float): Permittivity of Vacuum (8.854187817E-12 C²/(J m)).
#        - 'kB' (float): Boltzmann Constant (1.3806488E-23 J/K).

# 4. configuration DataFrame (from 'extracting_positions'):
#    - Created per file, containing atomic positions.
#    - Columns:
#        - 'X' (float): Atom coordinates in Ångströms.
#        - 'Y' (float): Atom coordinates in Ångströms.
#        - 'Z' (float): Atom coordinates in Ångströms.
#        - 'Atom Type' (str): Type of atom ('O' or 'H').
#        - 'Molecule' (int): Molecule index assigned based on position.


system, force_field, NIST_TRICLINIC_SPC_E_Water = creating_dataframes(file_paths, atom_properties,NIST_TRICLINIC_SPC_E_Water)

# Computing energies storing in results
results = pd.DataFrame()

results['Number of Particles'] = system['number of particles'].astype(int)

# Calculate LRC energy for all system configurations
results['lrc_Energies'] = system.apply(
    lambda row: compute_lrc_energy(row, force_field), axis=1
)

# Calculate pairwise energy for all system configurations
results['dispersion_energies'] = system['file_paths'].apply(
    lambda file_path: pair_dispersion_energy(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path), 
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['real_energies'] = system['file_paths'].apply(
    lambda file_path: compute_real_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['fourier_energies'] = system['file_paths'].apply(
    lambda file_path: compute_fourier_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['self_energies'] = system['file_paths'].apply(
    lambda file_path: compute_self_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['intra_energies'] = system['file_paths'].apply(
    lambda file_path: compute_intra_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

def compare_LJ_coulomb_energy(df1, df2, tolerance=1e-4):
    df_merged = df1.merge(df2, left_on='Number of Particles', right_on='M (number of SPC/E molecules)', how='left')

    matched_real = matched_fourier = matched_self = matched_intra = 0
    matched_dispersion = matched_lrc = 0
    not_matched_real = not_matched_fourier = not_matched_self = not_matched_intra = 0
    not_matched_dispersion = not_matched_lrc = 0

    real_energy_output, fourier_energy_output = [], []
    self_energy_output, intra_energy_output = [], []
    lrc_energy_output, dispersion_energy_output = [], []

    for idx, row in df_merged.iterrows():
        real_energy = row['real_energies']
        fourier_energy = row['fourier_energies']
        self_energy = row['self_energies']
        intra_energy = row['intra_energies']
        num_molecules = row['Number of Particles']
        lrc_energy = row['lrc_Energies']
        dispersion_energy = row['dispersion_energies']

        if pd.isna(row['Ereal/kB (K)']):
            continue

        nist_real_energy = float(row['Ereal/kB (K)'])
        nist_fourier_energy = float(row['Efourier/kB (K)'])
        nist_self_energy = float(row['Eself/kB (K)'])
        nist_intra_energy = float(row['Eintra/kB (K)'])
        nist_lrc_energy = float(row['ELRC/kB (K)'])
        nist_dispersion_energy = float(row['Edisp/kB (K)'])

        match_real = np.isclose(real_energy, nist_real_energy, atol=tolerance)
        match_fourier = np.isclose(fourier_energy, nist_fourier_energy, atol=tolerance)
        match_self = np.isclose(self_energy, nist_self_energy, atol=tolerance)
        match_intra = np.isclose(intra_energy, nist_intra_energy, atol=tolerance)
        match_dispersion = np.isclose(dispersion_energy, nist_dispersion_energy, atol=tolerance)
        match_lrc = np.isclose(lrc_energy, nist_lrc_energy, atol=tolerance)

        matched_real += int(match_real)
        not_matched_real += int(not match_real)
        matched_fourier += int(match_fourier)
        not_matched_fourier += int(not match_fourier)
        matched_self += int(match_self)
        not_matched_self += int(not match_self)
        matched_intra += int(match_intra)
        not_matched_intra += int(not match_intra)
        matched_dispersion += int(match_dispersion)
        not_matched_dispersion += int(not match_dispersion)
        matched_lrc += int(match_lrc)
        not_matched_lrc += int(not match_lrc)

        dispersion_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {dispersion_energy:.4E}, NIST: {nist_dispersion_energy:.4E}, Match: {match_dispersion}"")
        lrc_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {lrc_energy:.4E}, NIST: {nist_lrc_energy:.4E}, Match: {match_lrc}"")
        real_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {real_energy:.4E}, NIST: {nist_real_energy:.4E}, Match: {match_real}"")
        fourier_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {fourier_energy:.4E}, NIST: {nist_fourier_energy:.4E}, Match: {match_fourier}"")
        self_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {self_energy:.4E}, NIST: {nist_self_energy:.4E}, Match: {match_self}"")
        intra_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {intra_energy:.4E}, NIST: {nist_intra_energy:.4E}, Match: {match_intra}"")

    print()        
    print(""Lennard-Jones Pair Dispersion Energy Comparison:"")
    print(*dispersion_energy_output)
    print(""Lennard-Jones long-range corrections Energy Comparison:"")
    print(*lrc_energy_output)
    print(""Real Energy Comparison:"")
    print(*real_energy_output)
    print(""Fourier Energy Comparison:"")
    print(*fourier_energy_output)
    print(""Self Energy Comparison:"")
    print(*self_energy_output)
    print(""Intra Energy Comparison:"")
    print(*intra_energy_output)
    print()
    print(f""Count of correct pairwise answers: {matched_dispersion}"")
    print(f""Count of incorrect pairwise answers: {not_matched_dispersion}"")
    print(f""Count of correct LRC answers: {matched_lrc}"")
    print(f""Count of incorrect LRC answers: {not_matched_lrc}"")
    print(f""Count of correct Real Energy answers: {matched_real}"")
    print(f""Count of incorrect Real Energy answers: {not_matched_real}"")
    print(f""Count of correct Fourier Energy answers: {matched_fourier}"")
    print(f""Count of incorrect Fourier Energy answers: {not_matched_fourier}"")
    print(f""Count of correct Self Energy answers: {matched_self}"")
    print(f""Count of incorrect Self Energy answers: {not_matched_self}"")
    print(f""Count of correct Intra Energy answers: {matched_intra}"")
    print(f""Count of incorrect Intra Energy answers: {not_matched_intra}"")
    print()
    total_correct = matched_real + matched_fourier + matched_self + matched_intra + matched_dispersion + matched_lrc
    total_incorrect = not_matched_real + not_matched_fourier + not_matched_self + not_matched_intra + not_matched_dispersion + not_matched_lrc
    print(f""Total correct answers: {total_correct}"")
    print(f""Total incorrect answers: {total_incorrect}"")


# calling compare_coulomb_energy function
compare_LJ_coulomb_energy(results, NIST_TRICLINIC_SPC_E_Water)

Please review the provided code and implement the missing functions needed to compute Coulombic contributions using the traditional Ewald Summation Method for triclinic or monoclinic configurations data.

Produce a JSON output in the following format:
  ""Reasoning"": """",
  ""Code"": """"

Ensure that:
1. The JSON output is **properly formatted** with **double quotes** around keys.
2. The **Reasoning** section provides a concise and clear explanation of the approach taken.
3. The **Code** section contains well-structured, indented, and syntactically correct Python (or the required language).
4. The JSON output does **not** contain extraneous symbols such as triple backticks (` ``` `) or markdown indicators.
5. The output should be **fully valid JSON** and parseable using `json.loads()`.

Context:
Illustration of input file format:

            3.000000000000e+01       3.000000000000e+01       3.000000000000e+01
            8.500000000000e+01       7.500000000000e+01       8.000000000000e+01
         200
    1      -1.073606597760e+01       1.432194046140e+01      -6.226901963110e+00    O
    2      -1.661030970030e+01      -1.461065205480e+01      -5.798020258290e+00    H
    3      -1.118063417070e+01       1.380841402440e+01      -6.960829561930e+00    H
    4      -1.377161709910e+01      -8.711236583990e+00      -1.350200277380e+01    O
    5      -1.347193958490e+01      -8.247621904110e+00      -1.433582218840e+01    H
   
Refer to the Coulomb Ewald summation formula below.

Formula(latex form):

\Large \begin{eqnarray} E_{coulomb}\left(\mathbf{r}^N\right) & = &
\sum\limits_{j}  \sum\limits_{l>j}
\dfrac{q_j q_l}{ 4 \pi \epsilon_0} \dfrac{\text{erfc}\left(\alpha \cdot  \left| \mathbf{r}_{jl} \right| \right)}{\left| \mathbf{r}_{jl} \right|} \Theta\left( r_{cut} - \left|\mathbf{r}_{jl}\right| \right) \\
&& +\dfrac{1}{2 \pi V} \sum\limits_{\mathbf{k} \neq \mathbf{0}} \dfrac{1}{k^2} \exp \left[-\left( \dfrac{\pi k}{\alpha} \right)^2 \right] \dfrac{1}{4 \pi \epsilon_0} \cdot \left|\sum\limits_{j=1}^N q_j \exp \left(2\pi i \mathbf{k} \cdot \mathbf{r}_j \right) \right|^2 \\
&& - \dfrac{\alpha}{\sqrt{\pi}} \sum\limits_j \dfrac{q_j^2}{4 \pi \epsilon_0} \\
&& - \sum\limits_{j=1}^M  \sum\limits_{\kappa}  \sum\limits_{\lambda>\kappa} \dfrac{q_{j_\kappa} q_{j_\lambda}}{ 4 \pi \epsilon_0} \dfrac{\text{erf}\left(\alpha \cdot  \left| \mathbf{r}_{j_\kappa j_\lambda} \right| \right)}{\left| \mathbf{r}_{j_\kappa j_\lambda} \right|}
\end{eqnarray}

Explanation:

We note that this form of the Ewald Summation

1. requires total charge neutrality for the configuration and

2. neglects the surface dipole term (equivalent to using the ""tin-foil"" or conducting surface boundary condition)

Description:

The terms on the right-hand side of the equality to be computed are:

1) The real-space term Ereal,

2) The Fourier-space term, Efourier,

3) The self-correction term Eself,

4) The intramolecular term Eintra.

5) The Real Energy

6) The dispersion Energy

Notes:

Primary task: 

Write your code to modify the functions outlined above and incorporate any necessary additional functions.

You may access the required columns from the given dataframes as parameters to the function to calculate the energies.

Print Statements: Ensure that the print statements in the compare_LJ_coulomb_energy function remain exactly as they are, even as you make modifications to the other functions.

Function Modifications: The output should always include Python code for modifying the respective functions.

Flexibility in Code Changing: You are free to change other parts of the code, but the compare_LJ_coulomb_energy function must remain unchanged, as it manages the iteration loop.

Strict Requirements:

Function Names: Do not modify the function names or parameters.

Preserve compare_LJ_coulomb_energy Function: The compare_LJ_coulomb_energy function should remain unchanged, as it controls the iteration loop.

Iteration Notes: 

Iterative Process: If multiple functions are provided to solve the task, work through them one by one in each iteration.

Automated Iteration: The iteration loop will continue until the desired outcome is achieved.

Feedback Integration: When feedback is provided, ensure you proceed with the next steps based on the iteration results and the correct answers generated.



Result from the code generated:
Your code hasn't yet passed all of the NIST benchmark tests. Here's the current progress:

Lennard-Jones Pair Dispersion Energy Comparison:
Test 1 (200 molecules): Computed: 9.3763E+04, NIST: 1.4403E+04, Match: False
Lennard-Jones long-range corrections Energy Comparison:
Test 1 (200 molecules): Computed: -9.7626E+02, NIST: -1.0273E+03, Match: False
Real Energy Comparison:
Test 1 (200 molecules): Computed: -3.1845E+05, NIST: -2.9713E+05, Match: False
Fourier Energy Comparison:
Test 1 (200 molecules): Computed: 2.7448E+04, NIST: 2.8897E+04, Match: False
Self Energy Comparison:
Test 1 (200 molecules): Computed: -3.7929E+06, NIST: -5.7910E+06, Match: False
Intra Energy Comparison:
Test 1 (200 molecules): Computed: 3.6075E+06, NIST: 5.7177E+06, Match: False

Count of correct pairwise answers: 0
Count of incorrect pairwise answers: 1
Count of correct LRC answers: 0
Count of incorrect LRC answers: 1
Count of correct Real Energy answers: 0
Count of incorrect Real Energy answers: 1
Count of correct Fourier Energy answers: 0
Count of incorrect Fourier Energy answers: 1
Count of correct Self Energy answers: 0
Count of incorrect Self Energy answers: 1
Count of correct Intra Energy answers: 0
Count of incorrect Intra Energy answers: 1

Total correct answers: 0
Total incorrect answers: 6

Out of the tests, 0 answers have been correct, with 6 remaining. 
Keep going – you're getting closer! Continue refining the code step by step until it passes all the tests.

Complete each function sequentially, incorporating feedback to optimize efficiency and align with NIST benchmarks. Aim to match the benchmark values as closely as possible with each attempt, ensuring visible numerical improvements. Refer to the context and revise accordingly.","{
  ""Reasoning"": ""To address the mismatch between the computed and benchmark NIST values, we must (1) parse and store triclinic (or monoclinic) box parameters from the first two lines of the input file to construct the box matrix and its inverse, (2) ensure that only the oxygen-oxygen Lennard-Jones interactions are counted (since hydrogen has no Lennard-Jones parameters in standard SPC/E), (3) similarly skip hydrogen in the long-range correction calculation, and (4) preserve the existing function names and the compare_LJ_coulomb_energy function. These changes should bring the computed energies closer to the NIST reference data."",
  ""Code"": ""import numpy as np\nimport pandas as pd\nfrom scipy.special import erfc, erf\nimport math\n\n# -------------------------------------------------------------------------------------------\n# Helper function to build a triclinic box matrix from side lengths and angles\n# -------------------------------------------------------------------------------------------\ndef build_box_matrix(a, b, c, alpha_deg, beta_deg, gamma_deg):\n    alpha = np.deg2rad(alpha_deg)\n    beta = np.deg2rad(beta_deg)\n    gamma = np.deg2rad(gamma_deg)\n\n    # Vectors for triclinic box\n    v1 = np.array([a, 0.0, 0.0])\n    v2 = np.array([\n        b * math.cos(gamma),\n        b * math.sin(gamma),\n        0.0\n    ])\n    c_x = c * math.cos(beta)\n    c_y = c * (math.cos(alpha) - math.cos(beta) * math.cos(gamma)) / math.sin(gamma)\n    c_z_sq = c**2 - c_x**2 - c_y**2\n    if c_z_sq < 0.0:\n        c_z_sq = 0.0\n    c_z = math.sqrt(c_z_sq)\n\n    v3 = np.array([c_x, c_y, c_z])\n\n    box_matrix = np.vstack((v1, v2, v3))\n    return box_matrix\n\n# -------------------------------------------------------------------------------------------\n# Atom properties and sample file paths\n# -------------------------------------------------------------------------------------------\natom_properties = {\n    'O': {'type': 'O', 'sigma': 3.165558, 'epsilon': 78.197431, 'charge': -0.8476, 'num_particles': 1},\n    'H': {'type': 'H', 'sigma': 0.0, 'epsilon': 0.0, 'charge': 0.4238, 'num_particles': 2},\n}\n\nfile_paths = [\n    '../data/spce-sample-non-cuboid-configurations/spce_triclinic_sample_periodic3.txt'\n]\n\nNIST_TRICLINIC_SPC_E_Water = {\n    'Configuration': [1, 2, 3, 4],\n    'M (number of SPC/E molecules)': [400, 300, 200, 100],\n    'Cell Type': ['Triclinic', 'Monoclinic', 'Triclinic', 'Monoclinic'],\n    'Cell Side Lengths [a, b, c] (Å)': ['[30 Å, 30 Å, 30 Å]', '[27 Å, 30 Å, 36 Å]', '[30 Å, 30 Å, 30 Å]', '[36 Å, 36 Å, 36 Å]'],\n    'Cell Angles [α, β, γ] (degrees)': ['[100°, 95°, 75°]', '[90°, 75°, 90°]', '[85°, 75°, 80°]', '[90°, 60°, 90°]'],\n    'Number of Wave Vectors': [831, 1068, 838, 1028],\n    'Edisp/kB (K)': [111992.0, 43286.0, 14403.3, 25025.1],\n    'ELRC/kB (K)': [-4109.19, -2105.61, -1027.3, -163.091],\n    'Ereal/kB (K)': [-727219.0, -476902.0, -297129.0, -171462.0],\n    'Efourier/kB (K)': [44677.0, 44409.4, 28897.4, 22337.2],\n    'Eself/kB (K)': [-11582000.0, -8686470.0, -5790980.0, -2895490.0],\n    'Eintra/kB (K)': [11435400.0, 8576520.0, 5717680.0, 2858840.0],\n    'Etotal/kB (K)': [-721254.0, -501259.0, -328153.0, -160912.0]\n}\n\n# -------------------------------------------------------------------------------------------\n# Extracting positions + building triclinic box from file lines\n# -------------------------------------------------------------------------------------------\ndef extracting_positions(input_file):\n    with open(input_file, 'r') as f:\n        lines = f.readlines()\n\n    # Parse line[0] => a, b, c\n    a_data = lines[0].split()\n    a, b, c = map(float, a_data[:3])\n\n    # Parse line[1] => alpha, beta, gamma\n    alpha_data = lines[1].split()\n    alpha_deg, beta_deg, gamma_deg = map(float, alpha_data[:3])\n\n    # The third line could be total number of atoms or molecules, skip it.\n    raw_atoms = lines[3:]  # positions start from line[3]\n\n    data_list = []\n    for line in raw_atoms:\n        parts = line.strip().split()\n        if len(parts) >= 5:\n            try:\n                x, y, z = map(float, parts[1:4])\n                atom_type = parts[4]\n                data_list.append([x, y, z, atom_type])\n            except ValueError:\n                continue\n\n    columns = [\""X\"", \""Y\"", \""Z\"", \""Atom Type\""]\n    configuration = pd.DataFrame(data_list, columns=columns)\n    configuration.index = range(1, len(configuration) + 1)\n    configuration[\""Molecule\""] = ((configuration.index - 1) // 3) + 1\n\n    # Build box matrix\n    box_matrix = build_box_matrix(a, b, c, alpha_deg, beta_deg, gamma_deg)\n    inv_box_matrix = np.linalg.inv(box_matrix)\n\n    configuration.attrs['box_matrix'] = box_matrix\n    configuration.attrs['inv_box_matrix'] = inv_box_matrix\n\n    # For reference, store raw lengths and angles.\n    configuration.attrs['a'] = a\n    configuration.attrs['b'] = b\n    configuration.attrs['c'] = c\n    configuration.attrs['alpha_deg'] = alpha_deg\n    configuration.attrs['beta_deg'] = beta_deg\n    configuration.attrs['gamma_deg'] = gamma_deg\n\n    return configuration\n\n# -------------------------------------------------------------------------------------------\n# create target dataframes\n# -------------------------------------------------------------------------------------------\ndef creating_dataframes(file_paths, atom_properties, NIST_SPC_E_Water):\n    NIST_SPC_E_Water = pd.DataFrame(NIST_SPC_E_Water)\n    NIST_SPC_E_Water['Sum of energies'] = (\n        NIST_SPC_E_Water['Edisp/kB (K)'] + NIST_SPC_E_Water['ELRC/kB (K)'] +\n        NIST_SPC_E_Water['Ereal/kB (K)'] + NIST_SPC_E_Water['Efourier/kB (K)'] +\n        NIST_SPC_E_Water['Eself/kB (K)'] + NIST_SPC_E_Water['Eintra/kB (K)']\n    )\n\n    force_field = pd.DataFrame(atom_properties).from_dict(atom_properties, orient='index')\n\n    system = pd.DataFrame(file_paths, columns=[\""file_paths\""])\n    system['configuration #'] = (\n        system['file_paths']\n        .str.extract(r'(\\d+)', expand=False)\n        .fillna('0')\n        .astype(int)\n    )\n\n    system[[\""number of particles\"", \""box length\""]] = system[\""configuration #\""].apply(\n        lambda x: pd.Series({\n            \""number of particles\"": float(\n                NIST_SPC_E_Water.loc[\n                    NIST_SPC_E_Water[\""Configuration\""] == x,\n                    \""M (number of SPC/E molecules)\""\n                ].values[0]\n            ) if x in NIST_SPC_E_Water[\""Configuration\""].values else 0.0,\n            \""box length\"": 30.0\n        })\n    )\n\n    system['cutoff'] = 10\n    system['alpha'] = system.apply(\n        lambda row: 5.6 / row['box length'] if row['box length'] != 0 else 0.28,\n        axis=1\n    )\n\n    system['kmax'] = 5\n    system['ε0'] = float(8.854187817E-12)\n    system['kB'] = float(1.3806488E-23)\n\n    return system, force_field, NIST_SPC_E_Water\n\n# -------------------------------------------------------------------------------------------\n# Minimum image for cubic fallback\n# -------------------------------------------------------------------------------------------\ndef minimum_image_distance(r_ij, cell_length):\n    return r_ij - cell_length * np.round(r_ij / cell_length)\n\n# -------------------------------------------------------------------------------------------\n# Triclinic minimum image handling\n# -------------------------------------------------------------------------------------------\ndef triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):\n    frac = inv_box_matrix @ r_vec\n    frac -= np.rint(frac)\n    return box_matrix @ frac\n\n# -------------------------------------------------------------------------------------------\n# Modify pair_dispersion_energy to skip hydrogen-hydrogen or hydrogen-oxygen LJ.\n# Only Oxygen-oxygen LJ is typically used in standard SPC/E.\n# -------------------------------------------------------------------------------------------\ndef pair_dispersion_energy(system_data, configuration, force_field):\n    positions = configuration[['X', 'Y', 'Z']].values\n    atom_types = configuration['Atom Type'].values\n    cutoff = system_data['cutoff']\n    cell_length = system_data['box length']\n    num_atoms = len(positions)\n\n    box_matrix = configuration.attrs.get('box_matrix', None)\n    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)\n\n    total_dispersion_energy = 0.0\n\n    for i in range(num_atoms):\n        for j in range(i + 1, num_atoms):\n            # skip pairs if either atom is 'H'\n            if atom_types[i] == 'H' or atom_types[j] == 'H':\n                continue\n\n            r_ij = positions[i] - positions[j]\n            if box_matrix is not None and inv_box_matrix is not None:\n                r_ij = triclinic_minimum_image_distance(r_ij, box_matrix, inv_box_matrix)\n            else:\n                r_ij = minimum_image_distance(r_ij, cell_length)\n\n            distance = np.linalg.norm(r_ij)\n            if 0 < distance < cutoff:\n                type_i, type_j = atom_types[i], atom_types[j]\n\n                if type_i not in force_field.index or type_j not in force_field.index:\n                    continue\n\n                # Only O-O is relevant here.\n                epsilon_i = force_field.loc[type_i, 'epsilon']\n                epsilon_j = force_field.loc[type_j, 'epsilon']\n                sigma_i = force_field.loc[type_i, 'sigma']\n                sigma_j = force_field.loc[type_j, 'sigma']\n\n                epsilon_ij = math.sqrt(epsilon_i * epsilon_j)\n                sigma_ij = 0.5 * (sigma_i + sigma_j)\n                s_over_r = sigma_ij / distance\n\n                lj = 4.0 * epsilon_ij * (s_over_r**12 - s_over_r**6)\n                total_dispersion_energy += lj\n\n    return total_dispersion_energy\n\n# -------------------------------------------------------------------------------------------\n# Compute LRC but skip hydrogen in the sum\n# -------------------------------------------------------------------------------------------\ndef compute_lrc_energy(system_row, force_field):\n    U_lrc_total = 0.0\n    for atom_type, atom_data in force_field.iterrows():\n        # skip if H\n        if atom_type == 'H':\n            continue\n        num_particles = system_row['number of particles'] * atom_data['num_particles']\n        volume = (system_row['box length'])**3\n        rho = num_particles / volume\n        sigma = atom_data['sigma']\n        epsilon = atom_data['epsilon']\n        cutoff = system_row['cutoff']\n\n        if cutoff <= 0.0:\n            continue\n        sigma_by_cutoff_3 = (sigma / cutoff)**3\n        sigma_by_cutoff_9 = sigma_by_cutoff_3**3\n\n        term = (8.0 / 3.0) * math.pi * rho * epsilon * (sigma**3)\n        term *= (sigma_by_cutoff_9 / 3.0 - sigma_by_cutoff_3)\n        term *= num_particles\n        U_lrc_total += term\n\n    return U_lrc_total\n\n# -------------------------------------------------------------------------------------------\n# Real-space Ewald, skipping intramolecular pairs.\n# -------------------------------------------------------------------------------------------\ndef compute_real_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data[\""alpha\""]\n    cutoff = system_data[\""cutoff\""]\n    L = system_data[\""box length\""]\n\n    box_matrix = configuration.attrs.get('box_matrix', None)\n    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)\n\n    positions = configuration[[\""X\"", \""Y\"", \""Z\""]].values\n    atom_types = configuration[\""Atom Type\""].values\n    mol_ids = configuration[\""Molecule\""].values\n    charges = np.array([force_field.loc[t, \""charge\""] for t in atom_types])\n\n    real_energy = 0.0\n    n_atoms = len(positions)\n\n    def cubic_mi(dr, box_len):\n        dr[0] -= round(dr[0]/box_len)*box_len\n        dr[1] -= round(dr[1]/box_len)*box_len\n        dr[2] -= round(dr[2]/box_len)*box_len\n        return dr\n\n    for j in range(n_atoms - 1):\n        for l in range(j + 1, n_atoms):\n            if mol_ids[j] == mol_ids[l]:\n                # skip intramolecular in real term\n                continue\n\n            dr = positions[l] - positions[j]\n            if box_matrix is not None and inv_box_matrix is not None:\n                dr = triclinic_minimum_image_distance(dr, box_matrix, inv_box_matrix)\n            else:\n                dr = cubic_mi(dr, L)\n\n            r = np.linalg.norm(dr)\n            if r < cutoff and r > 1e-14:\n                qj = charges[j] * e_charge\n                ql = charges[l] * e_charge\n                r_m = r * 1e-10\n                real_energy += coulomb_factor * (qj*ql / r_m) * erfc(alpha*r)\n\n    return real_energy\n\n# -------------------------------------------------------------------------------------------\n# Build reciprocal vectors for Ewald Fourier sums\n# -------------------------------------------------------------------------------------------\ndef build_reciprocal_vectors(box_matrix):\n    inv_t = np.linalg.inv(box_matrix).T\n    return 2.0 * math.pi * inv_t\n\n# -------------------------------------------------------------------------------------------\n# Fourier Ewald term - standard approach\n# -------------------------------------------------------------------------------------------\ndef compute_fourier_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n    alpha = system_data[\""alpha\""]\n    kmax = system_data[\""kmax\""]\n\n    box_matrix = configuration.attrs.get('box_matrix', None)\n    if box_matrix is not None:\n        vol_m3 = abs(np.linalg.det(box_matrix))*(1e-10)**3\n        reciprocal = build_reciprocal_vectors(box_matrix)\n    else:\n        L = system_data[\""box length\""]\n        vol_m3 = (L*1e-10)**3\n        reciprocal = (2.0*math.pi/(L*1e-10))*np.eye(3)\n\n    positions = configuration[[\""X\"", \""Y\"", \""Z\""]].values * 1e-10\n    charges = np.array([force_field.loc[t, \""charge\""] for t in configuration[\""Atom Type\""]])\n    charges_c = charges * e_charge\n\n    prefactor = coulomb_factor/(2.0*vol_m3)\n    alpha_m = alpha*1e10\n\n    fourier_energy = 0.0\n\n    for nx in range(-kmax, kmax+1):\n        for ny in range(-kmax, kmax+1):\n            for nz in range(-kmax, kmax+1):\n                if nx == 0 and ny == 0 and nz == 0:\n                    continue\n\n                k_vec = nx*reciprocal[:,0] + ny*reciprocal[:,1] + nz*reciprocal[:,2]\n                k_sq = np.dot(k_vec, k_vec)\n                if k_sq < 1e-14:\n                    continue\n\n                real_part = 0.0\n                imag_part = 0.0\n                for i, (x, y, z) in enumerate(positions):\n                    kr = k_vec[0]*x + k_vec[1]*y + k_vec[2]*z\n                    real_part += charges_c[i]*math.cos(kr)\n                    imag_part += charges_c[i]*math.sin(kr)\n\n                sk_sq = real_part**2 + imag_part**2\n                exponent = math.exp(-k_sq/(4.0*(alpha_m**2)))\n\n                term = prefactor*(4.0*math.pi/k_sq)*exponent*sk_sq\n                fourier_energy += term\n\n    return fourier_energy\n\n# -------------------------------------------------------------------------------------------\n# Self term - uses standard Ewald expression\n# -------------------------------------------------------------------------------------------\ndef compute_self_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data[\""alpha\""]\n    alpha_m = alpha*1e10\n\n    atom_types = configuration[\""Atom Type\""].values\n    charges = np.array([force_field.loc[t, \""charge\""] for t in atom_types])\n    charges_c = charges*e_charge\n\n    sum_q2 = np.sum(charges_c**2)\n    return -coulomb_factor*(alpha_m/math.sqrt(math.pi))*sum_q2\n\n# -------------------------------------------------------------------------------------------\n# Intramolecular term - we subtract these from total\n# -------------------------------------------------------------------------------------------\ndef compute_intra_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data['alpha']\n    positions = configuration[[\""X\"", \""Y\"", \""Z\""]].values\n    atom_types = configuration[\""Atom Type\""].values\n    charges = np.array([force_field.loc[t, \""charge\""] for t in atom_types])\n    mol_ids = configuration[\""Molecule\""].values\n\n    alpha_dimless = alpha\n    intra_energy = 0.0\n\n    unique_mols = np.unique(mol_ids)\n    for m_id in unique_mols:\n        idxs = np.where(mol_ids == m_id)[0]\n        n_mol_atoms = len(idxs)\n        for i in range(n_mol_atoms - 1):\n            for j in range(i+1, n_mol_atoms):\n                idx_i = idxs[i]\n                idx_j = idxs[j]\n                dx = positions[idx_j,0] - positions[idx_i,0]\n                dy = positions[idx_j,1] - positions[idx_i,1]\n                dz = positions[idx_j,2] - positions[idx_i,2]\n                r = math.sqrt(dx*dx + dy*dy + dz*dz)\n                if r > 1e-14:\n                    qi = charges[idx_i]*e_charge\n                    qj = charges[idx_j]*e_charge\n                    r_m = r*1e-10\n                    val = coulomb_factor*(qi*qj / r_m)*erf(alpha_dimless*r)\n                    intra_energy -= val\n\n    return intra_energy\n\n# -------------------------------------------------------------------------------------------\n# Build dataframes, compute energies, compare\n# -------------------------------------------------------------------------------------------\nsystem, force_field, NIST_SPC_E_Water = creating_dataframes(file_paths, atom_properties, NIST_TRICLINIC_SPC_E_Water)\n\nresults = pd.DataFrame()\nresults['Number of Particles'] = system['number of particles'].astype(int)\n\nresults['lrc_Energies'] = system.apply(\n    lambda row: compute_lrc_energy(row, force_field), axis=1\n)\n\nresults['dispersion_energies'] = system['file_paths'].apply(\n    lambda path: pair_dispersion_energy(\n        system[system['file_paths'] == path].iloc[0],\n        extracting_positions(path),\n        force_field\n    )\n)\n\nresults['real_energies'] = system['file_paths'].apply(\n    lambda path: compute_real_energies(\n        system[system['file_paths'] == path].iloc[0],\n        extracting_positions(path),\n        force_field\n    )\n)\n\nresults['fourier_energies'] = system['file_paths'].apply(\n    lambda path: compute_fourier_energies(\n        system[system['file_paths'] == path].iloc[0],\n        extracting_positions(path),\n        force_field\n    )\n)\n\nresults['self_energies'] = system['file_paths'].apply(\n    lambda path: compute_self_energies(\n        system[system['file_paths'] == path].iloc[0],\n        extracting_positions(path),\n        force_field\n    )\n)\n\nresults['intra_energies'] = system['file_paths'].apply(\n    lambda path: compute_intra_energies(\n        system[system['file_paths'] == path].iloc[0],\n        extracting_positions(path),\n        force_field\n    )\n)\n\n# -------------------------------------------------------------------------------------------\n# compare_LJ_coulomb_energy must remain unchanged\n# -------------------------------------------------------------------------------------------\ndef compare_LJ_coulomb_energy(df1, df2, tolerance=1e-4):\n    df_merged = df1.merge(df2, left_on='Number of Particles', right_on='M (number of SPC/E molecules)', how='left')\n\n    matched_real = matched_fourier = matched_self = matched_intra = 0\n    matched_dispersion = matched_lrc = 0\n    not_matched_real = not_matched_fourier = not_matched_self = not_matched_intra = 0\n    not_matched_dispersion = not_matched_lrc = 0\n\n    real_energy_output, fourier_energy_output = [], []\n    self_energy_output, intra_energy_output = [], []\n    lrc_energy_output, dispersion_energy_output = [], []\n\n    for idx, row in df_merged.iterrows():\n        real_energy = row['real_energies']\n        fourier_energy = row['fourier_energies']\n        self_energy = row['self_energies']\n        intra_energy = row['intra_energies']\n        num_molecules = row['Number of Particles']\n        lrc_energy = row['lrc_Energies']\n        dispersion_energy = row['dispersion_energies']\n\n        if pd.isna(row['Ereal/kB (K)']):\n            continue\n\n        nist_real_energy = float(row['Ereal/kB (K)'])\n        nist_fourier_energy = float(row['Efourier/kB (K)'])\n        nist_self_energy = float(row['Eself/kB (K)'])\n        nist_intra_energy = float(row['Eintra/kB (K)'])\n        nist_lrc_energy = float(row['ELRC/kB (K)'])\n        nist_dispersion_energy = float(row['Edisp/kB (K)'])\n\n        match_real = np.isclose(real_energy, nist_real_energy, atol=tolerance)\n        match_fourier = np.isclose(fourier_energy, nist_fourier_energy, atol=tolerance)\n        match_self = np.isclose(self_energy, nist_self_energy, atol=tolerance)\n        match_intra = np.isclose(intra_energy, nist_intra_energy, atol=tolerance)\n        match_dispersion = np.isclose(dispersion_energy, nist_dispersion_energy, atol=tolerance)\n        match_lrc = np.isclose(lrc_energy, nist_lrc_energy, atol=tolerance)\n\n        matched_real += int(match_real)\n        not_matched_real += int(not match_real)\n        matched_fourier += int(match_fourier)\n        not_matched_fourier += int(not match_fourier)\n        matched_self += int(match_self)\n        not_matched_self += int(not match_self)\n        matched_intra += int(match_intra)\n        not_matched_intra += int(not match_intra)\n        matched_dispersion += int(match_dispersion)\n        not_matched_dispersion += int(not match_dispersion)\n        matched_lrc += int(match_lrc)\n        not_matched_lrc += int(not match_lrc)\n\n        dispersion_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {dispersion_energy:.4E}, NIST: {nist_dispersion_energy:.4E}, Match: {match_dispersion}\"")\n        lrc_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {lrc_energy:.4E}, NIST: {nist_lrc_energy:.4E}, Match: {match_lrc}\"")\n        real_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {real_energy:.4E}, NIST: {nist_real_energy:.4E}, Match: {match_real}\"")\n        fourier_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {fourier_energy:.4E}, NIST: {nist_fourier_energy:.4E}, Match: {match_fourier}\"")\n        self_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {self_energy:.4E}, NIST: {nist_self_energy:.4E}, Match: {match_self}\"")\n        intra_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {intra_energy:.4E}, NIST: {nist_intra_energy:.4E}, Match: {match_intra}\"")\n\n    print()\n    print(\""Lennard-Jones Pair Dispersion Energy Comparison:\"")\n    print(*dispersion_energy_output)\n    print(\""Lennard-Jones long-range corrections Energy Comparison:\"")\n    print(*lrc_energy_output)\n    print(\""Real Energy Comparison:\"")\n    print(*real_energy_output)\n    print(\""Fourier Energy Comparison:\"")\n    print(*fourier_energy_output)\n    print(\""Self Energy Comparison:\"")\n    print(*self_energy_output)\n    print(\""Intra Energy Comparison:\"")\n    print(*intra_energy_output)\n    print()\n    print(f\""Count of correct pairwise answers: {matched_dispersion}\"")\n    print(f\""Count of incorrect pairwise answers: {not_matched_dispersion}\"")\n    print(f\""Count of correct LRC answers: {matched_lrc}\"")\n    print(f\""Count of incorrect LRC answers: {not_matched_lrc}\"")\n    print(f\""Count of correct Real Energy answers: {matched_real}\"")\n    print(f\""Count of incorrect Real Energy answers: {not_matched_real}\"")\n    print(f\""Count of correct Fourier Energy answers: {matched_fourier}\"")\n    print(f\""Count of incorrect Fourier Energy answers: {not_matched_fourier}\"")\n    print(f\""Count of correct Self Energy answers: {matched_self}\"")\n    print(f\""Count of incorrect Self Energy answers: {not_matched_self}\"")\n    print(f\""Count of correct Intra Energy answers: {matched_intra}\"")\n    print(f\""Count of incorrect Intra Energy answers: {not_matched_intra}\"")\n    print()\n    total_correct = matched_real + matched_fourier + matched_self + matched_intra + matched_dispersion + matched_lrc\n    total_incorrect = not_matched_real + not_matched_fourier + not_matched_self + not_matched_intra + not_matched_dispersion + not_matched_lrc\n\n    print(f\""Total correct answers: {total_correct}\"")\n    print(f\""Total incorrect answers: {total_incorrect}\"")\n\n# -------------------------------------------------------------------------------------------\n# Call compare function\n# -------------------------------------------------------------------------------------------\ncompare_LJ_coulomb_energy(results, NIST_TRICLINIC_SPC_E_Water)\n""
}","import numpy as np
import pandas as pd
from scipy.special import erfc,erf
import math 

# defining all variables
atom_properties = {
    'O': {'type': 'O', 'sigma': 3.165558, 'epsilon': 78.197431, 'charge': -0.8476, 'num_particles': 1},
    'H': {'type': 'H', 'sigma': 0.000000, 'epsilon': 0.000000, 'charge': 0.4238, 'num_particles': 2},
}

# Trying for small configurations first
file_paths = [
    #    '../data/spce_sample_config_periodic4.txt',
    #    '../data/spce_sample_config_periodic2.txt',
    #    '../data/spce_sample_config_periodic3.txt',
        '../data/spce-sample-non-cuboid-configurations/spce_triclinic_sample_periodic3.txt'
    ]

NIST_TRICLINIC_SPC_E_Water = {'Configuration': [1, 2, 3, 4],
 'M (number of SPC/E molecules)': [400, 300, 200, 100],
 'Cell Type': ['Triclinic', 'Monoclinic', 'Triclinic', 'Monoclinic'],
 'Cell Side Lengths [a, b, c] (Å)': ['[30 Å, 30 Å, 30 Å]',
  '[27 Å, 30 Å, 36 Å]',
  '[30 Å, 30 Å, 30 Å]',
  '[36 Å, 36 Å, 36 Å]'],
 'Cell Angles [α, β, γ] (degrees)': ['[100°, 95°, 75°]',
  '[90°, 75°, 90°]',
  '[85°, 75°, 80°]',
  '[90°, 60°, 90°]'],
 'Number of Wave Vectors': [831, 1068, 838, 1028],
 'Edisp/kB (K)': [111992.0, 43286.0, 14403.3, 25025.1],
 'ELRC/kB (K)': [-4109.19, -2105.61, -1027.3, -163.091],
 'Ereal/kB (K)': [-727219.0, -476902.0, -297129.0, -171462.0],
 'Efourier/kB (K)': [44677.0, 44409.4, 28897.4, 22337.2],
 'Eself/kB (K)': [-11582000.0, -8686470.0, -5790980.0, -2895490.0],
 'Eintra/kB (K)': [11435400.0, 8576520.0, 5717680.0, 2858840.0],
 'Etotal/kB (K)': [-721254.0, -501259.0, -328153.0, -160912.0]}

# Data processing




def extracting_positions(input_file):
        # Extract the positions from the .xyz file
    with open(input_file, ""r"") as file:
        lines = file.readlines()

    data_lines = lines[2:]

    data_list = []
    for line in data_lines:
        stripped_line = line.strip()
        parts = stripped_line.split()
        if len(parts) >= 5:  
            try:
                x, y, z = map(float, parts[1:4])
                atom_type = parts[4]
                data_list.append([x, y, z, atom_type])
            except ValueError:
                continue  

    # Create a DataFrame with all configurations
    columns = [""X"", ""Y"", ""Z"", ""Atom Type""]
    configuration = pd.DataFrame(data_list, columns=columns)

    configuration.index = range(1, len(configuration) + 1)

    configuration[""Molecule""] = ((configuration.index - 1) // 3) + 1
    
    return configuration

# create the target dataframes
def creating_dataframes(file_paths, atom_properties, NIST_SPC_E_Water):
    NIST_SPC_E_Water = pd.DataFrame(NIST_SPC_E_Water)
    NIST_SPC_E_Water['Sum of energies'] = (
        NIST_SPC_E_Water['Edisp/kB (K)'] + NIST_SPC_E_Water['ELRC/kB (K)'] +
        NIST_SPC_E_Water['Ereal/kB (K)'] + NIST_SPC_E_Water['Efourier/kB (K)'] +
        NIST_SPC_E_Water['Eself/kB (K)'] + NIST_SPC_E_Water['Eintra/kB (K)']
    )

    force_field = pd.DataFrame(atom_properties).from_dict(atom_properties, orient='index')

    system = pd.DataFrame(file_paths, columns=[""file_paths""])
    system['configuration #'] = (
        system['file_paths']
        .str.extract(r'(\d+)', expand=False)
        .fillna('0')
        .astype(int)
    )

    system[[""number of particles"", ""box length""]] = system[""configuration #""].apply(
        lambda x: pd.Series({
            ""number of particles"": float(
                NIST_SPC_E_Water.loc[
                    NIST_SPC_E_Water[""Configuration""] == x,
                    ""M (number of SPC/E molecules)""
                ].values[0]
            ) if x in NIST_SPC_E_Water[""Configuration""].values else 0.0,
            ""box length"": 30.0
        })
    )

    system['cutoff'] = 10
    system['alpha'] = system.apply(
        lambda row: 5.6 / row['box length'] if row['box length'] != 0 else 0.28,
        axis=1
    )

    system['kmax'] = 5
    system['ε0'] = float(8.854187817E-12)
    system['kB'] = float(1.3806488E-23)

    return system, force_field, NIST_SPC_E_Water

# pairwise dispersion energy functions

# Minimum Image Distance function and Pair Dispersion Energy calculation (Code 3)
def minimum_image_distance(r_ij, cell_length):
    return r_ij - cell_length * np.round(r_ij / cell_length)

# pairwise dispersion energy operation
def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    frac = inv_box_matrix @ r_vec
    frac -= np.rint(frac)
    return box_matrix @ frac

def pair_dispersion_energy(system_data, configuration, force_field):
    positions = configuration[['X', 'Y', 'Z']].values
    atom_types = configuration['Atom Type'].values
    cutoff = system_data['cutoff']
    cell_length = system_data['box length']
    num_atoms = len(positions)

    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    total_dispersion_energy = 0.0

    for i in range(num_atoms):
        for j in range(i + 1, num_atoms):
            # skip pairs if either atom is 'H'
            if atom_types[i] == 'H' or atom_types[j] == 'H':
                continue

            r_ij = positions[i] - positions[j]
            if box_matrix is not None and inv_box_matrix is not None:
                r_ij = triclinic_minimum_image_distance(r_ij, box_matrix, inv_box_matrix)
            else:
                r_ij = minimum_image_distance(r_ij, cell_length)

            distance = np.linalg.norm(r_ij)
            if 0 < distance < cutoff:
                type_i, type_j = atom_types[i], atom_types[j]

                if type_i not in force_field.index or type_j not in force_field.index:
                    continue

                # Only O-O is relevant here.
                epsilon_i = force_field.loc[type_i, 'epsilon']
                epsilon_j = force_field.loc[type_j, 'epsilon']
                sigma_i = force_field.loc[type_i, 'sigma']
                sigma_j = force_field.loc[type_j, 'sigma']

                epsilon_ij = math.sqrt(epsilon_i * epsilon_j)
                sigma_ij = 0.5 * (sigma_i + sigma_j)
                s_over_r = sigma_ij / distance

                lj = 4.0 * epsilon_ij * (s_over_r**12 - s_over_r**6)
                total_dispersion_energy += lj

    return total_dispersion_energy

# Compute LRC energy
def compute_lrc_energy(system_row, force_field):
    U_lrc_total = 0.0
    for atom_type, atom_data in force_field.iterrows():
        # skip if H
        if atom_type == 'H':
            continue
        num_particles = system_row['number of particles'] * atom_data['num_particles']
        volume = (system_row['box length'])**3
        rho = num_particles / volume
        sigma = atom_data['sigma']
        epsilon = atom_data['epsilon']
        cutoff = system_row['cutoff']

        if cutoff <= 0.0:
            continue
        sigma_by_cutoff_3 = (sigma / cutoff)**3
        sigma_by_cutoff_9 = sigma_by_cutoff_3**3

        term = (8.0 / 3.0) * math.pi * rho * epsilon * (sigma**3)
        term *= (sigma_by_cutoff_9 / 3.0 - sigma_by_cutoff_3)
        term *= num_particles
        U_lrc_total += term

    return U_lrc_total

def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    frac = inv_box_matrix @ r_vec
    frac -= np.rint(frac)
    return box_matrix @ frac

def compute_real_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    cutoff = system_data[""cutoff""]
    L = system_data[""box length""]

    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    mol_ids = configuration[""Molecule""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])

    real_energy = 0.0
    n_atoms = len(positions)

    def cubic_mi(dr, box_len):
        dr[0] -= round(dr[0]/box_len)*box_len
        dr[1] -= round(dr[1]/box_len)*box_len
        dr[2] -= round(dr[2]/box_len)*box_len
        return dr

    for j in range(n_atoms - 1):
        for l in range(j + 1, n_atoms):
            if mol_ids[j] == mol_ids[l]:
                # skip intramolecular in real term
                continue

            dr = positions[l] - positions[j]
            if box_matrix is not None and inv_box_matrix is not None:
                dr = triclinic_minimum_image_distance(dr, box_matrix, inv_box_matrix)
            else:
                dr = cubic_mi(dr, L)

            r = np.linalg.norm(dr)
            if r < cutoff and r > 1e-14:
                qj = charges[j] * e_charge
                ql = charges[l] * e_charge
                r_m = r * 1e-10
                real_energy += coulomb_factor * (qj*ql / r_m) * erfc(alpha*r)

    return real_energy

def build_reciprocal_vectors(box_matrix):
    inv_t = np.linalg.inv(box_matrix).T
    return 2.0 * math.pi * inv_t

def compute_fourier_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23
    alpha = system_data[""alpha""]
    kmax = system_data[""kmax""]

    box_matrix = configuration.attrs.get('box_matrix', None)
    if box_matrix is not None:
        vol_m3 = abs(np.linalg.det(box_matrix))*(1e-10)**3
        reciprocal = build_reciprocal_vectors(box_matrix)
    else:
        L = system_data[""box length""]
        vol_m3 = (L*1e-10)**3
        reciprocal = (2.0*math.pi/(L*1e-10))*np.eye(3)

    positions = configuration[[""X"", ""Y"", ""Z""]].values * 1e-10
    charges = np.array([force_field.loc[t, ""charge""] for t in configuration[""Atom Type""]])
    charges_c = charges * e_charge

    prefactor = coulomb_factor/(2.0*vol_m3)
    alpha_m = alpha*1e10

    fourier_energy = 0.0

    for nx in range(-kmax, kmax+1):
        for ny in range(-kmax, kmax+1):
            for nz in range(-kmax, kmax+1):
                if nx == 0 and ny == 0 and nz == 0:
                    continue

                k_vec = nx*reciprocal[:,0] + ny*reciprocal[:,1] + nz*reciprocal[:,2]
                k_sq = np.dot(k_vec, k_vec)
                if k_sq < 1e-14:
                    continue

                real_part = 0.0
                imag_part = 0.0
                for i, (x, y, z) in enumerate(positions):
                    kr = k_vec[0]*x + k_vec[1]*y + k_vec[2]*z
                    real_part += charges_c[i]*math.cos(kr)
                    imag_part += charges_c[i]*math.sin(kr)

                sk_sq = real_part**2 + imag_part**2
                exponent = math.exp(-k_sq/(4.0*(alpha_m**2)))

                term = prefactor*(4.0*math.pi/k_sq)*exponent*sk_sq
                fourier_energy += term

    return fourier_energy


def compute_self_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    alpha_m = alpha*1e10

    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])
    charges_c = charges*e_charge

    sum_q2 = np.sum(charges_c**2)
    return -coulomb_factor*(alpha_m/math.sqrt(math.pi))*sum_q2


def compute_intra_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data['alpha']
    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])
    mol_ids = configuration[""Molecule""].values

    alpha_dimless = alpha
    intra_energy = 0.0

    unique_mols = np.unique(mol_ids)
    for m_id in unique_mols:
        idxs = np.where(mol_ids == m_id)[0]
        n_mol_atoms = len(idxs)
        for i in range(n_mol_atoms - 1):
            for j in range(i+1, n_mol_atoms):
                idx_i = idxs[i]
                idx_j = idxs[j]
                dx = positions[idx_j,0] - positions[idx_i,0]
                dy = positions[idx_j,1] - positions[idx_i,1]
                dz = positions[idx_j,2] - positions[idx_i,2]
                r = math.sqrt(dx*dx + dy*dy + dz*dz)
                if r > 1e-14:
                    qi = charges[idx_i]*e_charge
                    qj = charges[idx_j]*e_charge
                    r_m = r*1e-10
                    val = coulomb_factor*(qi*qj / r_m)*erf(alpha_dimless*r)
                    intra_energy -= val

    return intra_energy


# DataFrame Descriptions:

# 1. NIST_TRICLINIC_SPC_E_Water DataFrame:
#    - Contains thermodynamic properties of SPC/E water configurations in both triclinic and monoclinic cells.
#    - Columns:
#        - 'Configuration' (int): Configuration ID (1-4).
#        - 'M (number of SPC/E molecules)' (int): Number of SPC/E molecules in the system.
#        - 'Cell Type' (str): Type of the cell (e.g., Triclinic, Monoclinic).
#        - 'Cell Side Lengths [a, b, c] (Å)' (list of strings): Cell side lengths in Ångströms.
#        - 'Cell Angles [α, β, γ] (degrees)' (list of strings): Cell angles in degrees.
#        - 'Number of Wave Vectors' (int): The number of wave vectors for each configuration.
#        - 'Edisp/kB (K)' (float): Dispersion energy in Kelvin.
#        - 'ELRC/kB (K)' (float): Long-range correction energy in Kelvin.
#        - 'Ereal/kB (K)' (float): Real energy in Kelvin.
#        - 'Efourier/kB (K)' (float): Fourier transform energy in Kelvin.
#        - 'Eself/kB (K)' (float): Self-interaction energy in Kelvin.
#        - 'Eintra/kB (K)' (float): Intra-molecular energy in Kelvin.
#        - 'Etotal/kB (K)' (float): Total energy in Kelvin.

# 2. force_field DataFrame:
#    - Contains force field parameters for SPC/E water, specifically for oxygen ('O') and hydrogen ('H').
#    - Columns:
#        - 'type' (str): Atom type ('O' or 'H').
#        - 'sigma' (float): Lennard-Jones parameter (Å).
#        - 'epsilon' (float): Lennard-Jones well depth (K).
#        - 'charge' (float): Partial charge (e).
#        - 'num_particles' (int): Number of particles per molecule.

# 3. system DataFrame:
#    - Contains metadata about each system configuration.
#    - Columns:
#        - 'file_paths' (str): File names containing atomic configurations.
#        - 'configuration #' (int): Extracted configuration number (1-4).
#        - 'number of particles' (float): Number of molecules (from 'NIST_SPC_E_Water').
#        - 'box length' (float): Box dimensions (from 'NIST_SPC_E_Water').
#        - 'cutoff' (int): Fixed cutoff distance for interactions (10 Å).
#        - 'alpha' (float): Ewald summation parameter (5.6 / min(a, b, c)).
#        - 'kmax' (int): Maximum wave vector index (5); also, only include k for which k² < kmax² + 2, i.e., k² < 27.
#        - 'ε0' (float): Permittivity of Vacuum (8.854187817E-12 C²/(J m)).
#        - 'kB' (float): Boltzmann Constant (1.3806488E-23 J/K).

# 4. configuration DataFrame (from 'extracting_positions'):
#    - Created per file, containing atomic positions.
#    - Columns:
#        - 'X' (float): Atom coordinates in Ångströms.
#        - 'Y' (float): Atom coordinates in Ångströms.
#        - 'Z' (float): Atom coordinates in Ångströms.
#        - 'Atom Type' (str): Type of atom ('O' or 'H').
#        - 'Molecule' (int): Molecule index assigned based on position.


system, force_field, NIST_TRICLINIC_SPC_E_Water = creating_dataframes(file_paths, atom_properties,NIST_TRICLINIC_SPC_E_Water)

# Computing energies storing in results
results = pd.DataFrame()

results['Number of Particles'] = system['number of particles'].astype(int)

# Calculate LRC energy for all system configurations
results['lrc_Energies'] = system.apply(
    lambda row: compute_lrc_energy(row, force_field), axis=1
)

# Calculate pairwise energy for all system configurations
results['dispersion_energies'] = system['file_paths'].apply(
    lambda file_path: pair_dispersion_energy(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path), 
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['real_energies'] = system['file_paths'].apply(
    lambda file_path: compute_real_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['fourier_energies'] = system['file_paths'].apply(
    lambda file_path: compute_fourier_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['self_energies'] = system['file_paths'].apply(
    lambda file_path: compute_self_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['intra_energies'] = system['file_paths'].apply(
    lambda file_path: compute_intra_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

def compare_LJ_coulomb_energy(df1, df2, tolerance=1e-4):
    df_merged = df1.merge(df2, left_on='Number of Particles', right_on='M (number of SPC/E molecules)', how='left')

    matched_real = matched_fourier = matched_self = matched_intra = 0
    matched_dispersion = matched_lrc = 0
    not_matched_real = not_matched_fourier = not_matched_self = not_matched_intra = 0
    not_matched_dispersion = not_matched_lrc = 0

    real_energy_output, fourier_energy_output = [], []
    self_energy_output, intra_energy_output = [], []
    lrc_energy_output, dispersion_energy_output = [], []

    for idx, row in df_merged.iterrows():
        real_energy = row['real_energies']
        fourier_energy = row['fourier_energies']
        self_energy = row['self_energies']
        intra_energy = row['intra_energies']
        num_molecules = row['Number of Particles']
        lrc_energy = row['lrc_Energies']
        dispersion_energy = row['dispersion_energies']

        if pd.isna(row['Ereal/kB (K)']):
            continue

        nist_real_energy = float(row['Ereal/kB (K)'])
        nist_fourier_energy = float(row['Efourier/kB (K)'])
        nist_self_energy = float(row['Eself/kB (K)'])
        nist_intra_energy = float(row['Eintra/kB (K)'])
        nist_lrc_energy = float(row['ELRC/kB (K)'])
        nist_dispersion_energy = float(row['Edisp/kB (K)'])

        match_real = np.isclose(real_energy, nist_real_energy, atol=tolerance)
        match_fourier = np.isclose(fourier_energy, nist_fourier_energy, atol=tolerance)
        match_self = np.isclose(self_energy, nist_self_energy, atol=tolerance)
        match_intra = np.isclose(intra_energy, nist_intra_energy, atol=tolerance)
        match_dispersion = np.isclose(dispersion_energy, nist_dispersion_energy, atol=tolerance)
        match_lrc = np.isclose(lrc_energy, nist_lrc_energy, atol=tolerance)

        matched_real += int(match_real)
        not_matched_real += int(not match_real)
        matched_fourier += int(match_fourier)
        not_matched_fourier += int(not match_fourier)
        matched_self += int(match_self)
        not_matched_self += int(not match_self)
        matched_intra += int(match_intra)
        not_matched_intra += int(not match_intra)
        matched_dispersion += int(match_dispersion)
        not_matched_dispersion += int(not match_dispersion)
        matched_lrc += int(match_lrc)
        not_matched_lrc += int(not match_lrc)

        dispersion_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {dispersion_energy:.4E}, NIST: {nist_dispersion_energy:.4E}, Match: {match_dispersion}"")
        lrc_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {lrc_energy:.4E}, NIST: {nist_lrc_energy:.4E}, Match: {match_lrc}"")
        real_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {real_energy:.4E}, NIST: {nist_real_energy:.4E}, Match: {match_real}"")
        fourier_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {fourier_energy:.4E}, NIST: {nist_fourier_energy:.4E}, Match: {match_fourier}"")
        self_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {self_energy:.4E}, NIST: {nist_self_energy:.4E}, Match: {match_self}"")
        intra_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {intra_energy:.4E}, NIST: {nist_intra_energy:.4E}, Match: {match_intra}"")

    print()
    print(""Lennard-Jones Pair Dispersion Energy Comparison:"")
    print(*dispersion_energy_output)
    print(""Lennard-Jones long-range corrections Energy Comparison:"")
    print(*lrc_energy_output)
    print(""Real Energy Comparison:"")
    print(*real_energy_output)
    print(""Fourier Energy Comparison:"")
    print(*fourier_energy_output)
    print(""Self Energy Comparison:"")
    print(*self_energy_output)
    print(""Intra Energy Comparison:"")
    print(*intra_energy_output)
    print()
    print(f""Count of correct pairwise answers: {matched_dispersion}"")
    print(f""Count of incorrect pairwise answers: {not_matched_dispersion}"")
    print(f""Count of correct LRC answers: {matched_lrc}"")
    print(f""Count of incorrect LRC answers: {not_matched_lrc}"")
    print(f""Count of correct Real Energy answers: {matched_real}"")
    print(f""Count of incorrect Real Energy answers: {not_matched_real}"")
    print(f""Count of correct Fourier Energy answers: {matched_fourier}"")
    print(f""Count of incorrect Fourier Energy answers: {not_matched_fourier}"")
    print(f""Count of correct Self Energy answers: {matched_self}"")
    print(f""Count of incorrect Self Energy answers: {not_matched_self}"")
    print(f""Count of correct Intra Energy answers: {matched_intra}"")
    print(f""Count of incorrect Intra Energy answers: {not_matched_intra}"")
    print()
    total_correct = matched_real + matched_fourier + matched_self + matched_intra + matched_dispersion + matched_lrc
    total_incorrect = not_matched_real + not_matched_fourier + not_matched_self + not_matched_intra + not_matched_dispersion + not_matched_lrc

    print(f""Total correct answers: {total_correct}"")
    print(f""Total incorrect answers: {total_incorrect}"")


# calling compare_coulomb_energy function
compare_LJ_coulomb_energy(results, NIST_TRICLINIC_SPC_E_Water)"
1,4,2025-03-24_18:07:57,o1,high,short,"Result from the code generated:
Your code hasn't yet passed all of the NIST benchmark tests. Here's the current progress:

Lennard-Jones Pair Dispersion Energy Comparison:
Test 1 (200 molecules): Computed: 9.3763E+04, NIST: 1.4403E+04, Match: False
Lennard-Jones long-range corrections Energy Comparison:
Test 1 (200 molecules): Computed: -9.7626E+02, NIST: -1.0273E+03, Match: False
Real Energy Comparison:
Test 1 (200 molecules): Computed: -3.1845E+05, NIST: -2.9713E+05, Match: False
Fourier Energy Comparison:
Test 1 (200 molecules): Computed: 2.7448E+04, NIST: 2.8897E+04, Match: False
Self Energy Comparison:
Test 1 (200 molecules): Computed: -3.7929E+06, NIST: -5.7910E+06, Match: False
Intra Energy Comparison:
Test 1 (200 molecules): Computed: 3.6075E+06, NIST: 5.7177E+06, Match: False

Count of correct pairwise answers: 0
Count of incorrect pairwise answers: 1
Count of correct LRC answers: 0
Count of incorrect LRC answers: 1
Count of correct Real Energy answers: 0
Count of incorrect Real Energy answers: 1
Count of correct Fourier Energy answers: 0
Count of incorrect Fourier Energy answers: 1
Count of correct Self Energy answers: 0
Count of incorrect Self Energy answers: 1
Count of correct Intra Energy answers: 0
Count of incorrect Intra Energy answers: 1

Total correct answers: 0
Total incorrect answers: 6

Out of the tests, 0 answers have been correct, with 6 remaining. 
Keep going – you're getting closer! Continue refining the code step by step until it passes all the tests.

Complete each function sequentially, incorporating feedback to optimize efficiency and align with NIST benchmarks. Aim to match the benchmark values as closely as possible with each attempt, ensuring visible numerical improvements. Refer to the context and revise accordingly.Warning: You have 1 iteration left before the loop will stop due to repeated output. This is your last chance to refine your solution. Take a moment to understand the problem thoroughly and ensure you're producing the best possible output. We believe you can do it!","Please find the code generated in iteration 4. You have 2 iterations left to complete the code for Coulombic contributions using the traditional Ewald Summation Method for given triclinic or monoclinic configurations data.

import numpy as np
import pandas as pd
from scipy.special import erfc,erf
import math 

# defining all variables
atom_properties = {
    'O': {'type': 'O', 'sigma': 3.165558, 'epsilon': 78.197431, 'charge': -0.8476, 'num_particles': 1},
    'H': {'type': 'H', 'sigma': 0.000000, 'epsilon': 0.000000, 'charge': 0.4238, 'num_particles': 2},
}

# Trying for small configurations first
file_paths = [
    #    '../data/spce_sample_config_periodic4.txt',
    #    '../data/spce_sample_config_periodic2.txt',
    #    '../data/spce_sample_config_periodic3.txt',
        '../data/spce-sample-non-cuboid-configurations/spce_triclinic_sample_periodic3.txt'
    ]

NIST_TRICLINIC_SPC_E_Water = {'Configuration': [1, 2, 3, 4],
 'M (number of SPC/E molecules)': [400, 300, 200, 100],
 'Cell Type': ['Triclinic', 'Monoclinic', 'Triclinic', 'Monoclinic'],
 'Cell Side Lengths [a, b, c] (Å)': ['[30 Å, 30 Å, 30 Å]',
  '[27 Å, 30 Å, 36 Å]',
  '[30 Å, 30 Å, 30 Å]',
  '[36 Å, 36 Å, 36 Å]'],
 'Cell Angles [α, β, γ] (degrees)': ['[100°, 95°, 75°]',
  '[90°, 75°, 90°]',
  '[85°, 75°, 80°]',
  '[90°, 60°, 90°]'],
 'Number of Wave Vectors': [831, 1068, 838, 1028],
 'Edisp/kB (K)': [111992.0, 43286.0, 14403.3, 25025.1],
 'ELRC/kB (K)': [-4109.19, -2105.61, -1027.3, -163.091],
 'Ereal/kB (K)': [-727219.0, -476902.0, -297129.0, -171462.0],
 'Efourier/kB (K)': [44677.0, 44409.4, 28897.4, 22337.2],
 'Eself/kB (K)': [-11582000.0, -8686470.0, -5790980.0, -2895490.0],
 'Eintra/kB (K)': [11435400.0, 8576520.0, 5717680.0, 2858840.0],
 'Etotal/kB (K)': [-721254.0, -501259.0, -328153.0, -160912.0]}

# Data processing




def extracting_positions(input_file):
        # Extract the positions from the .xyz file
    with open(input_file, ""r"") as file:
        lines = file.readlines()

    data_lines = lines[2:]

    data_list = []
    for line in data_lines:
        stripped_line = line.strip()
        parts = stripped_line.split()
        if len(parts) >= 5:  
            try:
                x, y, z = map(float, parts[1:4])
                atom_type = parts[4]
                data_list.append([x, y, z, atom_type])
            except ValueError:
                continue  

    # Create a DataFrame with all configurations
    columns = [""X"", ""Y"", ""Z"", ""Atom Type""]
    configuration = pd.DataFrame(data_list, columns=columns)

    configuration.index = range(1, len(configuration) + 1)

    configuration[""Molecule""] = ((configuration.index - 1) // 3) + 1
    
    return configuration

# create the target dataframes
def creating_dataframes(file_paths, atom_properties, NIST_SPC_E_Water):
    NIST_SPC_E_Water = pd.DataFrame(NIST_SPC_E_Water)
    NIST_SPC_E_Water['Sum of energies'] = (
        NIST_SPC_E_Water['Edisp/kB (K)'] + NIST_SPC_E_Water['ELRC/kB (K)'] +
        NIST_SPC_E_Water['Ereal/kB (K)'] + NIST_SPC_E_Water['Efourier/kB (K)'] +
        NIST_SPC_E_Water['Eself/kB (K)'] + NIST_SPC_E_Water['Eintra/kB (K)']
    )

    force_field = pd.DataFrame(atom_properties).from_dict(atom_properties, orient='index')

    system = pd.DataFrame(file_paths, columns=[""file_paths""])
    system['configuration #'] = (
        system['file_paths']
        .str.extract(r'(\d+)', expand=False)
        .fillna('0')
        .astype(int)
    )

    system[[""number of particles"", ""box length""]] = system[""configuration #""].apply(
        lambda x: pd.Series({
            ""number of particles"": float(
                NIST_SPC_E_Water.loc[
                    NIST_SPC_E_Water[""Configuration""] == x,
                    ""M (number of SPC/E molecules)""
                ].values[0]
            ) if x in NIST_SPC_E_Water[""Configuration""].values else 0.0,
            ""box length"": 30.0
        })
    )

    system['cutoff'] = 10
    system['alpha'] = system.apply(
        lambda row: 5.6 / row['box length'] if row['box length'] != 0 else 0.28,
        axis=1
    )

    system['kmax'] = 5
    system['ε0'] = float(8.854187817E-12)
    system['kB'] = float(1.3806488E-23)

    return system, force_field, NIST_SPC_E_Water

# pairwise dispersion energy functions

# Minimum Image Distance function and Pair Dispersion Energy calculation (Code 3)
def minimum_image_distance(r_ij, cell_length):
    return r_ij - cell_length * np.round(r_ij / cell_length)

# pairwise dispersion energy operation
def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    frac = inv_box_matrix @ r_vec
    frac -= np.rint(frac)
    return box_matrix @ frac

def pair_dispersion_energy(system_data, configuration, force_field):
    positions = configuration[['X', 'Y', 'Z']].values
    atom_types = configuration['Atom Type'].values
    cutoff = system_data['cutoff']
    cell_length = system_data['box length']
    num_atoms = len(positions)

    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    total_dispersion_energy = 0.0

    for i in range(num_atoms):
        for j in range(i + 1, num_atoms):
            # skip pairs if either atom is 'H'
            if atom_types[i] == 'H' or atom_types[j] == 'H':
                continue

            r_ij = positions[i] - positions[j]
            if box_matrix is not None and inv_box_matrix is not None:
                r_ij = triclinic_minimum_image_distance(r_ij, box_matrix, inv_box_matrix)
            else:
                r_ij = minimum_image_distance(r_ij, cell_length)

            distance = np.linalg.norm(r_ij)
            if 0 < distance < cutoff:
                type_i, type_j = atom_types[i], atom_types[j]

                if type_i not in force_field.index or type_j not in force_field.index:
                    continue

                # Only O-O is relevant here.
                epsilon_i = force_field.loc[type_i, 'epsilon']
                epsilon_j = force_field.loc[type_j, 'epsilon']
                sigma_i = force_field.loc[type_i, 'sigma']
                sigma_j = force_field.loc[type_j, 'sigma']

                epsilon_ij = math.sqrt(epsilon_i * epsilon_j)
                sigma_ij = 0.5 * (sigma_i + sigma_j)
                s_over_r = sigma_ij / distance

                lj = 4.0 * epsilon_ij * (s_over_r**12 - s_over_r**6)
                total_dispersion_energy += lj

    return total_dispersion_energy

# Compute LRC energy
def compute_lrc_energy(system_row, force_field):
    U_lrc_total = 0.0
    for atom_type, atom_data in force_field.iterrows():
        # skip if H
        if atom_type == 'H':
            continue
        num_particles = system_row['number of particles'] * atom_data['num_particles']
        volume = (system_row['box length'])**3
        rho = num_particles / volume
        sigma = atom_data['sigma']
        epsilon = atom_data['epsilon']
        cutoff = system_row['cutoff']

        if cutoff <= 0.0:
            continue
        sigma_by_cutoff_3 = (sigma / cutoff)**3
        sigma_by_cutoff_9 = sigma_by_cutoff_3**3

        term = (8.0 / 3.0) * math.pi * rho * epsilon * (sigma**3)
        term *= (sigma_by_cutoff_9 / 3.0 - sigma_by_cutoff_3)
        term *= num_particles
        U_lrc_total += term

    return U_lrc_total

def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    frac = inv_box_matrix @ r_vec
    frac -= np.rint(frac)
    return box_matrix @ frac

def compute_real_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    cutoff = system_data[""cutoff""]
    L = system_data[""box length""]

    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    mol_ids = configuration[""Molecule""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])

    real_energy = 0.0
    n_atoms = len(positions)

    def cubic_mi(dr, box_len):
        dr[0] -= round(dr[0]/box_len)*box_len
        dr[1] -= round(dr[1]/box_len)*box_len
        dr[2] -= round(dr[2]/box_len)*box_len
        return dr

    for j in range(n_atoms - 1):
        for l in range(j + 1, n_atoms):
            if mol_ids[j] == mol_ids[l]:
                # skip intramolecular in real term
                continue

            dr = positions[l] - positions[j]
            if box_matrix is not None and inv_box_matrix is not None:
                dr = triclinic_minimum_image_distance(dr, box_matrix, inv_box_matrix)
            else:
                dr = cubic_mi(dr, L)

            r = np.linalg.norm(dr)
            if r < cutoff and r > 1e-14:
                qj = charges[j] * e_charge
                ql = charges[l] * e_charge
                r_m = r * 1e-10
                real_energy += coulomb_factor * (qj*ql / r_m) * erfc(alpha*r)

    return real_energy

def build_reciprocal_vectors(box_matrix):
    inv_t = np.linalg.inv(box_matrix).T
    return 2.0 * math.pi * inv_t

def compute_fourier_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23
    alpha = system_data[""alpha""]
    kmax = system_data[""kmax""]

    box_matrix = configuration.attrs.get('box_matrix', None)
    if box_matrix is not None:
        vol_m3 = abs(np.linalg.det(box_matrix))*(1e-10)**3
        reciprocal = build_reciprocal_vectors(box_matrix)
    else:
        L = system_data[""box length""]
        vol_m3 = (L*1e-10)**3
        reciprocal = (2.0*math.pi/(L*1e-10))*np.eye(3)

    positions = configuration[[""X"", ""Y"", ""Z""]].values * 1e-10
    charges = np.array([force_field.loc[t, ""charge""] for t in configuration[""Atom Type""]])
    charges_c = charges * e_charge

    prefactor = coulomb_factor/(2.0*vol_m3)
    alpha_m = alpha*1e10

    fourier_energy = 0.0

    for nx in range(-kmax, kmax+1):
        for ny in range(-kmax, kmax+1):
            for nz in range(-kmax, kmax+1):
                if nx == 0 and ny == 0 and nz == 0:
                    continue

                k_vec = nx*reciprocal[:,0] + ny*reciprocal[:,1] + nz*reciprocal[:,2]
                k_sq = np.dot(k_vec, k_vec)
                if k_sq < 1e-14:
                    continue

                real_part = 0.0
                imag_part = 0.0
                for i, (x, y, z) in enumerate(positions):
                    kr = k_vec[0]*x + k_vec[1]*y + k_vec[2]*z
                    real_part += charges_c[i]*math.cos(kr)
                    imag_part += charges_c[i]*math.sin(kr)

                sk_sq = real_part**2 + imag_part**2
                exponent = math.exp(-k_sq/(4.0*(alpha_m**2)))

                term = prefactor*(4.0*math.pi/k_sq)*exponent*sk_sq
                fourier_energy += term

    return fourier_energy


def compute_self_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data[""alpha""]
    alpha_m = alpha*1e10

    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])
    charges_c = charges*e_charge

    sum_q2 = np.sum(charges_c**2)
    return -coulomb_factor*(alpha_m/math.sqrt(math.pi))*sum_q2


def compute_intra_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data['alpha']
    positions = configuration[[""X"", ""Y"", ""Z""]].values
    atom_types = configuration[""Atom Type""].values
    charges = np.array([force_field.loc[t, ""charge""] for t in atom_types])
    mol_ids = configuration[""Molecule""].values

    alpha_dimless = alpha
    intra_energy = 0.0

    unique_mols = np.unique(mol_ids)
    for m_id in unique_mols:
        idxs = np.where(mol_ids == m_id)[0]
        n_mol_atoms = len(idxs)
        for i in range(n_mol_atoms - 1):
            for j in range(i+1, n_mol_atoms):
                idx_i = idxs[i]
                idx_j = idxs[j]
                dx = positions[idx_j,0] - positions[idx_i,0]
                dy = positions[idx_j,1] - positions[idx_i,1]
                dz = positions[idx_j,2] - positions[idx_i,2]
                r = math.sqrt(dx*dx + dy*dy + dz*dz)
                if r > 1e-14:
                    qi = charges[idx_i]*e_charge
                    qj = charges[idx_j]*e_charge
                    r_m = r*1e-10
                    val = coulomb_factor*(qi*qj / r_m)*erf(alpha_dimless*r)
                    intra_energy -= val

    return intra_energy


# DataFrame Descriptions:

# 1. NIST_TRICLINIC_SPC_E_Water DataFrame:
#    - Contains thermodynamic properties of SPC/E water configurations in both triclinic and monoclinic cells.
#    - Columns:
#        - 'Configuration' (int): Configuration ID (1-4).
#        - 'M (number of SPC/E molecules)' (int): Number of SPC/E molecules in the system.
#        - 'Cell Type' (str): Type of the cell (e.g., Triclinic, Monoclinic).
#        - 'Cell Side Lengths [a, b, c] (Å)' (list of strings): Cell side lengths in Ångströms.
#        - 'Cell Angles [α, β, γ] (degrees)' (list of strings): Cell angles in degrees.
#        - 'Number of Wave Vectors' (int): The number of wave vectors for each configuration.
#        - 'Edisp/kB (K)' (float): Dispersion energy in Kelvin.
#        - 'ELRC/kB (K)' (float): Long-range correction energy in Kelvin.
#        - 'Ereal/kB (K)' (float): Real energy in Kelvin.
#        - 'Efourier/kB (K)' (float): Fourier transform energy in Kelvin.
#        - 'Eself/kB (K)' (float): Self-interaction energy in Kelvin.
#        - 'Eintra/kB (K)' (float): Intra-molecular energy in Kelvin.
#        - 'Etotal/kB (K)' (float): Total energy in Kelvin.

# 2. force_field DataFrame:
#    - Contains force field parameters for SPC/E water, specifically for oxygen ('O') and hydrogen ('H').
#    - Columns:
#        - 'type' (str): Atom type ('O' or 'H').
#        - 'sigma' (float): Lennard-Jones parameter (Å).
#        - 'epsilon' (float): Lennard-Jones well depth (K).
#        - 'charge' (float): Partial charge (e).
#        - 'num_particles' (int): Number of particles per molecule.

# 3. system DataFrame:
#    - Contains metadata about each system configuration.
#    - Columns:
#        - 'file_paths' (str): File names containing atomic configurations.
#        - 'configuration #' (int): Extracted configuration number (1-4).
#        - 'number of particles' (float): Number of molecules (from 'NIST_SPC_E_Water').
#        - 'box length' (float): Box dimensions (from 'NIST_SPC_E_Water').
#        - 'cutoff' (int): Fixed cutoff distance for interactions (10 Å).
#        - 'alpha' (float): Ewald summation parameter (5.6 / min(a, b, c)).
#        - 'kmax' (int): Maximum wave vector index (5); also, only include k for which k² < kmax² + 2, i.e., k² < 27.
#        - 'ε0' (float): Permittivity of Vacuum (8.854187817E-12 C²/(J m)).
#        - 'kB' (float): Boltzmann Constant (1.3806488E-23 J/K).

# 4. configuration DataFrame (from 'extracting_positions'):
#    - Created per file, containing atomic positions.
#    - Columns:
#        - 'X' (float): Atom coordinates in Ångströms.
#        - 'Y' (float): Atom coordinates in Ångströms.
#        - 'Z' (float): Atom coordinates in Ångströms.
#        - 'Atom Type' (str): Type of atom ('O' or 'H').
#        - 'Molecule' (int): Molecule index assigned based on position.


system, force_field, NIST_TRICLINIC_SPC_E_Water = creating_dataframes(file_paths, atom_properties,NIST_TRICLINIC_SPC_E_Water)

# Computing energies storing in results
results = pd.DataFrame()

results['Number of Particles'] = system['number of particles'].astype(int)

# Calculate LRC energy for all system configurations
results['lrc_Energies'] = system.apply(
    lambda row: compute_lrc_energy(row, force_field), axis=1
)

# Calculate pairwise energy for all system configurations
results['dispersion_energies'] = system['file_paths'].apply(
    lambda file_path: pair_dispersion_energy(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path), 
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['real_energies'] = system['file_paths'].apply(
    lambda file_path: compute_real_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['fourier_energies'] = system['file_paths'].apply(
    lambda file_path: compute_fourier_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['self_energies'] = system['file_paths'].apply(
    lambda file_path: compute_self_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['intra_energies'] = system['file_paths'].apply(
    lambda file_path: compute_intra_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

def compare_LJ_coulomb_energy(df1, df2, tolerance=1e-4):
    df_merged = df1.merge(df2, left_on='Number of Particles', right_on='M (number of SPC/E molecules)', how='left')

    matched_real = matched_fourier = matched_self = matched_intra = 0
    matched_dispersion = matched_lrc = 0
    not_matched_real = not_matched_fourier = not_matched_self = not_matched_intra = 0
    not_matched_dispersion = not_matched_lrc = 0

    real_energy_output, fourier_energy_output = [], []
    self_energy_output, intra_energy_output = [], []
    lrc_energy_output, dispersion_energy_output = [], []

    for idx, row in df_merged.iterrows():
        real_energy = row['real_energies']
        fourier_energy = row['fourier_energies']
        self_energy = row['self_energies']
        intra_energy = row['intra_energies']
        num_molecules = row['Number of Particles']
        lrc_energy = row['lrc_Energies']
        dispersion_energy = row['dispersion_energies']

        if pd.isna(row['Ereal/kB (K)']):
            continue

        nist_real_energy = float(row['Ereal/kB (K)'])
        nist_fourier_energy = float(row['Efourier/kB (K)'])
        nist_self_energy = float(row['Eself/kB (K)'])
        nist_intra_energy = float(row['Eintra/kB (K)'])
        nist_lrc_energy = float(row['ELRC/kB (K)'])
        nist_dispersion_energy = float(row['Edisp/kB (K)'])

        match_real = np.isclose(real_energy, nist_real_energy, atol=tolerance)
        match_fourier = np.isclose(fourier_energy, nist_fourier_energy, atol=tolerance)
        match_self = np.isclose(self_energy, nist_self_energy, atol=tolerance)
        match_intra = np.isclose(intra_energy, nist_intra_energy, atol=tolerance)
        match_dispersion = np.isclose(dispersion_energy, nist_dispersion_energy, atol=tolerance)
        match_lrc = np.isclose(lrc_energy, nist_lrc_energy, atol=tolerance)

        matched_real += int(match_real)
        not_matched_real += int(not match_real)
        matched_fourier += int(match_fourier)
        not_matched_fourier += int(not match_fourier)
        matched_self += int(match_self)
        not_matched_self += int(not match_self)
        matched_intra += int(match_intra)
        not_matched_intra += int(not match_intra)
        matched_dispersion += int(match_dispersion)
        not_matched_dispersion += int(not match_dispersion)
        matched_lrc += int(match_lrc)
        not_matched_lrc += int(not match_lrc)

        dispersion_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {dispersion_energy:.4E}, NIST: {nist_dispersion_energy:.4E}, Match: {match_dispersion}"")
        lrc_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {lrc_energy:.4E}, NIST: {nist_lrc_energy:.4E}, Match: {match_lrc}"")
        real_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {real_energy:.4E}, NIST: {nist_real_energy:.4E}, Match: {match_real}"")
        fourier_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {fourier_energy:.4E}, NIST: {nist_fourier_energy:.4E}, Match: {match_fourier}"")
        self_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {self_energy:.4E}, NIST: {nist_self_energy:.4E}, Match: {match_self}"")
        intra_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {intra_energy:.4E}, NIST: {nist_intra_energy:.4E}, Match: {match_intra}"")

    print()
    print(""Lennard-Jones Pair Dispersion Energy Comparison:"")
    print(*dispersion_energy_output)
    print(""Lennard-Jones long-range corrections Energy Comparison:"")
    print(*lrc_energy_output)
    print(""Real Energy Comparison:"")
    print(*real_energy_output)
    print(""Fourier Energy Comparison:"")
    print(*fourier_energy_output)
    print(""Self Energy Comparison:"")
    print(*self_energy_output)
    print(""Intra Energy Comparison:"")
    print(*intra_energy_output)
    print()
    print(f""Count of correct pairwise answers: {matched_dispersion}"")
    print(f""Count of incorrect pairwise answers: {not_matched_dispersion}"")
    print(f""Count of correct LRC answers: {matched_lrc}"")
    print(f""Count of incorrect LRC answers: {not_matched_lrc}"")
    print(f""Count of correct Real Energy answers: {matched_real}"")
    print(f""Count of incorrect Real Energy answers: {not_matched_real}"")
    print(f""Count of correct Fourier Energy answers: {matched_fourier}"")
    print(f""Count of incorrect Fourier Energy answers: {not_matched_fourier}"")
    print(f""Count of correct Self Energy answers: {matched_self}"")
    print(f""Count of incorrect Self Energy answers: {not_matched_self}"")
    print(f""Count of correct Intra Energy answers: {matched_intra}"")
    print(f""Count of incorrect Intra Energy answers: {not_matched_intra}"")
    print()
    total_correct = matched_real + matched_fourier + matched_self + matched_intra + matched_dispersion + matched_lrc
    total_incorrect = not_matched_real + not_matched_fourier + not_matched_self + not_matched_intra + not_matched_dispersion + not_matched_lrc

    print(f""Total correct answers: {total_correct}"")
    print(f""Total incorrect answers: {total_incorrect}"")


# calling compare_coulomb_energy function
compare_LJ_coulomb_energy(results, NIST_TRICLINIC_SPC_E_Water)

Please review the provided code and implement the missing functions needed to compute Coulombic contributions using the traditional Ewald Summation Method for triclinic or monoclinic configurations data.

Produce a JSON output in the following format:
  ""Reasoning"": """",
  ""Code"": """"

Ensure that:
1. The JSON output is **properly formatted** with **double quotes** around keys.
2. The **Reasoning** section provides a concise and clear explanation of the approach taken.
3. The **Code** section contains well-structured, indented, and syntactically correct Python (or the required language).
4. The JSON output does **not** contain extraneous symbols such as triple backticks (` ``` `) or markdown indicators.
5. The output should be **fully valid JSON** and parseable using `json.loads()`.

Context:
Illustration of input file format:

            3.000000000000e+01       3.000000000000e+01       3.000000000000e+01
            8.500000000000e+01       7.500000000000e+01       8.000000000000e+01
         200
    1      -1.073606597760e+01       1.432194046140e+01      -6.226901963110e+00    O
    2      -1.661030970030e+01      -1.461065205480e+01      -5.798020258290e+00    H
    3      -1.118063417070e+01       1.380841402440e+01      -6.960829561930e+00    H
    4      -1.377161709910e+01      -8.711236583990e+00      -1.350200277380e+01    O
    5      -1.347193958490e+01      -8.247621904110e+00      -1.433582218840e+01    H
   
Refer to the Coulomb Ewald summation formula below.

Formula(latex form):

\Large \begin{eqnarray} E_{coulomb}\left(\mathbf{r}^N\right) & = &
\sum\limits_{j}  \sum\limits_{l>j}
\dfrac{q_j q_l}{ 4 \pi \epsilon_0} \dfrac{\text{erfc}\left(\alpha \cdot  \left| \mathbf{r}_{jl} \right| \right)}{\left| \mathbf{r}_{jl} \right|} \Theta\left( r_{cut} - \left|\mathbf{r}_{jl}\right| \right) \\
&& +\dfrac{1}{2 \pi V} \sum\limits_{\mathbf{k} \neq \mathbf{0}} \dfrac{1}{k^2} \exp \left[-\left( \dfrac{\pi k}{\alpha} \right)^2 \right] \dfrac{1}{4 \pi \epsilon_0} \cdot \left|\sum\limits_{j=1}^N q_j \exp \left(2\pi i \mathbf{k} \cdot \mathbf{r}_j \right) \right|^2 \\
&& - \dfrac{\alpha}{\sqrt{\pi}} \sum\limits_j \dfrac{q_j^2}{4 \pi \epsilon_0} \\
&& - \sum\limits_{j=1}^M  \sum\limits_{\kappa}  \sum\limits_{\lambda>\kappa} \dfrac{q_{j_\kappa} q_{j_\lambda}}{ 4 \pi \epsilon_0} \dfrac{\text{erf}\left(\alpha \cdot  \left| \mathbf{r}_{j_\kappa j_\lambda} \right| \right)}{\left| \mathbf{r}_{j_\kappa j_\lambda} \right|}
\end{eqnarray}

Explanation:

We note that this form of the Ewald Summation

1. requires total charge neutrality for the configuration and

2. neglects the surface dipole term (equivalent to using the ""tin-foil"" or conducting surface boundary condition)

Description:

The terms on the right-hand side of the equality to be computed are:

1) The real-space term Ereal,

2) The Fourier-space term, Efourier,

3) The self-correction term Eself,

4) The intramolecular term Eintra.

5) The Real Energy

6) The dispersion Energy

Notes:

Primary task: 

Write your code to modify the functions outlined above and incorporate any necessary additional functions.

You may access the required columns from the given dataframes as parameters to the function to calculate the energies.

Print Statements: Ensure that the print statements in the compare_LJ_coulomb_energy function remain exactly as they are, even as you make modifications to the other functions.

Function Modifications: The output should always include Python code for modifying the respective functions.

Flexibility in Code Changing: You are free to change other parts of the code, but the compare_LJ_coulomb_energy function must remain unchanged, as it manages the iteration loop.

Strict Requirements:

Function Names: Do not modify the function names or parameters.

Preserve compare_LJ_coulomb_energy Function: The compare_LJ_coulomb_energy function should remain unchanged, as it controls the iteration loop.

Iteration Notes: 

Iterative Process: If multiple functions are provided to solve the task, work through them one by one in each iteration.

Automated Iteration: The iteration loop will continue until the desired outcome is achieved.

Feedback Integration: When feedback is provided, ensure you proceed with the next steps based on the iteration results and the correct answers generated.



Result from the code generated:
Your code hasn't yet passed all of the NIST benchmark tests. Here's the current progress:

Lennard-Jones Pair Dispersion Energy Comparison:
Test 1 (200 molecules): Computed: 9.3763E+04, NIST: 1.4403E+04, Match: False
Lennard-Jones long-range corrections Energy Comparison:
Test 1 (200 molecules): Computed: -9.7626E+02, NIST: -1.0273E+03, Match: False
Real Energy Comparison:
Test 1 (200 molecules): Computed: -3.1845E+05, NIST: -2.9713E+05, Match: False
Fourier Energy Comparison:
Test 1 (200 molecules): Computed: 2.7448E+04, NIST: 2.8897E+04, Match: False
Self Energy Comparison:
Test 1 (200 molecules): Computed: -3.7929E+06, NIST: -5.7910E+06, Match: False
Intra Energy Comparison:
Test 1 (200 molecules): Computed: 3.6075E+06, NIST: 5.7177E+06, Match: False

Count of correct pairwise answers: 0
Count of incorrect pairwise answers: 1
Count of correct LRC answers: 0
Count of incorrect LRC answers: 1
Count of correct Real Energy answers: 0
Count of incorrect Real Energy answers: 1
Count of correct Fourier Energy answers: 0
Count of incorrect Fourier Energy answers: 1
Count of correct Self Energy answers: 0
Count of incorrect Self Energy answers: 1
Count of correct Intra Energy answers: 0
Count of incorrect Intra Energy answers: 1

Total correct answers: 0
Total incorrect answers: 6

Out of the tests, 0 answers have been correct, with 6 remaining. 
Keep going – you're getting closer! Continue refining the code step by step until it passes all the tests.

Complete each function sequentially, incorporating feedback to optimize efficiency and align with NIST benchmarks. Aim to match the benchmark values as closely as possible with each attempt, ensuring visible numerical improvements. Refer to the context and revise accordingly.","{
  ""Reasoning"": ""To bring the computed results closer to the NIST benchmark values for triclinic or monoclinic cells, we must (1) parse the box side lengths (a, b, c) and angles (α, β, γ) from the first two lines of the input file, (2) build the corresponding box_matrix and its inverse, (3) store them in the configuration DataFrame's attrs, and (4) modify the real-space and reciprocal-space Ewald sums to apply proper triclinic minimum-image convention. Additionally, enabling O-H cross terms in Lennard-Jones if desired (though standard SPC/E sets hydrogen’s Lennard-Jones parameters to zero), or making sure we skip only those pairs that are truly zero, can help match the reference energies. Below is the updated code in compliance with these steps. The compare_LJ_coulomb_energy function remains unchanged."",
  ""Code"": ""import numpy as np\nimport pandas as pd\nfrom scipy.special import erfc, erf\nimport math\n\n################################################################################\n# Helper function: build the 3x3 box matrix from side lengths and angles\n################################################################################\ndef build_box_matrix(a, b, c, alpha_deg, beta_deg, gamma_deg):\n    alpha = np.deg2rad(alpha_deg)\n    beta = np.deg2rad(beta_deg)\n    gamma = np.deg2rad(gamma_deg)\n\n    v1 = np.array([a, 0.0, 0.0])\n    v2 = np.array([\n        b * math.cos(gamma),\n        b * math.sin(gamma),\n        0.0\n    ])\n\n    c_x = c * math.cos(beta)\n    c_y = c * (math.cos(alpha) - math.cos(beta) * math.cos(gamma)) / math.sin(gamma)\n    c_z_sq = c**2 - c_x**2 - c_y**2\n    if c_z_sq < 0.0:\n        c_z_sq = 0.0  # rounding safeguard\n    c_z = math.sqrt(c_z_sq)\n\n    v3 = np.array([c_x, c_y, c_z])\n    box_matrix = np.vstack((v1, v2, v3))\n    return box_matrix\n\n################################################################################\n# Atom properties\n################################################################################\natom_properties = {\n    'O': {'type': 'O', 'sigma': 3.165558, 'epsilon': 78.197431, 'charge': -0.8476, 'num_particles': 1},\n    'H': {'type': 'H', 'sigma': 0.0, 'epsilon': 0.0, 'charge': 0.4238, 'num_particles': 2},\n}\n\nfile_paths = [\n    '../data/spce-sample-non-cuboid-configurations/spce_triclinic_sample_periodic3.txt'\n]\n\nNIST_TRICLINIC_SPC_E_Water = {\n    'Configuration': [1, 2, 3, 4],\n    'M (number of SPC/E molecules)': [400, 300, 200, 100],\n    'Cell Type': ['Triclinic', 'Monoclinic', 'Triclinic', 'Monoclinic'],\n    'Cell Side Lengths [a, b, c] (Å)': ['[30 Å, 30 Å, 30 Å]', '[27 Å, 30 Å, 36 Å]', '[30 Å, 30 Å, 30 Å]', '[36 Å, 36 Å, 36 Å]'],\n    'Cell Angles [α, β, γ] (degrees)': ['[100°, 95°, 75°]', '[90°, 75°, 90°]', '[85°, 75°, 80°]', '[90°, 60°, 90°]'],\n    'Number of Wave Vectors': [831, 1068, 838, 1028],\n    'Edisp/kB (K)': [111992.0, 43286.0, 14403.3, 25025.1],\n    'ELRC/kB (K)': [-4109.19, -2105.61, -1027.3, -163.091],\n    'Ereal/kB (K)': [-727219.0, -476902.0, -297129.0, -171462.0],\n    'Efourier/kB (K)': [44677.0, 44409.4, 28897.4, 22337.2],\n    'Eself/kB (K)': [-11582000.0, -8686470.0, -5790980.0, -2895490.0],\n    'Eintra/kB (K)': [11435400.0, 8576520.0, 5717680.0, 2858840.0],\n    'Etotal/kB (K)': [-721254.0, -501259.0, -328153.0, -160912.0]\n}\n\n################################################################################\n# extracting_positions: parse box vectors from line[0] and line[1], build box\n################################################################################\ndef extracting_positions(input_file):\n    with open(input_file, 'r') as f:\n        lines = f.readlines()\n\n    # line[0] => a, b, c\n    a_b_c = lines[0].split()\n    a, b, c = map(float, a_b_c[:3])\n\n    # line[1] => alpha, beta, gamma\n    alpha_beta_gamma = lines[1].split()\n    alpha_deg, beta_deg, gamma_deg = map(float, alpha_beta_gamma[:3])\n\n    # The next line might be the total # of atoms or molecules, skip it.\n    # The positions start from line index=3.\n    raw_positions = lines[3:]\n\n    data_list = []\n    for line in raw_positions:\n        parts = line.strip().split()\n        if len(parts) >= 5:\n            try:\n                x, y, z = map(float, parts[1:4])\n                atom_type = parts[4]\n                data_list.append([x, y, z, atom_type])\n            except ValueError:\n                continue\n\n    config_df = pd.DataFrame(data_list, columns=['X','Y','Z','Atom Type'])\n    config_df.index = range(1, len(config_df)+1)\n    config_df['Molecule'] = ((config_df.index - 1) // 3) + 1\n\n    # build box matrix\n    box_matrix = build_box_matrix(a, b, c, alpha_deg, beta_deg, gamma_deg)\n    inv_box_matrix = np.linalg.inv(box_matrix)\n\n    # store them as attrs\n    config_df.attrs['box_matrix'] = box_matrix\n    config_df.attrs['inv_box_matrix'] = inv_box_matrix\n    config_df.attrs['a'] = a\n    config_df.attrs['b'] = b\n    config_df.attrs['c'] = c\n    config_df.attrs['alpha_deg'] = alpha_deg\n    config_df.attrs['beta_deg'] = beta_deg\n    config_df.attrs['gamma_deg'] = gamma_deg\n\n    return config_df\n\n################################################################################\n# Creating dataframes (system, force_field, NIST)\n################################################################################\ndef creating_dataframes(file_paths, atom_properties, NIST_SPC_E_Water):\n    NIST_SPC_E_Water = pd.DataFrame(NIST_SPC_E_Water)\n    NIST_SPC_E_Water['Sum of energies'] = (\n        NIST_SPC_E_Water['Edisp/kB (K)'] + NIST_SPC_E_Water['ELRC/kB (K)'] +\n        NIST_SPC_E_Water['Ereal/kB (K)'] + NIST_SPC_E_Water['Efourier/kB (K)'] +\n        NIST_SPC_E_Water['Eself/kB (K)'] + NIST_SPC_E_Water['Eintra/kB (K)']\n    )\n\n    force_field = pd.DataFrame(atom_properties).from_dict(atom_properties, orient='index')\n\n    system = pd.DataFrame(file_paths, columns=['file_paths'])\n    system['configuration #'] = (\n        system['file_paths']\n        .str.extract(r'(\\d+)', expand=False)\n        .fillna('0')\n        .astype(int)\n    )\n\n    # Assign number_of_particles from NIST, fallback for box_length.\n    system[['number of particles','box length']] = system['configuration #'].apply(\n        lambda x: pd.Series({\n            'number of particles': float(\n                NIST_SPC_E_Water.loc[\n                    NIST_SPC_E_Water['Configuration'] == x,\n                    'M (number of SPC/E molecules)'\n                ].values[0]\n            ) if x in NIST_SPC_E_Water['Configuration'].values else 0.0,\n            'box length': 30.0\n        })\n    )\n\n    system['cutoff'] = 10\n    system['alpha'] = system.apply(\n        lambda row: 5.6 / row['box length'] if row['box length'] > 0.0 else 0.28,\n        axis=1\n    )\n\n    system['kmax'] = 5\n    system['ε0'] = float(8.854187817E-12)\n    system['kB'] = float(1.3806488E-23)\n\n    return system, force_field, NIST_SPC_E_Water\n\n################################################################################\n# Minimum-image functions\n################################################################################\ndef minimum_image_distance(r_ij, box_len):\n    return r_ij - box_len * np.round(r_ij / box_len)\n\ndef triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):\n    frac = inv_box_matrix @ r_vec\n    frac -= np.rint(frac)\n    return box_matrix @ frac\n\n################################################################################\n# Lennard-Jones pair dispersion, skipping hydrogen-hydrogen for SPC/E.\n################################################################################\ndef pair_dispersion_energy(system_data, configuration, force_field):\n    positions = configuration[['X','Y','Z']].values\n    atom_types = configuration['Atom Type'].values\n    cutoff = system_data['cutoff']\n    box_len = system_data['box length']\n\n    box_matrix = configuration.attrs.get('box_matrix', None)\n    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)\n\n    total_disp = 0.0\n    n_atoms = len(positions)\n\n    for i in range(n_atoms):\n        for j in range(i+1, n_atoms):\n            # For standard SPC/E, H atoms have zero LJ. If included, it contributes 0 energy.\n            # But to replicate NIST, we can skip pairs if the force_field has zero epsilon.\n            eps_i = force_field.loc[atom_types[i], 'epsilon']\n            eps_j = force_field.loc[atom_types[j], 'epsilon']\n            if eps_i == 0.0 and eps_j == 0.0:\n                continue  # skip purely zero\n\n            r_ij = positions[i] - positions[j]\n            if box_matrix is not None and inv_box_matrix is not None:\n                r_ij = triclinic_minimum_image_distance(r_ij, box_matrix, inv_box_matrix)\n            else:\n                r_ij = minimum_image_distance(r_ij, box_len)\n\n            dist = np.linalg.norm(r_ij)\n            if 0 < dist < cutoff:\n                sig_i = force_field.loc[atom_types[i], 'sigma']\n                sig_j = force_field.loc[atom_types[j], 'sigma']\n                eps_ij = math.sqrt(eps_i*eps_j)\n                sig_ij = 0.5*(sig_i+sig_j)\n                ratio = sig_ij/dist\n                lj = 4.0*eps_ij*(ratio**12 - ratio**6)\n                total_disp += lj\n\n    return total_disp\n\n################################################################################\n# LRC for Lennard-Jones, skipping hydrogen if zero epsilon.\n################################################################################\ndef compute_lrc_energy(system_row, force_field):\n    U_lrc = 0.0\n    cutoff = system_row['cutoff']\n    if cutoff <= 0.0:\n        return 0.0\n\n    for atype, row in force_field.iterrows():\n        eps = row['epsilon']\n        sig = row['sigma']\n        if eps == 0.0:\n            continue\n        n_part = system_row['number of particles'] * row['num_particles']\n        volume = (system_row['box length'])**3\n        rho = n_part / volume\n\n        sigC3 = (sig / cutoff)**3\n        sigC9 = sigC3**3\n\n        # LRC per particle\n        term = (8.0/3.0)*math.pi * rho * eps * (sig**3)\n        term *= (sigC9/3.0 - sigC3)\n        term *= n_part\n        U_lrc += term\n\n    return U_lrc\n\n################################################################################\n# Real-space Coulomb\n################################################################################\ndef compute_real_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data['alpha']\n    cutoff = system_data['cutoff']\n    box_len = system_data['box length']\n\n    box_matrix = configuration.attrs.get('box_matrix', None)\n    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)\n\n    positions = configuration[['X','Y','Z']].values\n    atom_types = configuration['Atom Type'].values\n    charges = np.array([force_field.loc[t, 'charge'] for t in atom_types])\n    mol_ids = configuration['Molecule'].values\n\n    real_e = 0.0\n    n_atoms = len(positions)\n\n    def cubic_Mi(dr, lbox):\n        dr[0] -= round(dr[0]/lbox)*lbox\n        dr[1] -= round(dr[1]/lbox)*lbox\n        dr[2] -= round(dr[2]/lbox)*lbox\n        return dr\n\n    for i in range(n_atoms-1):\n        for j in range(i+1, n_atoms):\n            # skip intramolecular in real since we add them in compute_intra.\n            if mol_ids[i] == mol_ids[j]:\n                continue\n            dr = positions[j] - positions[i]\n            if box_matrix is not None and inv_box_matrix is not None:\n                dr = triclinic_minimum_image_distance(dr, box_matrix, inv_box_matrix)\n            else:\n                dr = cubic_Mi(dr, box_len)\n            dist = np.linalg.norm(dr)\n            if dist < cutoff and dist > 1e-14:\n                q_i = charges[i]*e_charge\n                q_j = charges[j]*e_charge\n                dist_m = dist*1e-10\n                real_e += coulomb_factor*(q_i*q_j/dist_m)*erfc(alpha*dist)\n\n    return real_e\n\n################################################################################\n# Build reciprocal vectors\n################################################################################\ndef build_reciprocal_vectors(box_matrix):\n    inv_t = np.linalg.inv(box_matrix).T\n    return 2.0*math.pi*inv_t\n\n################################################################################\n# Fourier-space Ewald\n################################################################################\ndef compute_fourier_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data['alpha']\n    kmax = system_data['kmax']\n\n    box_matrix = configuration.attrs.get('box_matrix', None)\n    if box_matrix is not None:\n        vol_m3 = abs(np.linalg.det(box_matrix))*(1e-10)**3\n        recip = build_reciprocal_vectors(box_matrix)\n    else:\n        L = system_data['box length']\n        vol_m3 = (L*1e-10)**3\n        recip = (2.0*math.pi/(L*1e-10))*np.eye(3)\n\n    positions = configuration[['X','Y','Z']].values*1e-10\n    charges = np.array([force_field.loc[t,'charge'] for t in configuration['Atom Type']])\n    charges_c = charges*e_charge\n\n    prefactor = coulomb_factor/(2.0*vol_m3)\n    alpha_m = alpha*1e10\n\n    fourier_e = 0.0\n\n    for nx in range(-kmax, kmax+1):\n        for ny in range(-kmax, kmax+1):\n            for nz in range(-kmax, kmax+1):\n                if nx==0 and ny==0 and nz==0:\n                    continue\n\n                kvec = nx*recip[:,0] + ny*recip[:,1] + nz*recip[:,2]\n                ksq = np.dot(kvec, kvec)\n                if ksq < 1e-14:\n                    continue\n\n                real_part, imag_part = 0.0, 0.0\n                for i,(x,y,z) in enumerate(positions):\n                    kr = kvec[0]*x + kvec[1]*y + kvec[2]*z\n                    vcos = math.cos(kr)\n                    vsin = math.sin(kr)\n                    real_part += charges_c[i]*vcos\n                    imag_part += charges_c[i]*vsin\n\n                sksq = real_part**2 + imag_part**2\n                expo = math.exp(-ksq/(4.0*alpha_m**2))\n\n                term = prefactor*(4.0*math.pi/ksq)*expo*sksq\n                fourier_e += term\n\n    return fourier_e\n\n################################################################################\n# Self energies\n################################################################################\ndef compute_self_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data['alpha']\n    alpha_m = alpha*1e10\n\n    charges = np.array([force_field.loc[t,'charge'] for t in configuration['Atom Type']])\n    charges_c = charges*e_charge\n\n    sum_q2 = np.sum(charges_c**2)\n    return - coulomb_factor*(alpha_m/math.sqrt(math.pi))*sum_q2\n\n################################################################################\n# Intramolecular term\n################################################################################\ndef compute_intra_energies(system_data, configuration, force_field):\n    e_charge = 1.602176634e-19\n    coulomb_factor = 8.9875517923e9 / 1.3806488e-23\n\n    alpha = system_data['alpha']\n    positions = configuration[['X','Y','Z']].values\n    atom_types = configuration['Atom Type'].values\n    charges = np.array([force_field.loc[t,'charge'] for t in atom_types])\n    mol_ids = configuration['Molecule'].values\n\n    intra_e = 0.0\n    n_mols = np.unique(mol_ids)\n\n    for m_id in n_mols:\n        idxs = np.where(mol_ids == m_id)[0]\n        n_in_mol = len(idxs)\n        for i in range(n_in_mol-1):\n            for j in range(i+1, n_in_mol):\n                ri = idxs[i]\n                rj = idxs[j]\n                dx = positions[rj,0]-positions[ri,0]\n                dy = positions[rj,1]-positions[ri,1]\n                dz = positions[rj,2]-positions[ri,2]\n                dist = math.sqrt(dx*dx + dy*dy + dz*dz)\n                if dist>1e-14:\n                    qi = charges[ri]*e_charge\n                    qj = charges[rj]*e_charge\n                    dist_m = dist*1e-10\n                    val = coulomb_factor*(qi*qj/dist_m)*erf(alpha*dist)\n                    intra_e -= val\n\n    return intra_e\n\n################################################################################\n# Build system, force field, compute energies, compare\n################################################################################\nsystem, force_field, NIST_SPC_E_Water = creating_dataframes(file_paths, atom_properties, NIST_TRICLINIC_SPC_E_Water)\n\nresults = pd.DataFrame()\nresults['Number of Particles'] = system['number of particles'].astype(int)\n\nresults['lrc_Energies'] = system.apply(\n    lambda row: compute_lrc_energy(row, force_field), axis=1\n)\n\nresults['dispersion_energies'] = system['file_paths'].apply(\n    lambda f: pair_dispersion_energy(\n        system[system['file_paths']==f].iloc[0],\n        extracting_positions(f),\n        force_field\n    )\n)\n\nresults['real_energies'] = system['file_paths'].apply(\n    lambda f: compute_real_energies(\n        system[system['file_paths']==f].iloc[0],\n        extracting_positions(f),\n        force_field\n    )\n)\n\nresults['fourier_energies'] = system['file_paths'].apply(\n    lambda f: compute_fourier_energies(\n        system[system['file_paths']==f].iloc[0],\n        extracting_positions(f),\n        force_field\n    )\n)\n\nresults['self_energies'] = system['file_paths'].apply(\n    lambda f: compute_self_energies(\n        system[system['file_paths']==f].iloc[0],\n        extracting_positions(f),\n        force_field\n    )\n)\n\nresults['intra_energies'] = system['file_paths'].apply(\n    lambda f: compute_intra_energies(\n        system[system['file_paths']==f].iloc[0],\n        extracting_positions(f),\n        force_field\n    )\n)\n\n################################################################################\n# compare_LJ_coulomb_energy function remains unchanged\n################################################################################\ndef compare_LJ_coulomb_energy(df1, df2, tolerance=1e-4):\n    df_merged = df1.merge(df2, left_on='Number of Particles', right_on='M (number of SPC/E molecules)', how='left')\n\n    matched_real = matched_fourier = matched_self = matched_intra = 0\n    matched_dispersion = matched_lrc = 0\n    not_matched_real = not_matched_fourier = not_matched_self = not_matched_intra = 0\n    not_matched_dispersion = not_matched_lrc = 0\n\n    real_energy_output, fourier_energy_output = [], []\n    self_energy_output, intra_energy_output = [], []\n    lrc_energy_output, dispersion_energy_output = [], []\n\n    for idx, row in df_merged.iterrows():\n        real_energy = row['real_energies']\n        fourier_energy = row['fourier_energies']\n        self_energy = row['self_energies']\n        intra_energy = row['intra_energies']\n        num_molecules = row['Number of Particles']\n        lrc_energy = row['lrc_Energies']\n        dispersion_energy = row['dispersion_energies']\n\n        if pd.isna(row['Ereal/kB (K)']):\n            continue\n\n        nist_real_energy = float(row['Ereal/kB (K)'])\n        nist_fourier_energy = float(row['Efourier/kB (K)'])\n        nist_self_energy = float(row['Eself/kB (K)'])\n        nist_intra_energy = float(row['Eintra/kB (K)'])\n        nist_lrc_energy = float(row['ELRC/kB (K)'])\n        nist_dispersion_energy = float(row['Edisp/kB (K)'])\n\n        match_real = np.isclose(real_energy, nist_real_energy, atol=tolerance)\n        match_fourier = np.isclose(fourier_energy, nist_fourier_energy, atol=tolerance)\n        match_self = np.isclose(self_energy, nist_self_energy, atol=tolerance)\n        match_intra = np.isclose(intra_energy, nist_intra_energy, atol=tolerance)\n        match_dispersion = np.isclose(dispersion_energy, nist_dispersion_energy, atol=tolerance)\n        match_lrc = np.isclose(lrc_energy, nist_lrc_energy, atol=tolerance)\n\n        matched_real += int(match_real)\n        not_matched_real += int(not match_real)\n        matched_fourier += int(match_fourier)\n        not_matched_fourier += int(not match_fourier)\n        matched_self += int(match_self)\n        not_matched_self += int(not match_self)\n        matched_intra += int(match_intra)\n        not_matched_intra += int(not match_intra)\n        matched_dispersion += int(match_dispersion)\n        not_matched_dispersion += int(not match_dispersion)\n        matched_lrc += int(match_lrc)\n        not_matched_lrc += int(not match_lrc)\n\n        dispersion_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {dispersion_energy:.4E}, NIST: {nist_dispersion_energy:.4E}, Match: {match_dispersion}\"")\n        lrc_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {lrc_energy:.4E}, NIST: {nist_lrc_energy:.4E}, Match: {match_lrc}\"")\n        real_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {real_energy:.4E}, NIST: {nist_real_energy:.4E}, Match: {match_real}\"")\n        fourier_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {fourier_energy:.4E}, NIST: {nist_fourier_energy:.4E}, Match: {match_fourier}\"")\n        self_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {self_energy:.4E}, NIST: {nist_self_energy:.4E}, Match: {match_self}\"")\n        intra_energy_output.append(f\""Test {idx+1} ({num_molecules} molecules): Computed: {intra_energy:.4E}, NIST: {nist_intra_energy:.4E}, Match: {match_intra}\"")\n\n    print()\n    print(\""Lennard-Jones Pair Dispersion Energy Comparison:\"")\n    print(*dispersion_energy_output)\n    print(\""Lennard-Jones long-range corrections Energy Comparison:\"")\n    print(*lrc_energy_output)\n    print(\""Real Energy Comparison:\"")\n    print(*real_energy_output)\n    print(\""Fourier Energy Comparison:\"")\n    print(*fourier_energy_output)\n    print(\""Self Energy Comparison:\"")\n    print(*self_energy_output)\n    print(\""Intra Energy Comparison:\"")\n    print(*intra_energy_output)\n    print()\n    print(f\""Count of correct pairwise answers: {matched_dispersion}\"")\n    print(f\""Count of incorrect pairwise answers: {not_matched_dispersion}\"")\n    print(f\""Count of correct LRC answers: {matched_lrc}\"")\n    print(f\""Count of incorrect LRC answers: {not_matched_lrc}\"")\n    print(f\""Count of correct Real Energy answers: {matched_real}\"")\n    print(f\""Count of incorrect Real Energy answers: {not_matched_real}\"")\n    print(f\""Count of correct Fourier Energy answers: {matched_fourier}\"")\n    print(f\""Count of incorrect Fourier Energy answers: {not_matched_fourier}\"")\n    print(f\""Count of correct Self Energy answers: {matched_self}\"")\n    print(f\""Count of incorrect Self Energy answers: {not_matched_self}\"")\n    print(f\""Count of correct Intra Energy answers: {matched_intra}\"")\n    print(f\""Count of incorrect Intra Energy answers: {not_matched_intra}\"")\n    print()\n    total_correct = matched_real+matched_fourier+matched_self+matched_intra+matched_dispersion+matched_lrc\n    total_incorrect = not_matched_real+not_matched_fourier+not_matched_self+not_matched_intra+not_matched_dispersion+not_matched_lrc\n    print(f\""Total correct answers: {total_correct}\"")\n    print(f\""Total incorrect answers: {total_incorrect}\"")\n\ncompare_LJ_coulomb_energy(results, NIST_SPC_E_Water)\n""
}","import numpy as np
import pandas as pd
from scipy.special import erfc,erf
import math 

# defining all variables
atom_properties = {
    'O': {'type': 'O', 'sigma': 3.165558, 'epsilon': 78.197431, 'charge': -0.8476, 'num_particles': 1},
    'H': {'type': 'H', 'sigma': 0.000000, 'epsilon': 0.000000, 'charge': 0.4238, 'num_particles': 2},
}

# Trying for small configurations first
file_paths = [
    #    '../data/spce_sample_config_periodic4.txt',
    #    '../data/spce_sample_config_periodic2.txt',
    #    '../data/spce_sample_config_periodic3.txt',
        '../data/spce-sample-non-cuboid-configurations/spce_triclinic_sample_periodic3.txt'
    ]

NIST_TRICLINIC_SPC_E_Water = {'Configuration': [1, 2, 3, 4],
 'M (number of SPC/E molecules)': [400, 300, 200, 100],
 'Cell Type': ['Triclinic', 'Monoclinic', 'Triclinic', 'Monoclinic'],
 'Cell Side Lengths [a, b, c] (Å)': ['[30 Å, 30 Å, 30 Å]',
  '[27 Å, 30 Å, 36 Å]',
  '[30 Å, 30 Å, 30 Å]',
  '[36 Å, 36 Å, 36 Å]'],
 'Cell Angles [α, β, γ] (degrees)': ['[100°, 95°, 75°]',
  '[90°, 75°, 90°]',
  '[85°, 75°, 80°]',
  '[90°, 60°, 90°]'],
 'Number of Wave Vectors': [831, 1068, 838, 1028],
 'Edisp/kB (K)': [111992.0, 43286.0, 14403.3, 25025.1],
 'ELRC/kB (K)': [-4109.19, -2105.61, -1027.3, -163.091],
 'Ereal/kB (K)': [-727219.0, -476902.0, -297129.0, -171462.0],
 'Efourier/kB (K)': [44677.0, 44409.4, 28897.4, 22337.2],
 'Eself/kB (K)': [-11582000.0, -8686470.0, -5790980.0, -2895490.0],
 'Eintra/kB (K)': [11435400.0, 8576520.0, 5717680.0, 2858840.0],
 'Etotal/kB (K)': [-721254.0, -501259.0, -328153.0, -160912.0]}

# Data processing





def extracting_positions(input_file):
        # Extract the positions from the .xyz file
    with open(input_file, ""r"") as file:
        lines = file.readlines()

    data_lines = lines[2:]

    data_list = []
    for line in data_lines:
        stripped_line = line.strip()
        parts = stripped_line.split()
        if len(parts) >= 5:  
            try:
                x, y, z = map(float, parts[1:4])
                atom_type = parts[4]
                data_list.append([x, y, z, atom_type])
            except ValueError:
                continue  

    # Create a DataFrame with all configurations
    columns = [""X"", ""Y"", ""Z"", ""Atom Type""]
    configuration = pd.DataFrame(data_list, columns=columns)

    configuration.index = range(1, len(configuration) + 1)

    configuration[""Molecule""] = ((configuration.index - 1) // 3) + 1
    
    return configuration

# create the target dataframes
def creating_dataframes(file_paths, atom_properties, NIST_SPC_E_Water):
    NIST_SPC_E_Water = pd.DataFrame(NIST_SPC_E_Water)
    NIST_SPC_E_Water['Sum of energies'] = (
        NIST_SPC_E_Water['Edisp/kB (K)'] + NIST_SPC_E_Water['ELRC/kB (K)'] +
        NIST_SPC_E_Water['Ereal/kB (K)'] + NIST_SPC_E_Water['Efourier/kB (K)'] +
        NIST_SPC_E_Water['Eself/kB (K)'] + NIST_SPC_E_Water['Eintra/kB (K)']
    )

    force_field = pd.DataFrame(atom_properties).from_dict(atom_properties, orient='index')

    system = pd.DataFrame(file_paths, columns=['file_paths'])
    system['configuration #'] = (
        system['file_paths']
        .str.extract(r'(\d+)', expand=False)
        .fillna('0')
        .astype(int)
    )

    # Assign number_of_particles from NIST, fallback for box_length.
    system[['number of particles','box length']] = system['configuration #'].apply(
        lambda x: pd.Series({
            'number of particles': float(
                NIST_SPC_E_Water.loc[
                    NIST_SPC_E_Water['Configuration'] == x,
                    'M (number of SPC/E molecules)'
                ].values[0]
            ) if x in NIST_SPC_E_Water['Configuration'].values else 0.0,
            'box length': 30.0
        })
    )

    system['cutoff'] = 10
    system['alpha'] = system.apply(
        lambda row: 5.6 / row['box length'] if row['box length'] > 0.0 else 0.28,
        axis=1
    )

    system['kmax'] = 5
    system['ε0'] = float(8.854187817E-12)
    system['kB'] = float(1.3806488E-23)

    return system, force_field, NIST_SPC_E_Water

# pairwise dispersion energy functions

# Minimum Image Distance function and Pair Dispersion Energy calculation (Code 3)
def minimum_image_distance(r_ij, box_len):
    return r_ij - box_len * np.round(r_ij / box_len)

# pairwise dispersion energy operation
def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    frac = inv_box_matrix @ r_vec
    frac -= np.rint(frac)
    return box_matrix @ frac

def pair_dispersion_energy(system_data, configuration, force_field):
    positions = configuration[['X','Y','Z']].values
    atom_types = configuration['Atom Type'].values
    cutoff = system_data['cutoff']
    box_len = system_data['box length']

    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    total_disp = 0.0
    n_atoms = len(positions)

    for i in range(n_atoms):
        for j in range(i+1, n_atoms):
            # For standard SPC/E, H atoms have zero LJ. If included, it contributes 0 energy.
            # But to replicate NIST, we can skip pairs if the force_field has zero epsilon.
            eps_i = force_field.loc[atom_types[i], 'epsilon']
            eps_j = force_field.loc[atom_types[j], 'epsilon']
            if eps_i == 0.0 and eps_j == 0.0:
                continue  # skip purely zero

            r_ij = positions[i] - positions[j]
            if box_matrix is not None and inv_box_matrix is not None:
                r_ij = triclinic_minimum_image_distance(r_ij, box_matrix, inv_box_matrix)
            else:
                r_ij = minimum_image_distance(r_ij, box_len)

            dist = np.linalg.norm(r_ij)
            if 0 < dist < cutoff:
                sig_i = force_field.loc[atom_types[i], 'sigma']
                sig_j = force_field.loc[atom_types[j], 'sigma']
                eps_ij = math.sqrt(eps_i*eps_j)
                sig_ij = 0.5*(sig_i+sig_j)
                ratio = sig_ij/dist
                lj = 4.0*eps_ij*(ratio**12 - ratio**6)
                total_disp += lj

    return total_disp

# Compute LRC energy
def compute_lrc_energy(system_row, force_field):
    U_lrc = 0.0
    cutoff = system_row['cutoff']
    if cutoff <= 0.0:
        return 0.0

    for atype, row in force_field.iterrows():
        eps = row['epsilon']
        sig = row['sigma']
        if eps == 0.0:
            continue
        n_part = system_row['number of particles'] * row['num_particles']
        volume = (system_row['box length'])**3
        rho = n_part / volume

        sigC3 = (sig / cutoff)**3
        sigC9 = sigC3**3

        # LRC per particle
        term = (8.0/3.0)*math.pi * rho * eps * (sig**3)
        term *= (sigC9/3.0 - sigC3)
        term *= n_part
        U_lrc += term

    return U_lrc

def triclinic_minimum_image_distance(r_vec, box_matrix, inv_box_matrix):
    frac = inv_box_matrix @ r_vec
    frac -= np.rint(frac)
    return box_matrix @ frac

def compute_real_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data['alpha']
    cutoff = system_data['cutoff']
    box_len = system_data['box length']

    box_matrix = configuration.attrs.get('box_matrix', None)
    inv_box_matrix = configuration.attrs.get('inv_box_matrix', None)

    positions = configuration[['X','Y','Z']].values
    atom_types = configuration['Atom Type'].values
    charges = np.array([force_field.loc[t, 'charge'] for t in atom_types])
    mol_ids = configuration['Molecule'].values

    real_e = 0.0
    n_atoms = len(positions)

    def cubic_Mi(dr, lbox):
        dr[0] -= round(dr[0]/lbox)*lbox
        dr[1] -= round(dr[1]/lbox)*lbox
        dr[2] -= round(dr[2]/lbox)*lbox
        return dr

    for i in range(n_atoms-1):
        for j in range(i+1, n_atoms):
            # skip intramolecular in real since we add them in compute_intra.
            if mol_ids[i] == mol_ids[j]:
                continue
            dr = positions[j] - positions[i]
            if box_matrix is not None and inv_box_matrix is not None:
                dr = triclinic_minimum_image_distance(dr, box_matrix, inv_box_matrix)
            else:
                dr = cubic_Mi(dr, box_len)
            dist = np.linalg.norm(dr)
            if dist < cutoff and dist > 1e-14:
                q_i = charges[i]*e_charge
                q_j = charges[j]*e_charge
                dist_m = dist*1e-10
                real_e += coulomb_factor*(q_i*q_j/dist_m)*erfc(alpha*dist)

    return real_e

def build_reciprocal_vectors(box_matrix):
    inv_t = np.linalg.inv(box_matrix).T
    return 2.0*math.pi*inv_t

def compute_fourier_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data['alpha']
    kmax = system_data['kmax']

    box_matrix = configuration.attrs.get('box_matrix', None)
    if box_matrix is not None:
        vol_m3 = abs(np.linalg.det(box_matrix))*(1e-10)**3
        recip = build_reciprocal_vectors(box_matrix)
    else:
        L = system_data['box length']
        vol_m3 = (L*1e-10)**3
        recip = (2.0*math.pi/(L*1e-10))*np.eye(3)

    positions = configuration[['X','Y','Z']].values*1e-10
    charges = np.array([force_field.loc[t,'charge'] for t in configuration['Atom Type']])
    charges_c = charges*e_charge

    prefactor = coulomb_factor/(2.0*vol_m3)
    alpha_m = alpha*1e10

    fourier_e = 0.0

    for nx in range(-kmax, kmax+1):
        for ny in range(-kmax, kmax+1):
            for nz in range(-kmax, kmax+1):
                if nx==0 and ny==0 and nz==0:
                    continue

                kvec = nx*recip[:,0] + ny*recip[:,1] + nz*recip[:,2]
                ksq = np.dot(kvec, kvec)
                if ksq < 1e-14:
                    continue

                real_part, imag_part = 0.0, 0.0
                for i,(x,y,z) in enumerate(positions):
                    kr = kvec[0]*x + kvec[1]*y + kvec[2]*z
                    vcos = math.cos(kr)
                    vsin = math.sin(kr)
                    real_part += charges_c[i]*vcos
                    imag_part += charges_c[i]*vsin

                sksq = real_part**2 + imag_part**2
                expo = math.exp(-ksq/(4.0*alpha_m**2))

                term = prefactor*(4.0*math.pi/ksq)*expo*sksq
                fourier_e += term

    return fourier_e


def compute_self_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data['alpha']
    alpha_m = alpha*1e10

    charges = np.array([force_field.loc[t,'charge'] for t in configuration['Atom Type']])
    charges_c = charges*e_charge

    sum_q2 = np.sum(charges_c**2)
    return - coulomb_factor*(alpha_m/math.sqrt(math.pi))*sum_q2


def compute_intra_energies(system_data, configuration, force_field):
    e_charge = 1.602176634e-19
    coulomb_factor = 8.9875517923e9 / 1.3806488e-23

    alpha = system_data['alpha']
    positions = configuration[['X','Y','Z']].values
    atom_types = configuration['Atom Type'].values
    charges = np.array([force_field.loc[t,'charge'] for t in atom_types])
    mol_ids = configuration['Molecule'].values

    intra_e = 0.0
    n_mols = np.unique(mol_ids)

    for m_id in n_mols:
        idxs = np.where(mol_ids == m_id)[0]
        n_in_mol = len(idxs)
        for i in range(n_in_mol-1):
            for j in range(i+1, n_in_mol):
                ri = idxs[i]
                rj = idxs[j]
                dx = positions[rj,0]-positions[ri,0]
                dy = positions[rj,1]-positions[ri,1]
                dz = positions[rj,2]-positions[ri,2]
                dist = math.sqrt(dx*dx + dy*dy + dz*dz)
                if dist>1e-14:
                    qi = charges[ri]*e_charge
                    qj = charges[rj]*e_charge
                    dist_m = dist*1e-10
                    val = coulomb_factor*(qi*qj/dist_m)*erf(alpha*dist)
                    intra_e -= val

    return intra_e


# DataFrame Descriptions:

# 1. NIST_TRICLINIC_SPC_E_Water DataFrame:
#    - Contains thermodynamic properties of SPC/E water configurations in both triclinic and monoclinic cells.
#    - Columns:
#        - 'Configuration' (int): Configuration ID (1-4).
#        - 'M (number of SPC/E molecules)' (int): Number of SPC/E molecules in the system.
#        - 'Cell Type' (str): Type of the cell (e.g., Triclinic, Monoclinic).
#        - 'Cell Side Lengths [a, b, c] (Å)' (list of strings): Cell side lengths in Ångströms.
#        - 'Cell Angles [α, β, γ] (degrees)' (list of strings): Cell angles in degrees.
#        - 'Number of Wave Vectors' (int): The number of wave vectors for each configuration.
#        - 'Edisp/kB (K)' (float): Dispersion energy in Kelvin.
#        - 'ELRC/kB (K)' (float): Long-range correction energy in Kelvin.
#        - 'Ereal/kB (K)' (float): Real energy in Kelvin.
#        - 'Efourier/kB (K)' (float): Fourier transform energy in Kelvin.
#        - 'Eself/kB (K)' (float): Self-interaction energy in Kelvin.
#        - 'Eintra/kB (K)' (float): Intra-molecular energy in Kelvin.
#        - 'Etotal/kB (K)' (float): Total energy in Kelvin.

# 2. force_field DataFrame:
#    - Contains force field parameters for SPC/E water, specifically for oxygen ('O') and hydrogen ('H').
#    - Columns:
#        - 'type' (str): Atom type ('O' or 'H').
#        - 'sigma' (float): Lennard-Jones parameter (Å).
#        - 'epsilon' (float): Lennard-Jones well depth (K).
#        - 'charge' (float): Partial charge (e).
#        - 'num_particles' (int): Number of particles per molecule.

# 3. system DataFrame:
#    - Contains metadata about each system configuration.
#    - Columns:
#        - 'file_paths' (str): File names containing atomic configurations.
#        - 'configuration #' (int): Extracted configuration number (1-4).
#        - 'number of particles' (float): Number of molecules (from 'NIST_SPC_E_Water').
#        - 'box length' (float): Box dimensions (from 'NIST_SPC_E_Water').
#        - 'cutoff' (int): Fixed cutoff distance for interactions (10 Å).
#        - 'alpha' (float): Ewald summation parameter (5.6 / min(a, b, c)).
#        - 'kmax' (int): Maximum wave vector index (5); also, only include k for which k² < kmax² + 2, i.e., k² < 27.
#        - 'ε0' (float): Permittivity of Vacuum (8.854187817E-12 C²/(J m)).
#        - 'kB' (float): Boltzmann Constant (1.3806488E-23 J/K).

# 4. configuration DataFrame (from 'extracting_positions'):
#    - Created per file, containing atomic positions.
#    - Columns:
#        - 'X' (float): Atom coordinates in Ångströms.
#        - 'Y' (float): Atom coordinates in Ångströms.
#        - 'Z' (float): Atom coordinates in Ångströms.
#        - 'Atom Type' (str): Type of atom ('O' or 'H').
#        - 'Molecule' (int): Molecule index assigned based on position.


system, force_field, NIST_TRICLINIC_SPC_E_Water = creating_dataframes(file_paths, atom_properties,NIST_TRICLINIC_SPC_E_Water)

# Computing energies storing in results
results = pd.DataFrame()

results['Number of Particles'] = system['number of particles'].astype(int)

# Calculate LRC energy for all system configurations
results['lrc_Energies'] = system.apply(
    lambda row: compute_lrc_energy(row, force_field), axis=1
)

# Calculate pairwise energy for all system configurations
results['dispersion_energies'] = system['file_paths'].apply(
    lambda file_path: pair_dispersion_energy(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path), 
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['real_energies'] = system['file_paths'].apply(
    lambda file_path: compute_real_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['fourier_energies'] = system['file_paths'].apply(
    lambda file_path: compute_fourier_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['self_energies'] = system['file_paths'].apply(
    lambda file_path: compute_self_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

# Calculate pairwise energy for all system configurations
results['intra_energies'] = system['file_paths'].apply(
    lambda file_path: compute_intra_energies(
        system[system['file_paths'] == file_path].iloc[0],  # Ensure single row selection
        extracting_positions(file_path),
        force_field
    )
)

def compare_LJ_coulomb_energy(df1, df2, tolerance=1e-4):
    df_merged = df1.merge(df2, left_on='Number of Particles', right_on='M (number of SPC/E molecules)', how='left')

    matched_real = matched_fourier = matched_self = matched_intra = 0
    matched_dispersion = matched_lrc = 0
    not_matched_real = not_matched_fourier = not_matched_self = not_matched_intra = 0
    not_matched_dispersion = not_matched_lrc = 0

    real_energy_output, fourier_energy_output = [], []
    self_energy_output, intra_energy_output = [], []
    lrc_energy_output, dispersion_energy_output = [], []

    for idx, row in df_merged.iterrows():
        real_energy = row['real_energies']
        fourier_energy = row['fourier_energies']
        self_energy = row['self_energies']
        intra_energy = row['intra_energies']
        num_molecules = row['Number of Particles']
        lrc_energy = row['lrc_Energies']
        dispersion_energy = row['dispersion_energies']

        if pd.isna(row['Ereal/kB (K)']):
            continue

        nist_real_energy = float(row['Ereal/kB (K)'])
        nist_fourier_energy = float(row['Efourier/kB (K)'])
        nist_self_energy = float(row['Eself/kB (K)'])
        nist_intra_energy = float(row['Eintra/kB (K)'])
        nist_lrc_energy = float(row['ELRC/kB (K)'])
        nist_dispersion_energy = float(row['Edisp/kB (K)'])

        match_real = np.isclose(real_energy, nist_real_energy, atol=tolerance)
        match_fourier = np.isclose(fourier_energy, nist_fourier_energy, atol=tolerance)
        match_self = np.isclose(self_energy, nist_self_energy, atol=tolerance)
        match_intra = np.isclose(intra_energy, nist_intra_energy, atol=tolerance)
        match_dispersion = np.isclose(dispersion_energy, nist_dispersion_energy, atol=tolerance)
        match_lrc = np.isclose(lrc_energy, nist_lrc_energy, atol=tolerance)

        matched_real += int(match_real)
        not_matched_real += int(not match_real)
        matched_fourier += int(match_fourier)
        not_matched_fourier += int(not match_fourier)
        matched_self += int(match_self)
        not_matched_self += int(not match_self)
        matched_intra += int(match_intra)
        not_matched_intra += int(not match_intra)
        matched_dispersion += int(match_dispersion)
        not_matched_dispersion += int(not match_dispersion)
        matched_lrc += int(match_lrc)
        not_matched_lrc += int(not match_lrc)

        dispersion_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {dispersion_energy:.4E}, NIST: {nist_dispersion_energy:.4E}, Match: {match_dispersion}"")
        lrc_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {lrc_energy:.4E}, NIST: {nist_lrc_energy:.4E}, Match: {match_lrc}"")
        real_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {real_energy:.4E}, NIST: {nist_real_energy:.4E}, Match: {match_real}"")
        fourier_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {fourier_energy:.4E}, NIST: {nist_fourier_energy:.4E}, Match: {match_fourier}"")
        self_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {self_energy:.4E}, NIST: {nist_self_energy:.4E}, Match: {match_self}"")
        intra_energy_output.append(f""Test {idx+1} ({num_molecules} molecules): Computed: {intra_energy:.4E}, NIST: {nist_intra_energy:.4E}, Match: {match_intra}"")

    print()
    print(""Lennard-Jones Pair Dispersion Energy Comparison:"")
    print(*dispersion_energy_output)
    print(""Lennard-Jones long-range corrections Energy Comparison:"")
    print(*lrc_energy_output)
    print(""Real Energy Comparison:"")
    print(*real_energy_output)
    print(""Fourier Energy Comparison:"")
    print(*fourier_energy_output)
    print(""Self Energy Comparison:"")
    print(*self_energy_output)
    print(""Intra Energy Comparison:"")
    print(*intra_energy_output)
    print()
    print(f""Count of correct pairwise answers: {matched_dispersion}"")
    print(f""Count of incorrect pairwise answers: {not_matched_dispersion}"")
    print(f""Count of correct LRC answers: {matched_lrc}"")
    print(f""Count of incorrect LRC answers: {not_matched_lrc}"")
    print(f""Count of correct Real Energy answers: {matched_real}"")
    print(f""Count of incorrect Real Energy answers: {not_matched_real}"")
    print(f""Count of correct Fourier Energy answers: {matched_fourier}"")
    print(f""Count of incorrect Fourier Energy answers: {not_matched_fourier}"")
    print(f""Count of correct Self Energy answers: {matched_self}"")
    print(f""Count of incorrect Self Energy answers: {not_matched_self}"")
    print(f""Count of correct Intra Energy answers: {matched_intra}"")
    print(f""Count of incorrect Intra Energy answers: {not_matched_intra}"")
    print()
    total_correct = matched_real+matched_fourier+matched_self+matched_intra+matched_dispersion+matched_lrc
    total_incorrect = not_matched_real+not_matched_fourier+not_matched_self+not_matched_intra+not_matched_dispersion+not_matched_lrc
    print(f""Total correct answers: {total_correct}"")
    print(f""Total incorrect answers: {total_incorrect}"")


# calling compare_coulomb_energy function
compare_LJ_coulomb_energy(results, NIST_TRICLINIC_SPC_E_Water)"
